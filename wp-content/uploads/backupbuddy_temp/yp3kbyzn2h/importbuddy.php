<?php
/* ImportBuddy Restore & Migration Tool - iThemes.com
 * @author Dustin Bolton
 *
 * ATTENTION: IF YOU ARE READING THIS WHILE TRYING TO LOAD IMPORTBUDDY TO RESTORE YOUR SITE:
 * Your server is not properly handling PHP files. Contact your hosting provider to fix this.
 * Notify them that PHP files are not executing and instead are outputting their code contents.
 *
 */

$php_minimum = '5.1'; // User's PHP must be equal or newer to this version.

if ( version_compare( PHP_VERSION, $php_minimum ) < 0 ) {
	die( 'ERROR #9013. See <a href="http://ithemes.com/codex/page/BackupBuddy:_Error_Codes#9013">this codex page for details</a>. Sorry! PHP version ' . $php_minimum . ' or newer is required for BackupBuddy to properly run. You are running PHP version ' . PHP_VERSION . '.' );
}

$abspath = rtrim( dirname( __FILE__ ), '\\/' ) . '/';
define( 'ABSPATH', $abspath );
define( 'PB_BB_VERSION', '4.2.14.11 (downloaded 2014-10-23T09:17:50+00:00)' );
define( 'PB_PASSWORD', 'fad94bb296114d4060c8a3d1baeb994b' );

// Used by wpdb class.
define('DB_CHARSET', 'utf8');
define('DB_COLLATE', '');

@date_default_timezone_set( @date_default_timezone_get() ); // Prevents date() from throwing a warning if the default timezone has not been set. Run prior to any file_exists()!


// Try to put an index.htm file in place during import to help prevent against file browsing. Only do if not a defined step OR a non-numeric defined step OR a defined numeric step < 5.
if (
	( ! isset( $_GET['step'] ) )
	||
	( isset( $_GET['step'] ) && !is_numeric( $_GET['step'] ) )
	||
	( isset( $_GET['step'] ) && is_numeric( $_GET['step'] ) && ( $_GET['step'] < 5 ) )
	)
{
	if ( ! file_exists( ABSPATH . 'index.htm' ) ) {
		@file_put_contents( ABSPATH . 'index.htm', '<html></html>' );
	}
}


// Unpack importbuddy files into importbuddy directory.
if ( !file_exists( ABSPATH . 'importbuddy' ) || ( ( count( $_GET ) == 0 ) && ( count( $_POST ) == 0 ) ) ) {
	$unpack_importbuddy = true;
	if ( file_exists( ABSPATH . 'importbuddy' ) ) { // ImportBuddy directory already exists. We may need to re-unpack it if this file has been updated since.
		$signature = @file_get_contents( ABSPATH . 'importbuddy/_signature.php' );
		$signature = trim( str_replace( '<?php die(); ?>', '', $signature ) );
		if ( md5( PB_BB_VERSION . PB_PASSWORD ) != $signature ) { // Signature mismatch. We will need to delete and unpack again to update.
			echo '<!-- unlinking existing importbuddy directory. -->';
			recursive_unlink( ABSPATH . 'importbuddy' );
		} else {
			$unpack_importbuddy = false;
		}
	}
	if ( true === $unpack_importbuddy ) {
		unpack_importbuddy();
		@file_put_contents( ABSPATH . 'importbuddy/_signature.php', '<?php die(); ?>' . md5( PB_BB_VERSION . PB_PASSWORD ) ); // Create a hash of this ImportBuddy version & password. On accessing importbuddy.php's authentication page all importbuddy files will be freshly unpacked if the importbuddy.php version and/or password mismatches to allow users to just replace importbuddy.php to upgrade ImportBuddy or password.
	}
}



// Database wrapper.
require_once( ABSPATH . 'importbuddy/classes/wp-db.php' );
global $wpdb;
//$wpdb = new wpdb();



if ( isset( $_GET['api'] ) && ( $_GET['api'] != '' ) ) { // API ACCESS
	if ( $_GET['api'] == 'ping' ) {
		die( 'pong' );
	} else {
		die( 'Unknown API access action.' );
	}
} else { // NORMAL ACCESS.
	if ( !file_exists( ABSPATH . 'importbuddy/init.php' ) ) {
		die( 'Error: Unable to find file `' . ABSPATH . 'importbuddy/init.php`. Make sure that you downloaded this script from within BackupBuddy. Copying importbuddy files from inside the plugin directory is not sufficient as many file additions are made on demand.' );
	} else {
		require_once( ABSPATH . 'importbuddy/init.php' );
	}
}



function recursive_unlink( $path ) {
  return is_file($path)?
    @unlink($path):
array_map('recursive_unlink',glob($path.'/*'))==@rmdir($path);
}


/**
*	unpack_importbuddy()
*
*	Unpacks required files encoded in importbuddy.php into stand-alone files.
*
*	@return		null
*/
function unpack_importbuddy() {
	if ( !is_writable( ABSPATH ) ) {
		echo 'Error #224834. This directory, `' . ABSPATH . '`, is not write enabled according to the server. Please verify proper write permissions to continue. If this persists, contact your web hosting provider and tell them that is_writable("' . ABSPATH . '") returns FALSE in PHP.';
		die();
	} else {
		$unpack_file = '';
		
		// Make sure the file is complete and contains all the packed data to the end.
		if ( false === strpos( file_get_contents( ABSPATH . 'importbuddy.php' ), '###PACKDATA' . ',END' ) ) { // Concat here so we don't false positive on this line when searching.
			die( 'ERROR: It appears your importbuddy.php file is incomplete.  It may have not finished downloading or uploading completely.  Please try re-downloading the script from within BackupBuddy in WordPress (do not just copy the file from the plugin directory) and re-uploading it.' );
		}
		
		$handle = @fopen( ABSPATH . 'importbuddy.php', 'r' );
		if ( $handle ) {
			while ( ( $buffer = fgets( $handle ) ) !== false ) {
				if ( substr( $buffer, 0, 11 ) == '###PACKDATA' ) {
					$packdata_commands = explode( ',', trim( $buffer ) );
					array_shift( $packdata_commands );
					
					if ( $packdata_commands[0] == 'BEGIN' ) {
						// Start packed data.
					} elseif ( $packdata_commands[0] == 'FILE_START' ) {
						$unpack_file = $packdata_commands[2];
					} elseif ( $packdata_commands[0] == 'FILE_END' ) {
						$unpack_file = '';
					} elseif ( $packdata_commands[0] == 'END' ) {
						return;
					}
				} else {
					if ( $unpack_file != '' ) {
						if ( !is_dir( dirname( ABSPATH . $unpack_file ) ) ) {
							$mkdir_result = mkdir( dirname( ABSPATH . $unpack_file ), 0777, true ); // second param makes recursive.
							if ( $mkdir_result === false ) {
								echo 'Error #54455. Unable to mkdir `' . dirname( ABSPATH . $unpack_file ) . '`<br>';
							}
						}
						$fileput_result = file_put_contents( ABSPATH . $unpack_file, base64_decode( $buffer ) );
						if ( $fileput_result === false ) {
							echo 'Error #65656. Unable to put file contents to `' . ABSPATH . $unpack_file . '`.<br>';
						}
					}
				}
			}
			if ( !feof( $handle ) ) {
				echo "Error: unexpected fgets() fail.<br>";
			}
			fclose( $handle );
		} else {
			echo 'ERROR #54455: Unable to open importbuddy.php file for reading in packaged data.<br>';
		}
	}
}
die();
?>
<?php /*
###PACKDATA,BEGIN
###PACKDATA,FILE_START,/_importbuddy/importbuddy/history.txt,importbuddy/history.txt
My4wLjAgLSAyMDEyLTAxLTA2IC0gRHVzdGluIEJvbHRvbgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/history.txt,importbuddy/history.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/history_archived.txt,importbuddy/history_archived.txt
Mi4yLjIgLSAyMDExLTA5LTE5IC0gRHVzdGluIEJvbHRvbgoJSW1wb3J0QnVkZHkgQkVUQToKCQlBQlNQQVRIIG5vdyBpbmNsdWRlcyB0cmFpbGluZyBzbGFzaCB0byBtYXRjaCBXb3JkUHJlc3MuIEZpeGVzIHppcCBkZXRlY3Rpb24gb24gbWFueSBMaW51eCBzeXN0ZW1zLgoJCUZpeGVkIGlzX3dyaXRhYmxlIGJsb2dnaW5nIGxvZyBjcmVhdGlvbiBpbiBsb2coKSBmdW5jdGlvbi4KMi4yLjEgLSAyMDExLTA5LTE2IC0gRHVzdGluIEJvbHRvbgoJSW1wb3J0QnVkZHkgQkVUQTogQWRkZWQgYWRkc2xhc2hlcygpIGludG8gc3RhdHVzIGZ1bmN0aW9uIGZvciBqYXZhc2NyaXB0IHBhc3NpbmcuIFByZXZlbnRlZCBzbGFzaGVzIGZyb20gZGlzYXBwZWFyaW5nLgoyLjAuMCAtIDIwMTEtMDgtMjMgLSBEdXN0aW4gQm9sdG9uCglJbXBvcnRCdWRkeSBCRVRBOiAKCQlHZW5lcmFsIFVJIGNsZWFudXAgYW5kIHBvbGlzaGluZy4KCQlBZGRlZCBTZXJ2ZXIgSW5mby4gcGFnZSdzIFNlcnZlciBDb25maWd1cmF0aW9uIHNlY3Rpb24gd2l0aGluIG5ldyAnU2VydmVyIEluZm9ybWF0aW9uJyBidXR0b24gb24gU3RlcCAxLgoJCUFkZGVkIGFiaWxpdHkgdG8gdXBsb2FkIGJhY2t1cHMgZnJvbSBsb2NhbCBjb21wdXRlciB0byBzZXJ2ZXIgKG9ubHkgaWYgaW1wb3J0YnVkZHkgcGFzc3dvcmQgaXMgc2V0OyBmb3Igc2VjdXJpdHkpLgoJCUFkZGVkIG1vcmUgQWR2YW5jZWQgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBmYWxsYmFjayB1bnppcCBtb2Rlcy4KCQlBZGRlZCBtb3JlIGRldGFpbGVkIHN0YXR1cyBsb2dnaW5nIHRvIGVhY2ggc3RlcCBpbiBhIHRleHRhcmVhLgoJCVJlLWFycmFuZ2VkIGFuZCByZWR1Y2VkIHN0ZXAgY291bnQgZm9yIHN0cmVhbWxpbmluZyBpbXBvcnRzLgoJCVdoZW4gJ3dpcGUgZGF0YWJhc2UnIG9wdGlvbiBpcyBzZWxlY3RlZCB0aGUgbXlzcWwgdGVzdCBub3cgcmVwb3J0cyB3YXJuaW5ncyBhbmQgbm90ZXMgaXQgd2lsbCB3aXBlIGlmIGl0IGZpbmRzIGFuIGV4aXN0aW5nIGRhdGFiYXNlIHJhdGhlciB0aGFuIGVycm9ycy4KCQlSYXRoZXIgdGhhbiBBTEwgcm93cyBvZiBBTEwgZGF0YWJhc2VzIGhhdmluZyBVUkxzIGFuZCBwYXRocyAnbWlncmF0ZWQnLCBrbm93biB0YWJsZXMvcm93cyB3aGVyZSBubyBzZXJpYWxpemVkIGRhdGEgc2hvdWxkIGV2ZXIgc2hvdyB1cCBhcmUgc2tpcHBlZCBmb3IgaW5jcmVhdGUgbWlncmF0aW9uIHBlcmZvcm1hbmNlLiBBbGwgdW5rbm93biB0YWJsZXMvcm93cyBhcmUgc2Nhbm5lZCBhbmQgdXBkYXRlZCBpZiBuZWVkZWQuCgkJTm93IGFsc28gZGVsZXRpbmcgdGhlIGltcG9ydCBkaXJlY3Rvcnkgb24gY2xlYW51cCBzdGVwLgoJCUJyb2tlIG91dCBhbGwgaW1wb3J0YnVkZHkgZnVuY3Rpb25hbGl0eSBpbnRvIHNlcGFyYXRlIGZpbGVzIGluIHRoZSBpbXBvcnRidWRkeSBkaXJlY3RvcnkuIFRoaXMgZGlyZWN0b3J5IGFuZCBjb250ZW50cyBhcmUgJ2V4dHJhY3RlZCcgZnJvbSBpbXBvcnRidWRkeS5waHAgaWYgdGhleSBkbyBub3QgZXhpc3QuCgkJQnJva2Ugb3V0IGRhdGFiYXNlIG1pZ3JhdGlvbiBmdW5jdGlvbnMgaW50byBhIG5ldyBjbGFzcyBmb3IgZWFzaWVyIHVwZGF0aW5nIHRvIGhhbmRsZSBuZXcgZGF0YWJhc2VzIGFuZCBzY2VuYXJpb3MuCgkJTm93IHVzaW5nIFppcEJ1ZGR5IGNsYXNzIGZvciBmdWxsIHppcCBjb21wYXRpYmlsaXR5IGZhbGxiYWNrcyBpbmNsdWRpbmcgWmlwQXJjaGl2ZSAmIFBDTFppcC4gSXNzdWVzICMxMCwgIzM2LgoJCVBDTFppcCBubyBsb25nZXIgdGhyb3dzIHVuZGVmaW5lZCBjb25zdGFudCBub3RpY2VzLiBJc3N1ZSAjMTQuCgkJTm8gbG9uZ2VyIHJlLWVuYWJsZWQgY29tbWVudGVkIG91dCBXUF9TSVRFVVJMICYgV1BfSE9NRSBpbnN0YW5jZXMgaW4gd3AtY29uZmlnLnBocC4gSXNzdWUgIzUyLgoJCUJldHRlciB0ZXN0aW5nIC8gaGFuZGxpbmcgb2Ygc2VyaWFsaXplZCBkYXRhLiBJc3N1ZSAjNjIsICMyOS4KCQlVcGRhdGVkIGltcG9ydGJ1ZGR5IHRvIHVzZSBCYWNrdXBCdWRkeSdzIGdyZWVkeSBzY3JpcHQgbGltaXRzIGZ1bnRpb25hbGl0eS4gSXNzdWUgIzY5LgoJCUltcHJvdmVkIEltcG9ydEJ1ZGR5IGVycm9yIG1lc3NhZ2VzLiBJc3N1ZSAjMzguCgkJQmV0dGVyIHBhcnNpbmcgb2YgY29uZmlndXJhdGlvbnMgaW4gd3AtY29uZmlnLnBocC4gSXNzdWUgIzMzLgoyLjIuMCAtIDIwMTEtMDgtMjMgLSBEdXN0aW4gQm9sdG9uCglVcGRhdGVkIEFCU1BBVEggdG8gdXNlIFdvcmRQcmVzcyBzdHlsZSB3aXRoIHRyYWlsaW5nIHNsYXNoLiBVcGRhdGVkIGFsbCB1c2VzLiBJc3N1ZSAjCglGaXhlZCBhbGwgc2l0ZXMgYmVpbmcgZGV0ZWN0ZWQgYXMgTXVsdGlzaXRlIGluc3RhbmNlcy4gSXNzdWUgIzk3LgoJRml4ZWQgdGFibGUgYnJ1dGVmb3JjaW5nIGRpc3BsYXlpbmcgYFdvcmtpbmdgIHNlZW1pbmdseSBlbmRsZXNzbHkgb24gdmVyeSBsYXJnZSB0YWJsZXMuIENvdWxkIGNhdXNlIG15c3FsIHRvIGdvIGF3YXkgYWxzby4gSXNzdWUgIzk4LgoJUG9zdCBHVUlEcyBhcmUgbm8gbG9uZ2VyIHVwZGF0ZWQgZHVyaW5nIG1pZ3JhdGlvbnMgYXMgcGVyIGh0dHA6Ly9jb2RleC53b3JkcHJlc3Mub3JnL0NoYW5naW5nX1RoZV9TaXRlX1VSTCNJbXBvcnRhbnRfR1VJRF9Ob3RlICAuLiBJc3N1ZSAjOTYuCglBZGRlZCBhZGRzbGFzaGVzKCkgaW50byBpbXBvcnRidWRkeSBzdGF0dXMgZnVuY3Rpb24gZm9yIGphdmFzY3JpcHQgcGFzc2luZy4KMi4yLjEgLSAyMDExLTExLTI2IC0gRHVzdGluIEJvbHRvbgoJaW1wb3J0YnVkZHk6IFByb2JsZW0gd2l0aCBNdWx0aXNpdGUgYmFja3VwIGRldGVjdGlvbiBpbiBpbXBvcnQgY2F1c2luZyBwcm9ibGVtcyBmb3Igc3RhbmRhbG9uZSBtaWdyYXRpb25zIHdpdGggY3VzdG9tIGhvbWUgdXJsLiBJc3N1ZSAjMTMwLgoJaW1wb3J0YnVkZHk6IFByb2JsZW0gd2l0aCBNdWx0aXNpdGUgYmFja3VwIGRldGVjdGlvbiBpbiBpbXBvcnQgY2F1c2luZyBwcm9ibGVtcyBmb3Igc3RhbmRhbG9uZSBtaWdyYXRpb25zIHdpdGggc3BsaXQgdXJsLiBJc3N1ZSAjMTMxLgoJaW1wb3J0YnVkZHk6IEZpeGVkIGFiaWxpdHkgdG8gc2tpcCBkYXRhYmFzZSBpbXBvcnQuIElzc3VlICMxMTQuCglpbXBvcnRidWRkeTogRGF0YWJhc2UgdGVzdCBpbmNvcnJlY3RseSBzdGF0ZWQgdGhhdCB0aGUgZGF0YWJhc2Ugd291bGQgYmUgd2lwZWQgZXZlbiB3aGVuIHdpcGluZyBpcyBub3QgZW5hYmxlZC4gSXNzdWUgIzEwMy4KCWltcG9ydGJ1ZGR5OiBFeHBsaWNpdGx5IHNldHRpbmcgUEhQIHRpbWV6b25lIHRvIGF2b2lkIHdhcm5pbmdzLiBJc3N1ZSAjMTMyLgoyLjIuMyAtIDIwMTItMDEtMDYgLSBEdXN0aW4gQm9sdG9uCglTcGxpdCBVUkwgbWlncmF0aW9ucyBtb2RpZmllZCB0byB1cGRhdGUgYm90aCBzaXRlIFVSTCBhbmQgaG9tZSBVUkwgaW4gdGhlIHByb3BlciBvcmRlciB3aGVuIGRvaW5nIG1hc3MgcmVwbGFjZW1lbnRzLgoJRml4ZWQgcHJlZ19yZXBsYWNlIGJhY2tyZWZlcmVuY2UgaXNzdWUgd2l0aCB3cC1jb25maWcgcGFzc3dvcmQgcmVwbGFjZW1lbnQuIE5vdyBmaWx0ZXJpbmcgcGFzc3dvcmQgdGhyb3VnaCBwcmVnX3JlcGxhY2VfYmFjaygpLg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/history_archived.txt,importbuddy/history_archived.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.php,importbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.php,importbuddy/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init.php,importbuddy/init.php
PD9waHAKLyoqCiAqCiAqCVBsdWdpbiBOYW1lOiBJbXBvcnRCdWRkeQogKglQbHVnaW4gVVJJOiBodHRwOi8vcGx1Z2luYnVkZHkuY29tLwogKglEZXNjcmlwdGlvbjogQmFja3VwQnVkZHkgSW1wb3J0ZXIKICoJVmVyc2lvbjogMS4wLjIKICoJQXV0aG9yOiBEdXN0aW4gQm9sdG9uCiAqCUF1dGhvciBVUkk6IGh0dHA6Ly9kdXN0aW5ib2x0b24uY29tLwogKgogKglJbnN0YWxsYXRpb246CiAqIAogKgkxLiBEb3dubG9hZCBhbmQgdW56aXAgdGhlIGxhdGVzdCByZWxlYXNlIHppcCBmaWxlLgogKgkyLiBJZiB5b3UgdXNlIHRoZSBXb3JkUHJlc3MgcGx1Z2luIHVwbG9hZGVyIHRvIGluc3RhbGwgdGhpcyBwbHVnaW4gc2tpcCB0byBzdGVwIDQuCiAqCTMuIFVwbG9hZCB0aGUgZW50aXJlIHBsdWdpbiBkaXJlY3RvcnkgdG8geW91ciBgL3dwLWNvbnRlbnQvcGx1Z2lucy9gIGRpcmVjdG9yeS4KICoJNC4gQWN0aXZhdGUgdGhlIHBsdWdpbiB0aHJvdWdoIHRoZSAnUGx1Z2lucycgbWVudSBpbiBXb3JkUHJlc3MgQWRtaW5pc3RyYXRpb24uCiAqIAogKglVc2FnZToKICogCiAqCTEuIE5hdmlnYXRlIHRvIHRoZSBuZXcgcGx1Z2luIG1lbnUgaW4gdGhlIFdvcmRwcmVzcyBBZG1pbmlzdHJhdGlvbiBQYW5lbC4KICoKICoJTk9URTogRE8gTk9UIEVESVQgVEhJUyBPUiBBTlkgT1RIRVIgUExVR0lOIEZJTEVTLiBOTyBVU0VSLUNPTkZJR1VSQUJMRSBPUFRJT05TIFdJVEhJTi4KICovCgplcnJvcl9yZXBvcnRpbmcoIEVfRVJST1IgfCBFX1dBUk5JTkcgfCBFX1BBUlNFIHwgRV9OT1RJQ0UgKTsgLy8gSElHSApkZWZpbmUoICdQQl9TVEFOREFMT05FJywgdHJ1ZSApOwpkZWZpbmUoICdQQl9JTVBPUlRCVUREWScsIHRydWUgKTsKCiRwbHVnaW5idWRkeV9zZXR0aW5ncyA9IGFycmF5KAoJCQkJJ3NsdWcnCQkJCT0+CQknYmFja3VwYnVkZHknLAoJCQkJJ3BocF9taW5pbXVtJwkJPT4JCSc1LjInLAoJCQkJJ3NlcmllcycJCQk9PgkJJycsCgkJCQknZGVmYXVsdF9vcHRpb25zJwk9PgkJYXJyYXkoCgkJCQkJCQkJCQkJCSdiYl92ZXJzaW9uJwkJCQk9PglQQl9CQl9WRVJTSU9OLAkvLyBCQiB2ZXJzaW9uIHRvIGJlIGZpbGxlZCBpbiBvbiBkb3dubG9hZC4KCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCSdkaXNwbGF5X21vZGUnCQkJCT0+CSdub3JtYWwnLCAvLyBub3JtYWwsIGVtYmVkLCBvciBhcGkKCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCSdzdGVwJwkJCQkJCT0+CTEsCgkJCQkJCQkJCQkJCSdtYXhfZXhlY3V0aW9uX3RpbWUnCQk9PgkzMCwKCQkJCQkJCQkJCQkJJ2RhdF9maWxlJwkJCQkJPT4JYXJyYXkoKSwKCQkJCQkJCQkJCQkJCgkJCQkJCQkJCQkJCSdza2lwX2ZpbGVzJwkJCQk9PglmYWxzZSwKCQkJCQkJCQkJCQkJJ3dpcGVfZGF0YWJhc2UnCQkJCT0+CWZhbHNlLAoJCQkJCQkJCQkJCQknd2lwZV9kYXRhYmFzZV9hbGwnCQkJPT4JZmFsc2UsCgkJCQkJCQkJCQkJCSdza2lwX2RhdGFiYXNlX2ltcG9ydCcJCT0+CWZhbHNlLAoJCQkJCQkJCQkJCQknbXlzcWxidWRkeV9jb21wYXRpYmlsaXR5Jwk9PglmYWxzZSwKCQkJCQkJCQkJCQkJJ3NraXBfZGF0YWJhc2VfbWlncmF0aW9uJwk9PglmYWxzZSwKCQkJCQkJCQkJCQkJJ3NraXBfZGF0YWJhc2VfYnJ1dGVmb3JjZScJPT4JZmFsc2UsCgkJCQkJCQkJCQkJCSdza2lwX2h0YWNjZXNzJwkJCQk9PglmYWxzZSwKCQkJCQkJCQkJCQkJJ2ZvcmNlX2NvbXBhdGliaWxpdHlfbWVkaXVtJz0+CWZhbHNlLAoJCQkJCQkJCQkJCQknZm9yY2VfY29tcGF0aWJpbGl0eV9zbG93Jwk9PglmYWxzZSwKCQkJCQkJCQkJCQkJJ2ZvcmNlX2hpZ2hfc2VjdXJpdHknCQk9PglmYWxzZSwKCQkJCQkJCQkJCQkJJ3Nob3dfcGhwX3dhcm5pbmdzJwkJCT0+CWZhbHNlLAoJCQkJCQkJCQkJCQknaWdub3JlX3NxbF9lcnJvcnMnCQkJPT4JZmFsc2UsCgkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQknc2l0ZXVybCcJCQkJCT0+CScnLAoJCQkJCQkJCQkJCQknaG9tZScJCQkJCQk9PgknJywKCQkJCQkJCQkJCQkJJ2RvbWFpbicJCQkJCT0+CScnLAkJLy8JKG11bHRpc2l0ZSkKCQkJCQkJCQkJCQkJJ2RiX3NlcnZlcicJCQkJCT0+CScnLAoJCQkJCQkJCQkJCQknZGJfdXNlcicJCQkJCT0+CScnLAoJCQkJCQkJCQkJCQknZGJfcGFzc3dvcmQnCQkJCT0+CScnLAoJCQkJCQkJCQkJCQknZGJfbmFtZScJCQkJCT0+CScnLAoJCQkJCQkJCQkJCQknZGJfcHJlZml4JwkJCQkJPT4JJycsCgkJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCQknbG9nX2xldmVsJwkJCQkJPT4JJzEnLAkJCQkJCS8vIExldmVsIG9mIGVycm9yIGxvZ2dpbmcuCgkJCQkJCQkJCQkJKSwKCQkJCSdtb2R1bGVzJwkJCT0+CQlhcnJheSgKCQkJCQkJCQkJCQkJJ3VwZGF0ZXInCQkJCT0+CWZhbHNlLAkJCQkJCS8vIExvYWQgUGx1Z2luQnVkZHkgYXV0b21hdGljIHVwZ3JhZGVzLgoJCQkJCQkJCQkJCQknZmlsZXN5c3RlbScJCQk9Pgl0cnVlLAkJCQkJCS8vIEZpbGUgc3lzdGVtIGhlbHBlciBtZXRob2RzLgoJCQkJCQkJCQkJCQknZm9ybWF0JwkJCQk9Pgl0cnVlLAkJCQkJCS8vIFRleHQgLyBkYXRhIGZvcm1hdHRpbmcgaGVscGVyIG1ldGhvZHMuCgkJCQkJCQkJCQkJKQoJCQkpOwoKCgovLyAkc2V0dGluZ3MgaXMgZXhwZWN0ZWQgdG8gYmUgcG9wdWxhdGVkIHByaW9yIHRvIGluY2x1ZGluZyBQbHVnaW5CdWRkeSBmcmFtZXdvcmsuIERvIG5vdCBlZGl0IGJlbG93LgpyZXF1aXJlKCBkaXJuYW1lKCBfX0ZJTEVfXyApIC4gJy9wbHVnaW5idWRkeS9fcGx1Z2luYnVkZHkucGhwJyApOwo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init.php,importbuddy/init.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
PD9waHAKcGJfYmFja3VwYnVkZHk6OmxvYWQoKTsKCi8vICoqKioqKioqKiogQUNUSU9OUyAoYWRtaW4pICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBBSkFYIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIERBU0hCT0FSRCAoYWRtaW4pICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBGSUxURVJTIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIFBBR0VTIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIExJQlJBUklFUyAmIENMQVNTRVMgKGFkbWluKSAqKioqKioqKioqCnJlcXVpcmVfb25jZSggJ2NsYXNzZXMvY29yZS5waHAnICk7CgpyZXF1aXJlX29uY2UoICdjbGFzc2VzL2ltcG9ydC5waHAnICk7CnBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10gPSBuZXcgcGJfYmFja3VwYnVkZHlfaW1wb3J0KCk7CgoKLy8gKioqKioqKioqKiBPVEhFUiAoYWRtaW4pICoqKioqKioqKioKCgoKPz4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
PD9waHAKCmlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkaXNwbGF5X21vZGUnICkgPT0gJ2VtYmVkJyApIHsKCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGlzcGxheV9tb2RlJ10gPSAnZW1iZWQnOwoJcGJfYmFja3VwYnVkZHk6OnNhdmUoKTsKfQoKLy8gKioqKioqKioqKiBBQ1RJT05TIChnbG9iYWwpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBBSkFYIChnbG9iYWwpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBDUk9OIChnbG9iYWwpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBGSUxURVJTIChnbG9iYWwpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBXSURHRVRTIChnbG9iYWwpICoqKioqKioqKioKCgoKPz4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_public.php,importbuddy/init_public.php
PD9waHAKCgoKLy8gKioqKioqKioqKiBBQ1RJT05TIChwdWJsaWMpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBBSkFYIChwdWJsaWMpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBGSUxURVJTIChwdWJsaWMpICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBTSE9SVENPREVTIChwdWJsaWMpICoqKioqKioqKioKCgoKPz4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_public.php,importbuddy/init_public.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt

###PACKDATA,FILE_END,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
ICogV2Vic2l0ZTogaHR0cDovL2l0aGVtZXMuY29tCiAqCiAqIEluc3RhbGxhdGlvbjoKICogCiAqIDEuIERvd25sb2FkIGFuZCB1bnppcCB0aGUgbGF0ZXN0IHJlbGVhc2UgemlwIGZpbGUKICogMi4gSWYgeW91IHVzZSB0aGUgV29yZFByZXNzIHBsdWdpbiB1cGxvYWRlciB0byBpbnN0YWxsIHRoaXMgcGx1Z2luIHNraXAgdG8gc3RlcCA0LgogKiAzLiBVcGxvYWQgdGhlIGVudGlyZSBwbHVnaW4gZGlyZWN0b3J5IHRvIHlvdXIgYC93cC1jb250ZW50L3BsdWdpbnMvYCBkaXJlY3RvcnkKICogNC4gQWN0aXZhdGUgdGhlIHBsdWdpbiB0aHJvdWdoIHRoZSAnUGx1Z2lucycgbWVudSBpbiBXb3JkUHJlc3MgQWRtaW5pc3RyYXRpb24KICogCiAqIFVzYWdlOgogKiAKICogMS4gTmF2aWdhdGUgdG8gdGhlIG5ldyBtZW51IGZvciB0aGlzIHBsdWdpbiBpbiB0aGUgV29yZHByZXNzIEFkbWluaXN0cmF0aW9uIFBhbmVsCiAqIDIuIFNlbGVjdCAnR2V0dGluZyBTdGFydGVkJyBmb3IgaW5zdHJ1Y3Rpb25zIGFuZCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLgogKg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
PD9waHAKY2xhc3MgQXV0aCB7CgkKCWNvbnN0IE1BWF9MT0dJTl9BVFRFTVBUU19BTExPV0VEID0gNDsgLy8gTWF4aW11bSBudW1iZXIgb2YgaW52YWxpZCBsb2dpbiBhdHRlbXB0cyBiZWZvcmUgbG9ja2luZyBpbXBvcnRidWRkeS4KCWNvbnN0IFJFU0VUX0RFRkFVTFRTX09OX0lOVkFMSURfTE9HSU4gPSBmYWxzZTsgLy8gV2hldGhlciBvciBub3QgcmVzZXQgYWxsIHNldHRpbmdzL29wdGlvbnMgYmFjayB0byBkZWZhdWx0cyBvbiBsb2dpbiBmYWlsdXJlLgoJY29uc3QgQ09PS0lFX0VYUElSQVRJT04gPSAzNjAwOyAvLyBOdW1iZXIgb2Ygc2Vjb25kcyBhbiBpbXBvcnRidWRkeSBjb29raWUgaXMgdmFsaWQgZm9yLgoJcHJpdmF0ZSBzdGF0aWMgJF9hdXRoZW50aWNhdGVkID0gZmFsc2U7IC8vIFdoZXRoZXIgdXNlciBpcyB2YWxpZGx5IGF1dGhlbnRpY2F0ZWQgb3Igbm90LgoJcHJpdmF0ZSBzdGF0aWMgJF9jaGVja2VkID0gZmFsc2U7IC8vIFdoZXRoZXIgY2hlY2soKSBoYXMgYmVlbiBydW4geWV0LgoJCgkKCQoJLyogY2hlY2soKQoJICoKCSAqIENoZWNrIGF1dGhlbnRpY2F0aW9uIGJhc2VkIG9uIGZvcm0gZGF0YSBzdWJtaXR0ZWQuIFRoaXMgb25seSBuZWVkcyB0byBiZSBydW4gb25jZS4gVXNlIGlzX2F1dGhlbnRpY2F0ZWQoKSB0byBkZXRlcm1pbmUgYXV0aCBzdGF0dXMuCgkgKgoJICogQHBhcmFtCWZvcmNlX2NoZWNrCQlib29sCUlmIHRydWUgdGhlbiB3aWxsIHJlLWNoZWNrIGV2ZW4gaWYgY2hlY2soKSBoYXMgYWxyZWFkeSBiZWVuIHJ1biB0aGlzIHNlc3Npb24uCgkgKgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNoZWNrKCAkZm9yY2VfY2hlY2sgPSBmYWxzZSApIHsKCQkKCQlpZiAoICggdHJ1ZSA9PT0gc2VsZjo6JF9jaGVja2VkICkgJiYgKCAkZm9yY2VfY2hlY2sgPT09IGZhbHNlICkgKSB7IC8vIFNraXAgY2hlY2tpbmcgaWYgYWxyZWFkeSBza2lwcGVkIHVubGVzcyBmb3JjaW5nLgoJCQlyZXR1cm4gc2VsZjo6JF9hdXRoZW50aWNhdGVkOwoJCX0KCQkKCQkkbG9naW5fYXR0ZW1wdF9maWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS9fbG9naW5fYXR0ZW1wdHMucGhwJzsKCQkkbG9naW5fYXR0ZW1wdHMgPSAxOwoJCWlmICggZmlsZV9leGlzdHMoICRsb2dpbl9hdHRlbXB0X2ZpbGUgKSApIHsKCQkJJGxvZ2luX2F0dGVtcHRzID0gQGZpbGVfZ2V0X2NvbnRlbnRzKCAkbG9naW5fYXR0ZW1wdF9maWxlICk7CgkJfQoJCWlmICggZmFsc2UgIT09ICRsb2dpbl9hdHRlbXB0cyApIHsKCQkJJGxvZ2luX2F0dGVtcHRzID0gdHJpbSggc3RyX3JlcGxhY2UoICc8P3BocCBkaWUoKTsgPz4nLCAnJywgJGxvZ2luX2F0dGVtcHRzICkgKTsKCQkJaWYgKCAkbG9naW5fYXR0ZW1wdHMgPiBzZWxmOjpNQVhfTE9HSU5fQVRURU1QVFNfQUxMT1dFRCApIHsKCQkJCWRpZSggJ0FjY2VzcyBEZW5pZWQuIE1heGltdW0gbG9naW4gYXR0ZW1wdHMgZXhjZWVkZWQuIFlvdSBtdXN0IGRlbGV0ZSB0aGUgZmlsZSAiX2xvZ2luX2F0dGVtcHRzLnBocCIgaW4gdGhlIGltcG9ydGJ1ZGR5IGRpcmVjdG9yeSBvbiB5b3VyIHNlcnZlciB0byB1bmxvY2sgdGhpcyBJbXBvcnRCdWRkeSB0byBhbGxvdyBpdCB0byBjb250aW51ZS4nICk7CgkJCX0KCQl9CgkJCgkJJGFjdHVhbF9wYXNzX2hhc2ggPSBQQl9QQVNTV09SRDsKCQlpZiAoICggJyNQQVNTV09SRCMnID09ICRhY3R1YWxfcGFzc19oYXNoICkgfHwgKCAnJyA9PSAkYWN0dWFsX3Bhc3NfaGFzaCApICkgeyBkaWUoICdFcnJvciAjODQ1Nzg0NTk3NDUuIEEgcGFzc3dvcmQgbXVzdCBiZSBzZXQuJyApOyB9CgkJCgkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzd29yZCcgKSAhPSAnJyApIHsKCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9IG1kNSggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncGFzc3dvcmQnICkgKTsKCQl9IGVsc2UgewoJCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAndicgKSAhPSAnJyApIHsgLy8gSGFzaCBzdWJtaXR0ZWQgYnkgbWFnaWMgbWlncmF0aW9uLgoJCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAndicgKTsKCQkJfSBlbHNlIHsgLy8gTm9ybWFsIGZvcm0gc3VibWl0dGVkIGhhc2guCgkJCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3NfaGFzaCcgKSAhPSAnJyApIHsKCQkJCQkkc3VwcGxpZWRfcGFzc19oYXNoID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncGFzc19oYXNoJyApOwoJCQkJfSBlbHNlaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYl9iYWNrdXBidWRkeV9wYXNzX2hhc2gnICkgIT0gJycgKSB7CgkJCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3BiX2JhY2t1cGJ1ZGR5X3Bhc3NfaGFzaCcgKTsKCQkJCX0gZWxzZSB7CgkJCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9ICcnOwoJCQkJfQoJCQl9CgkJfQoJCQoJCWlmICggJHN1cHBsaWVkX3Bhc3NfaGFzaCA9PSAkYWN0dWFsX3Bhc3NfaGFzaCApIHsKCQkJc2VsZjo6JF9hdXRoZW50aWNhdGVkID0gdHJ1ZTsKCQkJc2V0Y29va2llKCAnaW1wb3J0YnVkZHlfbG9naW4nLCBtZDUoIFBCX1BBU1NXT1JEIC4gJ2JhZGdlcnMnICksICggdGltZSgpKyBzZWxmOjpDT09LSUVfRVhQSVJBVElPTiApICk7CgkJfSBlbHNlaWYgKCBpc3NldCggJF9DT09LSUVbJ2ltcG9ydGJ1ZGR5X2xvZ2luJ10gKSAmJiAoICRfQ09PS0lFWydpbXBvcnRidWRkeV9sb2dpbiddICE9ICcnICkgJiYgKCAkX0NPT0tJRVsnaW1wb3J0YnVkZHlfbG9naW4nXSA9PSBtZDUoIFBCX1BBU1NXT1JEIC4gJ2JhZGdlcnMnICkgKSApIHsKCQkJc2VsZjo6JF9hdXRoZW50aWNhdGVkID0gdHJ1ZTsKCQkJc2V0Y29va2llKCAnaW1wb3J0YnVkZHlfbG9naW4nLCBtZDUoIFBCX1BBU1NXT1JEIC4gJ2JhZGdlcnMnICksICggdGltZSgpICsgc2VsZjo6Q09PS0lFX0VYUElSQVRJT04gKSApOwoJCX0gZWxzZSB7IC8vIEluY29ycmVjdCBoYXNoLiBSZXNldCBzZXR0aW5ncyAmIHRyYWNrIGF0dGVtcHRzLgoJCQlpZiAoICcnICE9ICRzdXBwbGllZF9wYXNzX2hhc2ggKSB7IC8vIERvbnQgY291bnQgYmxhbmsgaGFzaCBhcyBhbiBhdHRlbXB0LgoJCQkJaWYgKCB0cnVlID09PSBzZWxmOjpSRVNFVF9ERUZBVUxUU19PTl9JTlZBTElEX0xPR0lOICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpyZXNldF9kZWZhdWx0cygpOwoJCQkJfQoJCQkJaWYgKCBmYWxzZSAhPT0gJGxvZ2luX2F0dGVtcHRzICkgewoJCQkJCWdsb2JhbCAkcGJfbG9naW5fYXR0ZW1wdHM7CgkJCQkJJHBiX2xvZ2luX2F0dGVtcHRzID0gJGxvZ2luX2F0dGVtcHRzOwoJCQkJCUBmaWxlX3B1dF9jb250ZW50cyggJGxvZ2luX2F0dGVtcHRfZmlsZSwgJzw/cGhwIGRpZSgpOyA/PicgLiAoICRsb2dpbl9hdHRlbXB0cyArIDEgKSApOwoJCQkJfQoJCQl9CgkJfQoJCQoJCXNlbGY6OiRfY2hlY2tlZCA9IHRydWU7CgkJCgkJcmV0dXJuIHNlbGY6OiRfYXV0aGVudGljYXRlZDsKCQkKCX0gLy8gRW5kIGNoZWNrKCkuCgkKCQoJCgkvKiBpc19hdXRoZW50aWNhdGVkKCkKCSAqCgkgKiBEZXRlcm1pbmUgd2hldGhlciB1c2VyIGlzIGZ1bGx5IGF1dGhlbnRpY2F0ZWQgb3Igbm90LgoJICoKCSAqIEByZXR1cm4JCWJvb2wJCVRydWUgaWYgZnVsbHkgYXV0aGVudGljYXRlZCwgb3RoZXJ3aXNlIGZhbHNlLgoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpc19hdXRoZW50aWNhdGVkKCkgewoJCQoJCXJldHVybiBzZWxmOjokX2F1dGhlbnRpY2F0ZWQ7CgkJCgl9IC8vIEVuZCBhdXRoZW50aWNhdGVkKCkuCgkKCQoJCgkvKiByZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCkKCSAqCgkgKiBSZXF1aXJlcyB2YWxpZCBhdXRoZW50aWNhdGlvbiB0byBhbGxvdyBwcm9jZWVkaW5nLiBkaWUoKSBpZiBub3QgbG9nZ2VkIGluLgoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCkgewoJCQoJCXNlbGY6OmNoZWNrKCk7CgkJaWYgKCB0cnVlID09PSBzZWxmOjppc19hdXRoZW50aWNhdGVkKCkgKSB7CgkJCXJldHVybiB0cnVlOwoJCX0gZWxzZSB7CgkJCWRpZSggJ0FjY2VzcyBEZW5pZWQuIFlvdSBtdXN0IGxvZyBpbiBmaXJzdC4gUGxlYXNlIHJldHVybiB0byB0aGUgPGEgaHJlZj0iaW1wb3J0YnVkZHkucGhwIj5pbXBvcnRidWRkeS5waHAgaG9tZXBhZ2U8L2E+IGF1dGhlbnRpY2F0ZS4nICk7CgkJfQoJCQoJfSAvLyBFbmQgcmVxdWlyZV9hdXRob3JpemF0aW9uKCk7CgkKfSAvLyBFbmQgY2xhc3MuCgoK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
PD9waHAKY2xhc3MgcGJfYmFja3VwYnVkZHlfYWpheCBleHRlbmRzIHBiX2JhY2t1cGJ1ZGR5X2FqYXhjb3JlIHsKfQo/Pg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css

###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/bb-logo.png,importbuddy/images/bb-logo.png

###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/bb-logo.png,importbuddy/images/bb-logo.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/bluebutton.jpg,importbuddy/images/bluebutton.jpg

###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/bluebutton.jpg,importbuddy/images/bluebutton.jpg
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/bullet_error.png,importbuddy/images/bullet_error.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAhlJREFUeNrEk7tuE0EUhv/ZC7aBOJItItkoOGBjJSkR4REsFyBEkVQUEBcoDQ0SJQ15ApooRVJQJi+AoKFDSCCiiODEBmyMkIXiS3bjy3pn5gyzhgY2XQr+0ezsnjn7aeb8M0wphdPIwCllBQ/1pAQWoJiRBNGiMuxl2HZeKQk5HFao720S8e3RcNj2PR9Tz1/9DfijGXBa45OJIkulYQoPjOmoGV2gem1B/mzc1l8rutdP2kJCCVrnqemilcvBdA7BJpNg8SSsbhPR2TmwS/kiSVoPckMA8vmSP5EoWOkU8Ok95Oc94OY94NZ9+OUyxM47xKYzYMl0QXKxFAJI0ygZqYtA8zvE0RGUGfk9Gzik32WrDfGtjlgmC2kYpRBAmeasFbUhfjR0IW0QJx2kcYIcCZCO+bUaDDs6zg25IIWEkgTF9ah/VkIHR6PAFQ1Tek73oEntis4JAfhxb9/s+deNC2mISgWKWZDPVmFwoRkGRH+AM9mr4EMPfq+3H9qC7zgbg+oBWGoGiMYhXBfmo6dgj1fhtVzgXBxm5jK65R34x85GaAUE2hrUq3dwNlY4f+0GWO0LnIclXUNCZG4e9pUcOge76FZ2X+rlbYUAWh1J8kH3w9s177BVnMjOI5KYGpvAJUfzzWs41Y8vdLVWmGF1TgIEqhOJu25lb9FtfF1mlpVXROOj7PfdTQ3b1uVo/3sX2H+/jb8EGAB6SgK2ePksLgAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/bullet_error.png,importbuddy/images/bullet_error.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/bullet_go.png,importbuddy/images/bullet_go.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEsSURBVDjLY/j//z8DJZhhmBuQvdj8a+p8w//xc3U5yTIgeb7h18bNUf/DZ2j8958qz0nQgPyltv9zF5v/TV9o/Ddxrv7fmvWh/1ednvi/ZLX/f9d+8b+23YI8eA0AOvn/hnPT/q89OwWsccXpCf8n7Cn5v/B41/+MpW7/TdvZ/+o2M/LjNADoZLDmvl35/zt3ZP9v3Zb2v2Fz4v+mren/Zxxq/h+zwOa/aj3DH5wGRM/W/L/y1IT/S0/0/l94rOv/vKMdQEOy/k8/1PQ/banHf8VahlfSlQwGOA0InK74z3Oi9D/nftF/1t38/+LmW/2fdrDhf9Jit//ytQzPJSsZtEiKBe1mxq/xC53/y1czPAFqVic5GoFO/ipXzfxftJJBkeyUKFzOwDm48wIAh5XH+g7drOwAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/bullet_go.png,importbuddy/images/bullet_go.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/button-grad.png,importbuddy/images/button-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAeCAYAAADkftS9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAACF0RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgNC4w6iYndQAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMS8xNy8wONpsdXEAAABGSURBVHicY9Ts2fWfAQ2wMPzHEGNg+f//H6Ygwz9sgthU/sdmJlbtlFpEgpOwWoTszv+Dz0lUtOg/ukoSfATT+5+gSkxBAOqCS3dTeDKPAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/button-grad.png,importbuddy/images/button-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
R0lGODlhBgAHALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAGAAcAAAQVEAFFVUrD0HvF4RfCEYGVFAeFaFUEADs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
R0lGODlhBwAGALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAHAAYAAAQWEKU5kaETqEKHUgcxGZ8SJEL5IccXAQA7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAfCAIAAACgQJBPAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAsSAAALEgHS3X78AAAAIXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyA0LjDqJid1AAAAFnRFWHRDcmVhdGlvbiBUaW1lADEwLzI0LzA4KQ6r+wAAAClJREFUeJxjfPv2LQMSYPn//z8yn4kBFaDzqa0eXZ5U9QMtT6l5tFYPADsXLPcJwrwLAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAAAk1JREFUeNqkkz1MU2EUhp97b6FGoSAMaoBYAimMxgSdHFCpa/1ZXIyToZMOhCgDgyFqjFGm1jhoTDT+JHo7oCYMxp/JgdiAaATibeUvESjtNdD29rscB+GKAeLgSc7ynfd87zk576uJCP8Tvq0KqYTPD0SBZDCi3myF0zabIJXwnQOigabz+5xcksL82zjQH4yosQ1gEfHSMo2QZRqx6df7pZhNylrkJvolPVArlml0r8eLCOubu9MDtZIdvyWu627I4s9vMvv+sFimEbNMI+R9YJnGLss0YjPv2iWfGxfHcWRizpaJOVuO3f0gXS9GZWgyI3P2sjiOI5mvNyU9UONNo1mmEato7olWNPd4a515PsrLsfm/Vu070kRnWz0Abj5N9uNpSvbwQR2Ibgt2o5RCKYW1sERluQ7AvUgrl9sbAfiezbOwVEAphZTV4a/vBIjqgNeslCK1uMSTTz9oCPjpCFZxqrUWgDtDM6Qyyx5O9AqAah1IOrmkV2jbvZ3eQw1M2kXCD0YIPxwG4PHxEC07yz1ccfYRwH0diOdHTlCYvO0Vs3mHky012EVFZblBR2MVi8sOSilKhQz5z2dRC6/iwYhKaCJCKuELARe06nDUaLwBRgAAcyxLXWUZB/bs+K2Z7CCu1QWufTUYUT0blJhK+K5gBC5pe69DVcefE7g2MtUHmWcJIB6MqMEtpZxK+MJAVAJHI9JwDS3/BW3qIjjTHus/veBNs2qmVdanm5oJMIAywA8Yuq4bq28aoANrDC7grqyslIAS4ADurwEAaepxmqgtIWwAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAIk0lEQVR42n1WWVCb1xU2dmKaTu2x04e2k7STtn5q8lYnkzw0T+lMJ3lo7ZlMM5lkYhu8PrSk8aSk8VKQDDYBaqABswnEYkDsNkLsSGwChI2QhA3CrDb7ItCKWPT1nMs//9ipRpr55t7733PO/c6555yrfQD+D0VFxYfa2/WfWaw285DVOjtksRCsMsxDFsLQrJm/C7woY7buwUKw2myMSUNHR2V5RcV7PzwrKIGu7u5zk1NTAy6Pd9vpdsPpehEbEpweD5xeH41ekJwMl9sDt4fhhcfng8frDcw8feYYePCgUqFUvBySgFKpDH/4cNDk8/u3SRFEAu4fYmcXbgAupwvOmadwrm+ItWd3d+9QIsXw+jZl+Le2A7bh4dmbN28eCUmABSw225JkRD6UvRJkAoBjyILVmFg4LlyEO1cFx6VLWL12DY5BMzwAeb1JEAT25t49EqP2MW9iYuKvQxIggV+OjIy6+HAXRUAmQGDjc3TgzG+PYf7IESxfuIBdAKtRUVg8+iqeHjuGucxMeAUJIu99Php+TExNBVJSUn8fksDtlJQ3xycnt5mxiIBEwgfgSZYKluNvY62kFI7mZmyMjYl95/g4HK1tWK2shPWddzD2fSbLs/4L10F5gIyMOx+EJJCenv7uNN0rK8jKOztYso5Af+Q1dL3/BwwUFaGfPB1tb4eDks6u16MvPR0mtRqdtN92+GdYHhyGd3dXSkICjXPz81CpVH8NSSArK+vDZ7NzcO/dv+y9/dZ/URf2EnQ/PYra8HBUkar+88+xFAjAcOYMqsP2ie/1R49AG3YQdsV/xFW4PB45iguLSygqKroYkoC6oOD0wuIiMZaugOAH8FiRiDISLz38E1QfPoTK/fvR8PHHsJNXTZ9+Ck1YGKoPHUIZoZTIDF+NxybA+jKWlleg0Wi+DUmgtLQsmgXlHCD4dgOY7jKiPOzHSN9/AHk/Ckdx+EHk02FZb7yB/MOHUXyQ1hSB9AMvE9FwTOo74RNl6ZPtrKytoab2XlJIAtU1NYkraw65fj0S+BqM0VeRTd4lkFrygZeQSuP3hLR9YUgiYt/RPJPQ/VU0vIGA5LlXvoJVxzrqdQ15IQmQgGptfYOT5oVr4Ll7ewd9t1OR/9rrSCLVeMINaeS16ue/QG9iMlxb21TCPqkjSgRovb7hRGtbe21IAiRQs+50ygQkL6Rk8olILFI5mUtK0BodDd3582j7ZzTMRcWYn54R+y5uzS4PEWAI74XuBnXOzq7ujpAESMBAff557+WKEIbZq00/HyTglSDq3u/nfQG5cxLEKOn2m0zm+Pj4/UEJxMXFhfX1mwZJWW4eWxR2n3+LjPC3PVJMUESDiLBx3pN0+CB5zvt+0ic7siODZvPErVu3XglKICEh4RV6iMbZACstr67B9OAhxp5MiCtZWlnF7PyC2JukZmV6OEjNZYHkVoUsdVCSWYGD7nqean6KrsRssWKF9liHydmGH60kJye/GpQAbRy1DA8vsVfbVEJthg7U3K9DXkERns3No6K6Blm5ecJgQfFd9PT2oZtQV9+AWpLjUd/RKcnWoqyiktZdKNGUy6/k6NgTX1pa2m+CEkhNTf3VyKjdzYI7VEbV9+4jv7AYd3JyMfx4hA4toXURWtoNaGptB/8mpqYRdflrIqDF41E7GptbRLmVV9XgbpkGFVXVPIrwe+lKJqenA3cyM48HJZCRkfHW+MTkDicgR4C97OjqQXFZGbJV+Si4W4IsVR7ukkeaymrYn4yj29iHqtr7RLYOWl2D8PrBoJkJMMR83emSK4ofpFyV6o9BCeTk5Lw3RXfr9u2xfWwfQ2u7nr3n0FGycR7QXZPXZosNrXoDJianKA8WsUjdc5zmtkcjFCE9rZc5B8ThWzvyHxXMzs3ze/BJUAJqtfqjp7NzLMz/YNDbb+IokLdVIqna6X65Ah6N2DFktaGBwp2br+b75xoX+aKmfmAgOUo+Js5eMyGppDfFg1Sm0VwKSqCkpPTM3MICKwnW2Xn5RGKAjfLhnA9cdmxQhD1XXYAZIlxcWoaWNj1yiMyzuQVOOpEThXRlTLKyphbbZI91OVLU7q8EJVBVXf3NwuKyaKObVPvpmdnCWHJqGoz9Jj6IciMgQn9PW09rjegTnT1G1NZpSbaC655J88FCJ/rKNXqE1jkHmIAoV229LjkoAW19fRLXOgsyklPSONzioDpKsJw8tcgFlboQ+s5u3MnOxdj4hIiUobuHE5X/96GQqoVJ8qOWkZ3DjYy7oETAgeaW1vygBJpbWvKYodRKOayU1VXQNTaDHyiLbZhKqpwTUyRXY0srR4hKso3/rotDS2hf19RM+06h02sa4INlcInqDYZ7QQnoDR011MWIgPjfz62U2YuK4O/ccqVyYuM8ym8G77McJy9DehPIhuw9wSfmPcberqAEjL19/RxCNs6C7CU/oQ7GOo8btCc8k0F7MlieweQlsB0ZvB6j3tE/MPAoKAFqrdP9Aw8kb7bIOz95xz1cfhX3XkSG5JX8XRo9UlQYXimCm1vbhB1RhiayT2fMBCXwXVJSTxNlbyPdoa6hUaCeoWvgkdAg5g1aLZrq6qCjeYuWRx2a6FtjvRZa1mM0NqGBwLZkkO2WtnakpKbaghL429+jymJiFVDeiJOhuHEDCqUSsYo9KGNjcSE1E5HpKnyrvInPMosRHZeAyLRcXLx9h/eFvJL0SP9FxMUhRqFA1Jf/aA1K4Nz58xlXrl6TDlMIMCHGv8lwTEwMrscocVylxe8Km/FJYi5eL+zAidsFeDO3Ce9m3CM5JcnFso4MthcjOXDt+nVcvHSpIiiBv5w48f4XX5wyRJ49a4yIfB6RxogIAo2nz54zfnhZafzT1/HGk1H/Mn7wTYLxxJdXxPqjywrjaZaPiDCeIfkzJC/py7ZOnTrVefLkyT9DOvN/1S/OiQQ06hAAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif

###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/pb-logo.png,importbuddy/images/pb-logo.png
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/pb-logo.png,importbuddy/images/pb-logo.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAeCAYAAADkftS9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAACF0RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgNC4w6iYndQAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMS8xNy8wONpsdXEAAAAlSURBVHicY/z///9/BjTAhC7AwMDAwIJFIXbBoaJ9qLhz+IUSAIMMOibeSzRBAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCWpRdWVyeSh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXsKCQlpZiAoIGpRdWVyeSgnI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmcnKS5pcygnOnZpc2libGUnKSApIHsKCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfd29ya2luZycpLnJlcGxhY2VXaXRoKAoJCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfYmxhbmthbGVydCcpLmh0bWwoKS5yZXBsYWNlKCAnI1RJVExFIycsICdQSFAgVGltZW91dCBvciBGYXRhbCBFcnJvciBPY2N1cnJlZCcgKS5yZXBsYWNlKCAnI01FU1NBR0UjJywgJ1RoZSBwYWdlIGRpZCBub3QgZmluaXNoIGxvYWRpbmcgYXMgZXhwZWN0ZWQuICBUaGUgbW9zdCBjb21tb24gY2F1c2UgZm9yIHRoaXMgaXMgdGhlIFBIUCBwcm9jZXNzIHRha2luZyBtb3JlIHRpbWUgdGhhbiBpdCBoYXMgYmVlbiBhbGxvd2VkIGJ5IHlvdXIgaG9zdCAocGhwLmluaSBzZXR0aW5nIDxpPm1heF9leGVjdXRpb25fdGltZTwvaT4pLiBJZiBhIFBIUCBlcnJvciBpcyBkaXNwbGF5ZWQgYWJvdmUgdGhpcyBjYW4gYWxzbyBjYXVzZSB0aGlzIGVycm9yLicgKQoJCQkpOwoJCX0KCX0pOwp9KTsKCmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CglqUXVlcnkoJy5wbHVnaW5idWRkeV90aXAnKS50b29sdGlwKHsKCQl0cmFjazogdHJ1ZSwKCQlkZWxheTogMCwKCQlzaG93VVJMOiBmYWxzZSwKCQlzaG93Qm9keTogIiAtICIsCgkJZmFkZTogMjUwCgl9KTsKCQoJalF1ZXJ5KCcudG9nZ2xlJykuY2xpY2soZnVuY3Rpb24oZSkgewoJCWpRdWVyeSggJyN0b2dnbGUtJyArIGpRdWVyeSh0aGlzKS5hdHRyKCdpZCcpICkuc2xpZGVUb2dnbGUoKTsKCX0pOwoJCglqUXVlcnkoJy5vcHRpb25fdG9nZ2xlJykuY2hhbmdlKGZ1bmN0aW9uKGUpIHsKCQlpZiAoalF1ZXJ5KHRoaXMpLmF0dHIoJ2NoZWNrZWQnKSkgewoJCQlqUXVlcnkoJy4nICsgalF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykgKyAnX3RvZ2dsZScgKS5zbGlkZVRvZ2dsZSgpOwoJCX0gZWxzZSB7CgkJCWpRdWVyeSgnLicgKyBqUXVlcnkodGhpcykuYXR0cignaWQnKSArICdfdG9nZ2xlJyApLnNsaWRlVG9nZ2xlKCk7CgkJfQoJfSk7CgkKCQoJalF1ZXJ5KCcjcGx1Z2luYnVkZHktdGFicycpLnRhYnMoKTsKfSk7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.simple-expand.min.js,importbuddy/js/jquery.simple-expand.min.js
LyogQ29weXJpZ2h0IChDKSAyMDEyIFN5bHZhaW4gSGFtZWwKUHJvamVjdDogaHR0cHM6Ly9naXRodWIuY29tL3JlZGhvdHNseS9zaW1wbGUtZXhwYW5kCk1JVCBMaWNlbmNlOiBodHRwczovL3Jhdy5naXRodWIuY29tL3JlZGhvdHNseS9zaW1wbGUtZXhwYW5kL21hc3Rlci9saWNlbmNlLW1pdC50eHQgKi8KKGZ1bmN0aW9uKCQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpcztlLmRlZmF1bHRzPXtoaWRlTW9kZToiZmFkZVRvZ2dsZSIsZGVmYXVsdFNlYXJjaE1vZGU6InBhcmVudCIsZGVmYXVsdFRhcmdldDoiLmNvbnRlbnQiLHRocm93T25NaXNzaW5nVGFyZ2V0OiEwLGtlZXBTdGF0ZUluQ29va2llOiExLGNvb2tpZU5hbWU6InNpbXBsZS1leHBhbmQifSxlLnNldHRpbmdzPXt9LCQuZXh0ZW5kKGUuc2V0dGluZ3MsZS5kZWZhdWx0cyksZS5maW5kTGV2ZWxPbmVEZWVwPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZS5maW5kKHQpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiEkKHRoaXMpLnBhcmVudHNVbnRpbChlLG4pLmxlbmd0aH0pfSxlLnNldEluaXRpYWxTdGF0ZT1mdW5jdGlvbih0LG4pe3ZhciByPWUucmVhZFN0YXRlKHQpO3I/KHQucmVtb3ZlQ2xhc3MoImNvbGxhcHNlZCIpLmFkZENsYXNzKCJleHBhbmRlZCIpLGUuc2hvdyhuKSk6KHQucmVtb3ZlQ2xhc3MoImV4cGFuZGVkIikuYWRkQ2xhc3MoImNvbGxhcHNlZCIpLGUuaGlkZShuKSl9LGUuaGlkZT1mdW5jdGlvbih0KXtlLnNldHRpbmdzLmhpZGVNb2RlPT09ImZhZGVUb2dnbGUiP3QuaGlkZSgpOmUuc2V0dGluZ3MuaGlkZU1vZGU9PT0iYmFzaWMiJiZ0LmhpZGUoKX0sZS5zaG93PWZ1bmN0aW9uKHQpe2Uuc2V0dGluZ3MuaGlkZU1vZGU9PT0iZmFkZVRvZ2dsZSI/dC5zaG93KCk6ZS5zZXR0aW5ncy5oaWRlTW9kZT09PSJiYXNpYyImJnQuc2hvdygpfSxlLmNoZWNrS2VlcFN0YXRlSW5Db29raWVQcmVjb25kaXRpb25zPWZ1bmN0aW9uKCl7aWYoZS5zZXR0aW5ncy5rZWVwU3RhdGVJbkNvb2tpZSYmJC5jb29raWU9PT11bmRlZmluZWQpdGhyb3cgbmV3IEVycm9yKCJzaW1wbGUtZXhwYW5kOiBrZWVwU3RhdGVJbkNvb2tpZSBvcHRpb24gcmVxdWlyZXMgJC5jb29raWUgdG8gYmUgZGVmaW5lZC4iKX0sZS5yZWFkQ29va2llPWZ1bmN0aW9uKCl7dmFyIHQ9JC5jb29raWUoZS5zZXR0aW5ncy5jb29raWVOYW1lKTtyZXR1cm4gdD09PW51bGx8fHQ9PT0iIj97fTpKU09OLnBhcnNlKHQpfSxlLnJlYWRTdGF0ZT1mdW5jdGlvbih0KXtpZighZS5zZXR0aW5ncy5rZWVwU3RhdGVJbkNvb2tpZSlyZXR1cm4hMTt2YXIgbj10LmF0dHIoIklkIik7aWYobj09PXVuZGVmaW5lZClyZXR1cm47dmFyIHI9ZS5yZWFkQ29va2llKCksaT1yW25dPT09ITB8fCExO3JldHVybiBpfSxlLnNhdmVTdGF0ZT1mdW5jdGlvbih0LG4pe2lmKCFlLnNldHRpbmdzLmtlZXBTdGF0ZUluQ29va2llKXJldHVybjt2YXIgcj10LmF0dHIoIklkIik7aWYocj09PXVuZGVmaW5lZClyZXR1cm47dmFyIGk9ZS5yZWFkQ29va2llKCk7aVtyXT1uLCQuY29va2llKGUuc2V0dGluZ3MuY29va2llTmFtZSxKU09OLnN0cmluZ2lmeShpKSx7cmF3OiEwLHBhdGg6d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSl9LGUudG9nZ2xlPWZ1bmN0aW9uKHQsbil7dmFyIHI9ZS50b2dnbGVDc3ModCk7cmV0dXJuIGUuc2V0dGluZ3MuaGlkZU1vZGU9PT0iZmFkZVRvZ2dsZSI/bi5mYWRlVG9nZ2xlKDE1MCk6ZS5zZXR0aW5ncy5oaWRlTW9kZT09PSJiYXNpYyI/bi50b2dnbGUoKTokLmlzRnVuY3Rpb24oZS5zZXR0aW5ncy5oaWRlTW9kZSkmJmUuc2V0dGluZ3MuaGlkZU1vZGUodCxuLHIpLGUuc2F2ZVN0YXRlKHQsciksITF9LGUudG9nZ2xlQ3NzPWZ1bmN0aW9uKGUpe3JldHVybiBlLmhhc0NsYXNzKCJleHBhbmRlZCIpPyhlLnRvZ2dsZUNsYXNzKCJjb2xsYXBzZWQgZXhwYW5kZWQiKSwhMSk6KGUudG9nZ2xlQ2xhc3MoImV4cGFuZGVkIGNvbGxhcHNlZCIpLCEwKX0sZS5maW5kVGFyZ2V0cz1mdW5jdGlvbih0LG4scil7dmFyIGk9W107aWYobj09PSJhYnNvbHV0ZSIpaT0kKHIpO2Vsc2UgaWYobj09PSJyZWxhdGl2ZSIpaT1lLmZpbmRMZXZlbE9uZURlZXAodCxyLHIpO2Vsc2UgaWYobj09PSJwYXJlbnQiKXt2YXIgcz10LnBhcmVudCgpO2RvIGk9ZS5maW5kTGV2ZWxPbmVEZWVwKHMscixyKSxpLmxlbmd0aD09PTAmJihzPXMucGFyZW50KCkpO3doaWxlKGkubGVuZ3RoPT09MCYmcy5sZW5ndGghPT0wKX1yZXR1cm4gaX0sZS5hY3RpdmF0ZT1mdW5jdGlvbih0LG4peyQuZXh0ZW5kKGUuc2V0dGluZ3MsbiksZS5jaGVja0tlZXBTdGF0ZUluQ29va2llUHJlY29uZGl0aW9ucygpLHQuZWFjaChmdW5jdGlvbigpe3ZhciB0PSQodGhpcyksbj10LmF0dHIoImRhdGEtZXhwYW5kZXItdGFyZ2V0Iil8fGUuc2V0dGluZ3MuZGVmYXVsdFRhcmdldCxyPXQuYXR0cigiZGF0YS1leHBhbmRlci10YXJnZXQtc2VhcmNoIil8fGUuc2V0dGluZ3MuZGVmYXVsdFNlYXJjaE1vZGUsaT1lLmZpbmRUYXJnZXRzKHQscixuKTtpZihpLmxlbmd0aD09PTApe2lmKGUuc2V0dGluZ3MudGhyb3dPbk1pc3NpbmdUYXJnZXQpdGhyb3cic2ltcGxlLWV4cGFuZDogVGFyZ2V0cyBub3QgZm91bmQiO3JldHVybiB0aGlzfWUuc2V0SW5pdGlhbFN0YXRlKHQsaSksdC5jbGljayhmdW5jdGlvbigpe3JldHVybiBlLnRvZ2dsZSh0LGkpfSl9KX19d2luZG93LlNpbXBsZUV4cGFuZD1lLCQuZm4uc2ltcGxlZXhwYW5kPWZ1bmN0aW9uKHQpe3ZhciBuPW5ldyBlO3JldHVybiBuLmFjdGl2YXRlKHRoaXMsdCksdGhpc319KShqUXVlcnkpOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.simple-expand.min.js,importbuddy/js/jquery.simple-expand.min.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js
LyoKICogalF1ZXJ5IFRvb2x0aXAgcGx1Z2luIDEuMwogKgogKiBodHRwOi8vYmFzc2lzdGFuY2UuZGUvanF1ZXJ5LXBsdWdpbnMvanF1ZXJ5LXBsdWdpbi10b29sdGlwLwogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1BsdWdpbnMvVG9vbHRpcAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDA4IErDtnJuIFphZWZmZXJlcgogKgogKiAkSWQ6IGpxdWVyeS50b29sdGlwLmpzIDU3NDEgMjAwOC0wNi0yMSAxNToyMjoxNlogam9lcm4uemFlZmZlcmVyICQKICogCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOgogKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sCiAqLzsoZnVuY3Rpb24oJCl7dmFyIGhlbHBlcj17fSxjdXJyZW50LHRpdGxlLHRJRCxJRT0kLmJyb3dzZXIubXNpZSYmL01TSUVccyg1XC41fDZcLikvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdHJhY2s9ZmFsc2U7JC50b29sdGlwPXtibG9ja2VkOmZhbHNlLGRlZmF1bHRzOntkZWxheToyMDAsZmFkZTpmYWxzZSxzaG93VVJMOnRydWUsZXh0cmFDbGFzczoiIix0b3A6MTUsbGVmdDoxNSxpZDoidG9vbHRpcCJ9LGJsb2NrOmZ1bmN0aW9uKCl7JC50b29sdGlwLmJsb2NrZWQ9ISQudG9vbHRpcC5ibG9ja2VkO319OyQuZm4uZXh0ZW5kKHt0b29sdGlwOmZ1bmN0aW9uKHNldHRpbmdzKXtzZXR0aW5ncz0kLmV4dGVuZCh7fSwkLnRvb2x0aXAuZGVmYXVsdHMsc2V0dGluZ3MpO2NyZWF0ZUhlbHBlcihzZXR0aW5ncyk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQuZGF0YSh0aGlzLCJ0b29sdGlwIixzZXR0aW5ncyk7dGhpcy50T3BhY2l0eT1oZWxwZXIucGFyZW50LmNzcygib3BhY2l0eSIpO3RoaXMudG9vbHRpcFRleHQ9dGhpcy50aXRsZTskKHRoaXMpLnJlbW92ZUF0dHIoInRpdGxlIik7dGhpcy5hbHQ9IiI7fSkubW91c2VvdmVyKHNhdmUpLm1vdXNlb3V0KGhpZGUpLmNsaWNrKGhpZGUpO30sZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpbWFnZT0kKHRoaXMpLmNzcygnYmFja2dyb3VuZEltYWdlJyk7aWYoaW1hZ2UubWF0Y2goL151cmxcKFsiJ10/KC4qXC5wbmcpWyInXT9cKSQvaSkpe2ltYWdlPVJlZ0V4cC4kMTskKHRoaXMpLmNzcyh7J2JhY2tncm91bmRJbWFnZSc6J25vbmUnLCdmaWx0ZXInOiJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihlbmFibGVkPXRydWUsIHNpemluZ01ldGhvZD1jcm9wLCBzcmM9JyIraW1hZ2UrIicpIn0pLmVhY2goZnVuY3Rpb24oKXt2YXIgcG9zaXRpb249JCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJyk7aWYocG9zaXRpb24hPSdhYnNvbHV0ZScmJnBvc2l0aW9uIT0ncmVsYXRpdmUnKSQodGhpcykuY3NzKCdwb3NpdGlvbicsJ3JlbGF0aXZlJyk7fSk7fX0pO306ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9LHVuZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcykuY3NzKHsnZmlsdGVyJzonJyxiYWNrZ3JvdW5kSW1hZ2U6Jyd9KTt9KTt9OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSxoaWRlV2hlbkVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcylbJCh0aGlzKS5odG1sKCk/InNob3ciOiJoaWRlIl0oKTt9KTt9LHVybDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoJ2hyZWYnKXx8dGhpcy5hdHRyKCdzcmMnKTt9fSk7ZnVuY3Rpb24gY3JlYXRlSGVscGVyKHNldHRpbmdzKXtpZihoZWxwZXIucGFyZW50KXJldHVybjtoZWxwZXIucGFyZW50PSQoJzxkaXYgaWQ9Iicrc2V0dGluZ3MuaWQrJyI+PGgzPjwvaDM+PGRpdiBjbGFzcz0iYm9keSI+PC9kaXY+PGRpdiBjbGFzcz0idXJsIj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS5oaWRlKCk7aWYoJC5mbi5iZ2lmcmFtZSloZWxwZXIucGFyZW50LmJnaWZyYW1lKCk7aGVscGVyLnRpdGxlPSQoJ2gzJyxoZWxwZXIucGFyZW50KTtoZWxwZXIuYm9keT0kKCdkaXYuYm9keScsaGVscGVyLnBhcmVudCk7aGVscGVyLnVybD0kKCdkaXYudXJsJyxoZWxwZXIucGFyZW50KTt9ZnVuY3Rpb24gc2V0dGluZ3MoZWxlbWVudCl7cmV0dXJuICQuZGF0YShlbGVtZW50LCJ0b29sdGlwIik7fWZ1bmN0aW9uIGhhbmRsZShldmVudCl7aWYoc2V0dGluZ3ModGhpcykuZGVsYXkpdElEPXNldFRpbWVvdXQoc2hvdyxzZXR0aW5ncyh0aGlzKS5kZWxheSk7ZWxzZQpzaG93KCk7dHJhY2s9ISFzZXR0aW5ncyh0aGlzKS50cmFjazskKGRvY3VtZW50LmJvZHkpLmJpbmQoJ21vdXNlbW92ZScsdXBkYXRlKTt1cGRhdGUoZXZlbnQpO31mdW5jdGlvbiBzYXZlKCl7aWYoJC50b29sdGlwLmJsb2NrZWR8fHRoaXM9PWN1cnJlbnR8fCghdGhpcy50b29sdGlwVGV4dCYmIXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyKSlyZXR1cm47Y3VycmVudD10aGlzO3RpdGxlPXRoaXMudG9vbHRpcFRleHQ7aWYoc2V0dGluZ3ModGhpcykuYm9keUhhbmRsZXIpe2hlbHBlci50aXRsZS5oaWRlKCk7dmFyIGJvZHlDb250ZW50PXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyLmNhbGwodGhpcyk7aWYoYm9keUNvbnRlbnQubm9kZVR5cGV8fGJvZHlDb250ZW50LmpxdWVyeSl7aGVscGVyLmJvZHkuZW1wdHkoKS5hcHBlbmQoYm9keUNvbnRlbnQpfWVsc2V7aGVscGVyLmJvZHkuaHRtbChib2R5Q29udGVudCk7fWhlbHBlci5ib2R5LnNob3coKTt9ZWxzZSBpZihzZXR0aW5ncyh0aGlzKS5zaG93Qm9keSl7dmFyIHBhcnRzPXRpdGxlLnNwbGl0KHNldHRpbmdzKHRoaXMpLnNob3dCb2R5KTtoZWxwZXIudGl0bGUuaHRtbChwYXJ0cy5zaGlmdCgpKS5zaG93KCk7aGVscGVyLmJvZHkuZW1wdHkoKTtmb3IodmFyIGk9MCxwYXJ0OyhwYXJ0PXBhcnRzW2ldKTtpKyspe2lmKGk+MCloZWxwZXIuYm9keS5hcHBlbmQoIjxici8+Iik7aGVscGVyLmJvZHkuYXBwZW5kKHBhcnQpO31oZWxwZXIuYm9keS5oaWRlV2hlbkVtcHR5KCk7fWVsc2V7aGVscGVyLnRpdGxlLmh0bWwodGl0bGUpLnNob3coKTtoZWxwZXIuYm9keS5oaWRlKCk7fWlmKHNldHRpbmdzKHRoaXMpLnNob3dVUkwmJiQodGhpcykudXJsKCkpaGVscGVyLnVybC5odG1sKCQodGhpcykudXJsKCkucmVwbGFjZSgnaHR0cDovLycsJycpKS5zaG93KCk7ZWxzZQpoZWxwZXIudXJsLmhpZGUoKTtoZWxwZXIucGFyZW50LmFkZENsYXNzKHNldHRpbmdzKHRoaXMpLmV4dHJhQ2xhc3MpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LmZpeFBORygpO2hhbmRsZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIHNob3coKXt0SUQ9bnVsbDtpZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnNldHRpbmdzKGN1cnJlbnQpLmZhZGUpe2lmKGhlbHBlci5wYXJlbnQuaXMoIjphbmltYXRlZCIpKWhlbHBlci5wYXJlbnQuc3RvcCgpLnNob3coKS5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTtlbHNlCmhlbHBlci5wYXJlbnQuaXMoJzp2aXNpYmxlJyk/aGVscGVyLnBhcmVudC5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTpoZWxwZXIucGFyZW50LmZhZGVJbihzZXR0aW5ncyhjdXJyZW50KS5mYWRlKTt9ZWxzZXtoZWxwZXIucGFyZW50LnNob3coKTt9dXBkYXRlKCk7fWZ1bmN0aW9uIHVwZGF0ZShldmVudCl7aWYoJC50b29sdGlwLmJsb2NrZWQpcmV0dXJuO2lmKGV2ZW50JiZldmVudC50YXJnZXQudGFnTmFtZT09Ik9QVElPTiIpe3JldHVybjt9aWYoIXRyYWNrJiZoZWxwZXIucGFyZW50LmlzKCI6dmlzaWJsZSIpKXskKGRvY3VtZW50LmJvZHkpLnVuYmluZCgnbW91c2Vtb3ZlJyx1cGRhdGUpfWlmKGN1cnJlbnQ9PW51bGwpeyQoZG9jdW1lbnQuYm9keSkudW5iaW5kKCdtb3VzZW1vdmUnLHVwZGF0ZSk7cmV0dXJuO31oZWxwZXIucGFyZW50LnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1yaWdodCIpLnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt2YXIgbGVmdD1oZWxwZXIucGFyZW50WzBdLm9mZnNldExlZnQ7dmFyIHRvcD1oZWxwZXIucGFyZW50WzBdLm9mZnNldFRvcDtpZihldmVudCl7bGVmdD1ldmVudC5wYWdlWCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O3RvcD1ldmVudC5wYWdlWStzZXR0aW5ncyhjdXJyZW50KS50b3A7dmFyIHJpZ2h0PSdhdXRvJztpZihzZXR0aW5ncyhjdXJyZW50KS5wb3NpdGlvbkxlZnQpe3JpZ2h0PSQod2luZG93KS53aWR0aCgpLWxlZnQ7bGVmdD0nYXV0byc7fWhlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQscmlnaHQ6cmlnaHQsdG9wOnRvcH0pO312YXIgdj12aWV3cG9ydCgpLGg9aGVscGVyLnBhcmVudFswXTtpZih2Lngrdi5jeDxoLm9mZnNldExlZnQraC5vZmZzZXRXaWR0aCl7bGVmdC09aC5vZmZzZXRXaWR0aCsyMCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O2hlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQrJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1yaWdodCIpO31pZih2Lnkrdi5jeTxoLm9mZnNldFRvcCtoLm9mZnNldEhlaWdodCl7dG9wLT1oLm9mZnNldEhlaWdodCsyMCtzZXR0aW5ncyhjdXJyZW50KS50b3A7aGVscGVyLnBhcmVudC5jc3Moe3RvcDp0b3ArJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt9fWZ1bmN0aW9uIHZpZXdwb3J0KCl7cmV0dXJue3g6JCh3aW5kb3cpLnNjcm9sbExlZnQoKSx5OiQod2luZG93KS5zY3JvbGxUb3AoKSxjeDokKHdpbmRvdykud2lkdGgoKSxjeTokKHdpbmRvdykuaGVpZ2h0KCl9O31mdW5jdGlvbiBoaWRlKGV2ZW50KXtpZigkLnRvb2x0aXAuYmxvY2tlZClyZXR1cm47aWYodElEKWNsZWFyVGltZW91dCh0SUQpO2N1cnJlbnQ9bnVsbDt2YXIgdHNldHRpbmdzPXNldHRpbmdzKHRoaXMpO2Z1bmN0aW9uIGNvbXBsZXRlKCl7aGVscGVyLnBhcmVudC5yZW1vdmVDbGFzcyh0c2V0dGluZ3MuZXh0cmFDbGFzcykuaGlkZSgpLmNzcygib3BhY2l0eSIsIiIpO31pZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnRzZXR0aW5ncy5mYWRlKXtpZihoZWxwZXIucGFyZW50LmlzKCc6YW5pbWF0ZWQnKSloZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlVG8odHNldHRpbmdzLmZhZGUsMCxjb21wbGV0ZSk7ZWxzZQpoZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlT3V0KHRzZXR0aW5ncy5mYWRlLGNvbXBsZXRlKTt9ZWxzZQpjb21wbGV0ZSgpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LnVuZml4UE5HKCk7fX0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
LyohCiAqIGpRdWVyeSBVSSAxLjguMTIKICoKICogQ29weXJpZ2h0IDIwMTEsIEFVVEhPUlMudHh0IChodHRwOi8vanF1ZXJ5dWkuY29tL2Fib3V0KQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1VJCiAqLwooZnVuY3Rpb24oYyxqKXtmdW5jdGlvbiBrKGEpe3JldHVybiFjKGEpLnBhcmVudHMoKS5hbmRTZWxmKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIGMuY3VyQ1NTKHRoaXMsInZpc2liaWxpdHkiKT09PSJoaWRkZW4ifHxjLmV4cHIuZmlsdGVycy5oaWRkZW4odGhpcyl9KS5sZW5ndGh9Yy51aT1jLnVpfHx7fTtpZighYy51aS52ZXJzaW9uKXtjLmV4dGVuZChjLnVpLHt2ZXJzaW9uOiIxLjguMTIiLGtleUNvZGU6e0FMVDoxOCxCQUNLU1BBQ0U6OCxDQVBTX0xPQ0s6MjAsQ09NTUE6MTg4LENPTU1BTkQ6OTEsQ09NTUFORF9MRUZUOjkxLENPTU1BTkRfUklHSFQ6OTMsQ09OVFJPTDoxNyxERUxFVEU6NDYsRE9XTjo0MCxFTkQ6MzUsRU5URVI6MTMsRVNDQVBFOjI3LEhPTUU6MzYsSU5TRVJUOjQ1LExFRlQ6MzcsTUVOVTo5MyxOVU1QQURfQUREOjEwNyxOVU1QQURfREVDSU1BTDoxMTAsTlVNUEFEX0RJVklERToxMTEsTlVNUEFEX0VOVEVSOjEwOCxOVU1QQURfTVVMVElQTFk6MTA2LApOVU1QQURfU1VCVFJBQ1Q6MTA5LFBBR0VfRE9XTjozNCxQQUdFX1VQOjMzLFBFUklPRDoxOTAsUklHSFQ6MzksU0hJRlQ6MTYsU1BBQ0U6MzIsVEFCOjksVVA6MzgsV0lORE9XUzo5MX19KTtjLmZuLmV4dGVuZCh7X2ZvY3VzOmMuZm4uZm9jdXMsZm9jdXM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdHlwZW9mIGE9PT0ibnVtYmVyIj90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjKGQpLmZvY3VzKCk7YiYmYi5jYWxsKGQpfSxhKX0pOnRoaXMuX2ZvY3VzLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sc2Nyb2xsUGFyZW50OmZ1bmN0aW9uKCl7dmFyIGE7YT1jLmJyb3dzZXIubXNpZSYmLyhzdGF0aWN8cmVsYXRpdmUpLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKXx8L2Fic29sdXRlLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKT90aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4vKHJlbGF0aXZlfGFic29sdXRlfGZpeGVkKS8udGVzdChjLmN1ckNTUyh0aGlzLAoicG9zaXRpb24iLDEpKSYmLyhhdXRvfHNjcm9sbCkvLnRlc3QoYy5jdXJDU1ModGhpcywib3ZlcmZsb3ciLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXkiLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXgiLDEpKX0pLmVxKDApOnRoaXMucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybi8oYXV0b3xzY3JvbGwpLy50ZXN0KGMuY3VyQ1NTKHRoaXMsIm92ZXJmbG93IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy15IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy14IiwxKSl9KS5lcSgwKTtyZXR1cm4vZml4ZWQvLnRlc3QodGhpcy5jc3MoInBvc2l0aW9uIikpfHwhYS5sZW5ndGg/Yyhkb2N1bWVudCk6YX0sekluZGV4OmZ1bmN0aW9uKGEpe2lmKGEhPT1qKXJldHVybiB0aGlzLmNzcygiekluZGV4IixhKTtpZih0aGlzLmxlbmd0aCl7YT1jKHRoaXNbMF0pO2Zvcih2YXIgYjthLmxlbmd0aCYmYVswXSE9PWRvY3VtZW50Oyl7Yj1hLmNzcygicG9zaXRpb24iKTsKaWYoYj09PSJhYnNvbHV0ZSJ8fGI9PT0icmVsYXRpdmUifHxiPT09ImZpeGVkIil7Yj1wYXJzZUludChhLmNzcygiekluZGV4IiksMTApO2lmKCFpc05hTihiKSYmYiE9PTApcmV0dXJuIGJ9YT1hLnBhcmVudCgpfX1yZXR1cm4gMH0sZGlzYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJpbmQoKGMuc3VwcG9ydC5zZWxlY3RzdGFydD8ic2VsZWN0c3RhcnQiOiJtb3VzZWRvd24iKSsiLnVpLWRpc2FibGVTZWxlY3Rpb24iLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKX0pfSxlbmFibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bmJpbmQoIi51aS1kaXNhYmxlU2VsZWN0aW9uIil9fSk7Yy5lYWNoKFsiV2lkdGgiLCJIZWlnaHQiXSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGQoZixnLGwsbSl7Yy5lYWNoKGUsZnVuY3Rpb24oKXtnLT1wYXJzZUZsb2F0KGMuY3VyQ1NTKGYsInBhZGRpbmciK3RoaXMsdHJ1ZSkpfHwwO2lmKGwpZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLAoiYm9yZGVyIit0aGlzKyJXaWR0aCIsdHJ1ZSkpfHwwO2lmKG0pZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLCJtYXJnaW4iK3RoaXMsdHJ1ZSkpfHwwfSk7cmV0dXJuIGd9dmFyIGU9Yj09PSJXaWR0aCI/WyJMZWZ0IiwiUmlnaHQiXTpbIlRvcCIsIkJvdHRvbSJdLGg9Yi50b0xvd2VyQ2FzZSgpLGk9e2lubmVyV2lkdGg6Yy5mbi5pbm5lcldpZHRoLGlubmVySGVpZ2h0OmMuZm4uaW5uZXJIZWlnaHQsb3V0ZXJXaWR0aDpjLmZuLm91dGVyV2lkdGgsb3V0ZXJIZWlnaHQ6Yy5mbi5vdXRlckhlaWdodH07Yy5mblsiaW5uZXIiK2JdPWZ1bmN0aW9uKGYpe2lmKGY9PT1qKXJldHVybiBpWyJpbm5lciIrYl0uY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCxkKHRoaXMsZikrInB4Iil9KX07Yy5mblsib3V0ZXIiK2JdPWZ1bmN0aW9uKGYsZyl7aWYodHlwZW9mIGYhPT0ibnVtYmVyIilyZXR1cm4gaVsib3V0ZXIiK2JdLmNhbGwodGhpcyxmKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCwKZCh0aGlzLGYsdHJ1ZSxnKSsicHgiKX0pfX0pO2MuZXh0ZW5kKGMuZXhwclsiOiJdLHtkYXRhOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4hIWMuZGF0YShhLGRbM10pfSxmb2N1c2FibGU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLGQ9Yy5hdHRyKGEsInRhYmluZGV4Iik7aWYoImFyZWEiPT09Yil7Yj1hLnBhcmVudE5vZGU7ZD1iLm5hbWU7aWYoIWEuaHJlZnx8IWR8fGIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSE9PSJtYXAiKXJldHVybiBmYWxzZTthPWMoImltZ1t1c2VtYXA9IyIrZCsiXSIpWzBdO3JldHVybiEhYSYmayhhKX1yZXR1cm4oL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KGIpPyFhLmRpc2FibGVkOiJhIj09Yj9hLmhyZWZ8fCFpc05hTihkKTohaXNOYU4oZCkpJiZrKGEpfSx0YWJiYWJsZTpmdW5jdGlvbihhKXt2YXIgYj1jLmF0dHIoYSwidGFiaW5kZXgiKTtyZXR1cm4oaXNOYU4oYil8fGI+PTApJiZjKGEpLmlzKCI6Zm9jdXNhYmxlIil9fSk7CmMoZnVuY3Rpb24oKXt2YXIgYT1kb2N1bWVudC5ib2R5LGI9YS5hcHBlbmRDaGlsZChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTtjLmV4dGVuZChiLnN0eWxlLHttaW5IZWlnaHQ6IjEwMHB4IixoZWlnaHQ6ImF1dG8iLHBhZGRpbmc6MCxib3JkZXJXaWR0aDowfSk7Yy5zdXBwb3J0Lm1pbkhlaWdodD1iLm9mZnNldEhlaWdodD09PTEwMDtjLnN1cHBvcnQuc2VsZWN0c3RhcnQ9Im9uc2VsZWN0c3RhcnQiaW4gYjthLnJlbW92ZUNoaWxkKGIpLnN0eWxlLmRpc3BsYXk9Im5vbmUifSk7Yy5leHRlbmQoYy51aSx7cGx1Z2luOnthZGQ6ZnVuY3Rpb24oYSxiLGQpe2E9Yy51aVthXS5wcm90b3R5cGU7Zm9yKHZhciBlIGluIGQpe2EucGx1Z2luc1tlXT1hLnBsdWdpbnNbZV18fFtdO2EucGx1Z2luc1tlXS5wdXNoKFtiLGRbZV1dKX19LGNhbGw6ZnVuY3Rpb24oYSxiLGQpe2lmKChiPWEucGx1Z2luc1tiXSkmJmEuZWxlbWVudFswXS5wYXJlbnROb2RlKWZvcih2YXIgZT0wO2U8Yi5sZW5ndGg7ZSsrKWEub3B0aW9uc1tiW2VdWzBdXSYmCmJbZV1bMV0uYXBwbHkoYS5lbGVtZW50LGQpfX0sY29udGFpbnM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZG9jdW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNjphIT09YiYmYS5jb250YWlucyhiKX0saGFzU2Nyb2xsOmZ1bmN0aW9uKGEsYil7aWYoYyhhKS5jc3MoIm92ZXJmbG93Iik9PT0iaGlkZGVuIilyZXR1cm4gZmFsc2U7Yj1iJiZiPT09ImxlZnQiPyJzY3JvbGxMZWZ0Ijoic2Nyb2xsVG9wIjt2YXIgZD1mYWxzZTtpZihhW2JdPjApcmV0dXJuIHRydWU7YVtiXT0xO2Q9YVtiXT4wO2FbYl09MDtyZXR1cm4gZH0saXNPdmVyQXhpczpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGE+YiYmYTxiK2R9LGlzT3ZlcjpmdW5jdGlvbihhLGIsZCxlLGgsaSl7cmV0dXJuIGMudWkuaXNPdmVyQXhpcyhhLGQsaCkmJmMudWkuaXNPdmVyQXhpcyhiLGUsaSl9fSl9fSkoalF1ZXJ5KTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ui.tabs.js,importbuddy/js/ui.tabs.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ui.tabs.js,importbuddy/js/ui.tabs.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ui.widget.js,importbuddy/js/ui.widget.js
LyohCiAqIGpRdWVyeSBVSSBXaWRnZXQgMS44LjEyCiAqCiAqIENvcHlyaWdodCAyMDExLCBBVVRIT1JTLnR4dCAoaHR0cDovL2pxdWVyeXVpLmNvbS9hYm91dCkKICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuCiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2UKICoKICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VSS9XaWRnZXQKICovCihmdW5jdGlvbihiLGope2lmKGIuY2xlYW5EYXRhKXt2YXIgaz1iLmNsZWFuRGF0YTtiLmNsZWFuRGF0YT1mdW5jdGlvbihhKXtmb3IodmFyIGM9MCxkOyhkPWFbY10pIT1udWxsO2MrKyliKGQpLnRyaWdnZXJIYW5kbGVyKCJyZW1vdmUiKTtrKGEpfX1lbHNle3ZhciBsPWIuZm4ucmVtb3ZlO2IuZm4ucmVtb3ZlPWZ1bmN0aW9uKGEsYyl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2lmKCFjKWlmKCFhfHxiLmZpbHRlcihhLFt0aGlzXSkubGVuZ3RoKWIoIioiLHRoaXMpLmFkZChbdGhpc10pLmVhY2goZnVuY3Rpb24oKXtiKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCJyZW1vdmUiKX0pO3JldHVybiBsLmNhbGwoYih0aGlzKSxhLGMpfSl9fWIud2lkZ2V0PWZ1bmN0aW9uKGEsYyxkKXt2YXIgZT1hLnNwbGl0KCIuIilbMF0sZjthPWEuc3BsaXQoIi4iKVsxXTtmPWUrIi0iK2E7aWYoIWQpe2Q9YztjPWIuV2lkZ2V0fWIuZXhwclsiOiJdW2ZdPWZ1bmN0aW9uKGgpe3JldHVybiEhYi5kYXRhKGgsCmEpfTtiW2VdPWJbZV18fHt9O2JbZV1bYV09ZnVuY3Rpb24oaCxnKXthcmd1bWVudHMubGVuZ3RoJiZ0aGlzLl9jcmVhdGVXaWRnZXQoaCxnKX07Yz1uZXcgYztjLm9wdGlvbnM9Yi5leHRlbmQodHJ1ZSx7fSxjLm9wdGlvbnMpO2JbZV1bYV0ucHJvdG90eXBlPWIuZXh0ZW5kKHRydWUsYyx7bmFtZXNwYWNlOmUsd2lkZ2V0TmFtZTphLHdpZGdldEV2ZW50UHJlZml4OmJbZV1bYV0ucHJvdG90eXBlLndpZGdldEV2ZW50UHJlZml4fHxhLHdpZGdldEJhc2VDbGFzczpmfSxkKTtiLndpZGdldC5icmlkZ2UoYSxiW2VdW2FdKX07Yi53aWRnZXQuYnJpZGdlPWZ1bmN0aW9uKGEsYyl7Yi5mblthXT1mdW5jdGlvbihkKXt2YXIgZT10eXBlb2YgZD09PSJzdHJpbmciLGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLGg9dGhpcztkPSFlJiZmLmxlbmd0aD9iLmV4dGVuZC5hcHBseShudWxsLFt0cnVlLGRdLmNvbmNhdChmKSk6ZDtpZihlJiZkLmNoYXJBdCgwKT09PSJfIilyZXR1cm4gaDsKZT90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZz1iLmRhdGEodGhpcyxhKSxpPWcmJmIuaXNGdW5jdGlvbihnW2RdKT9nW2RdLmFwcGx5KGcsZik6ZztpZihpIT09ZyYmaSE9PWope2g9aTtyZXR1cm4gZmFsc2V9fSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGc9Yi5kYXRhKHRoaXMsYSk7Zz9nLm9wdGlvbihkfHx7fSkuX2luaXQoKTpiLmRhdGEodGhpcyxhLG5ldyBjKGQsdGhpcykpfSk7cmV0dXJuIGh9fTtiLldpZGdldD1mdW5jdGlvbihhLGMpe2FyZ3VtZW50cy5sZW5ndGgmJnRoaXMuX2NyZWF0ZVdpZGdldChhLGMpfTtiLldpZGdldC5wcm90b3R5cGU9e3dpZGdldE5hbWU6IndpZGdldCIsd2lkZ2V0RXZlbnRQcmVmaXg6IiIsb3B0aW9uczp7ZGlzYWJsZWQ6ZmFsc2V9LF9jcmVhdGVXaWRnZXQ6ZnVuY3Rpb24oYSxjKXtiLmRhdGEoYyx0aGlzLndpZGdldE5hbWUsdGhpcyk7dGhpcy5lbGVtZW50PWIoYyk7dGhpcy5vcHRpb25zPWIuZXh0ZW5kKHRydWUse30sdGhpcy5vcHRpb25zLAp0aGlzLl9nZXRDcmVhdGVPcHRpb25zKCksYSk7dmFyIGQ9dGhpczt0aGlzLmVsZW1lbnQuYmluZCgicmVtb3ZlLiIrdGhpcy53aWRnZXROYW1lLGZ1bmN0aW9uKCl7ZC5kZXN0cm95KCl9KTt0aGlzLl9jcmVhdGUoKTt0aGlzLl90cmlnZ2VyKCJjcmVhdGUiKTt0aGlzLl9pbml0KCl9LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7cmV0dXJuIGIubWV0YWRhdGEmJmIubWV0YWRhdGEuZ2V0KHRoaXMuZWxlbWVudFswXSlbdGhpcy53aWRnZXROYW1lXX0sX2NyZWF0ZTpmdW5jdGlvbigpe30sX2luaXQ6ZnVuY3Rpb24oKXt9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQudW5iaW5kKCIuIit0aGlzLndpZGdldE5hbWUpLnJlbW92ZURhdGEodGhpcy53aWRnZXROYW1lKTt0aGlzLndpZGdldCgpLnVuYmluZCgiLiIrdGhpcy53aWRnZXROYW1lKS5yZW1vdmVBdHRyKCJhcmlhLWRpc2FibGVkIikucmVtb3ZlQ2xhc3ModGhpcy53aWRnZXRCYXNlQ2xhc3MrIi1kaXNhYmxlZCB1aS1zdGF0ZS1kaXNhYmxlZCIpfSwKd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudH0sb3B0aW9uOmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YTtpZihhcmd1bWVudHMubGVuZ3RoPT09MClyZXR1cm4gYi5leHRlbmQoe30sdGhpcy5vcHRpb25zKTtpZih0eXBlb2YgYT09PSJzdHJpbmciKXtpZihjPT09ailyZXR1cm4gdGhpcy5vcHRpb25zW2FdO2Q9e307ZFthXT1jfXRoaXMuX3NldE9wdGlvbnMoZCk7cmV0dXJuIHRoaXN9LF9zZXRPcHRpb25zOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7Yi5lYWNoKGEsZnVuY3Rpb24oZCxlKXtjLl9zZXRPcHRpb24oZCxlKX0pO3JldHVybiB0aGlzfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKGEsYyl7dGhpcy5vcHRpb25zW2FdPWM7aWYoYT09PSJkaXNhYmxlZCIpdGhpcy53aWRnZXQoKVtjPyJhZGRDbGFzcyI6InJlbW92ZUNsYXNzIl0odGhpcy53aWRnZXRCYXNlQ2xhc3MrIi1kaXNhYmxlZCB1aS1zdGF0ZS1kaXNhYmxlZCIpLmF0dHIoImFyaWEtZGlzYWJsZWQiLGMpO3JldHVybiB0aGlzfSwKZW5hYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NldE9wdGlvbigiZGlzYWJsZWQiLGZhbHNlKX0sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXRPcHRpb24oImRpc2FibGVkIix0cnVlKX0sX3RyaWdnZXI6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPXRoaXMub3B0aW9uc1thXTtjPWIuRXZlbnQoYyk7Yy50eXBlPShhPT09dGhpcy53aWRnZXRFdmVudFByZWZpeD9hOnRoaXMud2lkZ2V0RXZlbnRQcmVmaXgrYSkudG9Mb3dlckNhc2UoKTtkPWR8fHt9O2lmKGMub3JpZ2luYWxFdmVudCl7YT1iLmV2ZW50LnByb3BzLmxlbmd0aDtmb3IodmFyIGY7YTspe2Y9Yi5ldmVudC5wcm9wc1stLWFdO2NbZl09Yy5vcmlnaW5hbEV2ZW50W2ZdfX10aGlzLmVsZW1lbnQudHJpZ2dlcihjLGQpO3JldHVybiEoYi5pc0Z1bmN0aW9uKGUpJiZlLmNhbGwodGhpcy5lbGVtZW50WzBdLGMsZCk9PT1mYWxzZXx8Yy5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl9fX0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ui.widget.js,importbuddy/js/ui.widget.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php
PD9waHAKaWYgKCAhIGlzX2FkbWluKCkgKSB7IC8vIE5vdCBpbiBXb3JkUHJlc3MgKG9yIG5vdCBsb2dnZWQgaW4pLiBDaGVjayBpZiBpbiBJbXBvcnRCdWRkeS4KCWlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgeyAvLyBOb3QgaW4gSW1wb3J0QnVkZHkuCgkJZGllKCAnPGh0bWw+PC9odG1sPicgKTsKCX0KCS8vIEluIEltcG9ydEJ1ZGR5IHNvIGNoZWNrIGF1dGhlbnRpY2F0aW9uLgoJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4KfQoKcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdhZG1pbi5jc3MnLCB0cnVlICk7Cmdsb2JhbCAkd3BkYjsKCgplY2hvICc8YSBuYW1lPSJkYXRhYmFzZV9yZXBsYWNlIj48L2E+JzsKZWNobyAnVGhpcyB0b29sIGFsbG93cyB5b3UgdG8gYXV0b21hdGljYWxseSByZXBsYWNlIHRleHQgY29udGFpbmVkIHRocm91Z2hvdXQgeW91ciBXb3JkUHJlc3MgZGF0YWJhc2UuPGJyPic7CmVjaG8gJzxicj48Yj5Ob3RlOjwvYj4gSW1wb3J0QnVkZHkgYXV0b21hdGljYWxseSBoYW5kbGVzIG1pZ3JhdGluZyAmIHJlcGxhY2luZyB5b3VyIHNpdGUgVVJMcyBhbmQgZmlsZSBwYXRocyBkdXJpbmcgcmVzdG9yZS9taWdyYXRpb247IHRoaXMgdG9vbCBpcyBub3QgbmVlZGVkIGZvciBub3JtYWwgYmFja3VwIC8gcmVzdG9yZSBvcGVyYXRpb25zLic7CmVjaG8gJzxwPjxiPlRpcDo8L2I+IFdoZW4gcmVwbGFjaW5nIGEgc2l0ZSBhZGRyZXNzIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lIFVSTCBzbyBtdWx0aXBsZSBwYXNzZXMgYXQgcmVwbGFjZW1lbnRzIG1heSBuZWVkIHRvIGJlIG1hZGUuIEllLiBodHRwOi8vc2l0ZS5jb20sIGh0dHA6Ly88Yj53d3cuPC9iPnNpdGUuY29tLCBodHRwPGI+czwvYj46Ly9zaXRlLmNvbSwgZXRjLjwvcD4nOwplY2hvICc8cD48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9idWxsZXRfZXJyb3IucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246IC0zcHg7Ij4gQ2F1dGlvbjogVGhpcyBpcyBhbiBhZHZhbmNlZCBmZWF0dXJlLiBVc2Ugd2l0aCBjYXJlOyBpbXByb3BlciB1c2UgbWF5IHJlc3VsdCBpbiBkYXRhIGxvc3MuPC9wPic7CmVjaG8gJzxicj4nOwoKCmlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkYXRhYmFzZV9yZXBsYWNlJyApID09ICcxJyApIHsKCQoJZ2xvYmFsICRwYl9iYWNrdXBidWRkeV9qc19zdGF0dXM7CgkkcGJfYmFja3VwYnVkZHlfanNfc3RhdHVzID0gdHJ1ZTsKCQoJPz4KCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCQkJZnVuY3Rpb24gcGJfc3RhdHVzX2FwcGVuZCggc3RhdHVzX3N0cmluZyApIHsKCQkJCXRhcmdldF9pZCA9ICdwYl9iYWNrdXBidWRkeV9zdGF0dXMnOyAvLyBpbXBvcnRidWRkeV9zdGF0dXMgb3IgcGJfYmFja3VwYnVkZHlfc3RhdHVzCgkJCQlpZiggalF1ZXJ5KCAnIycgKyB0YXJnZXRfaWQgKS5sZW5ndGggPT0gMCApIHsgLy8gTm8gc3RhdHVzIGJveCB5ZXQgc28gc3VwcHJlc3MuCgkJCQkJcmV0dXJuOwoJCQkJfQoJCQkJalF1ZXJ5KCAnIycgKyB0YXJnZXRfaWQgKS5hcHBlbmQoICJcbiIgKyBzdGF0dXNfc3RyaW5nICk7CgkJCQl0ZXh0YXJlYWVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggdGFyZ2V0X2lkICk7CgkJCQl0ZXh0YXJlYWVsZW0uc2Nyb2xsVG9wID0gdGV4dGFyZWFlbGVtLnNjcm9sbEhlaWdodDsKCQkJfQoJCTwvc2NyaXB0PgoJPD9waHAKCQoJZWNobyAnPGRpdiBzdHlsZT0id2lkdGg6IDk4JTsiPic7CgllY2hvIHBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXNfYm94KCAnTWFzcyByZXBsYWNpbmcgaW4gZGF0YWJhc2UgcG93ZXJlZCBieSBCYWNrdXBCdWRkeSB2JyAuIFBCX0JCX1ZFUlNJT04gLiAnLi4uJyApOwoJZWNobyAnPC9kaXY+JzsKCWVjaG8gJzxkaXYgaWQ9InBiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciPjxpbWcgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL2xvYWRpbmdfbGFyZ2UuZ2lmIiB0aXRsZT0iV29ya2luZy4uLiBQbGVhc2Ugd2FpdCBhcyB0aGlzIG1heSB0YWtlIGEgbW9tZW50Li4uIj48L2Rpdj4nOwoJcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgkvL2VjaG8gJzxkaXYgaWQ9InBiX2JhY2t1cGJ1ZGR5X3JlcGxhY2Vfd29ya2luZyI+PGltZyBzcmM9IicgLiBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpIC4gJy9pbWFnZXMvbG9hZGluZ19sYXJnZS5naWYiIHRpdGxlPSJXb3JraW5nLi4uIFBsZWFzZSB3YWl0IGFzIHRoaXMgbWF5IHRha2UgYSBtb21lbnQuLi4iPjwvZGl2Pic7CgkKCS8vIEluc3RhbnRpYXRlIGRhdGFiYXNlIHJlcGxhY2VtZW50IGNsYXNzLgoJcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL2RicmVwbGFjZS9kYnJlcGxhY2UucGhwJyApOwoJJGRicmVwbGFjZSA9IG5ldyBwbHVnaW5idWRkeV9kYnJlcGxhY2UoKTsKCQoJLy8gU2V0IHVwIHZhcmlhYmxlcyBieSBnZXR0aW5nIFBPU1QgZGF0YS4KCSRuZWVkbGUgPSBteXNxbF9yZWFsX2VzY2FwZV9zdHJpbmcoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ25lZWRsZScgKSApOwoJaWYgKCAkbmVlZGxlID09ICcnICkgewoJCWVjaG8gJzxiPkVycm9yICM0NDU2NTgyLiBNaXNzaW5nIG5lZWRsZS4gWW91IG11c3QgZW50ZXIgdGV4dCB0byBzZWFyY2ggZm9yLic7CgkJZWNobyAnPGJyPjxhIGhyZWY9IicgLiBwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSAuICcmcGFyZW50X2NvbmZpZz0nIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhcmVudF9jb25maWcnICkgKSAuICciIGNsYXNzPSJidXR0b24gc2Vjb25kYXJ5LWJ1dHRvbiI+JmxhcnI7ICcgLiAgX18oICdiYWNrJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9hPic7CgkJcmV0dXJuOwoJfQoJJHJlcGxhY2VtZW50ID0gbXlzcWxfcmVhbF9lc2NhcGVfc3RyaW5nKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXBsYWNlbWVudCcgKSApOwoJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnUmVwbGFjaW5nIGAnIC4gJG5lZWRsZSAuICdgIHdpdGggYCcgLiAkcmVwbGFjZW1lbnQgLiAnYC4nICk7CgkvKgoJaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdtYXliZV9zZXJpYWxpemVkJyApID09ICd0cnVlJyApIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdBY2NvdW50aW5nIGZvciBzZXJpYWxpemVkIGRhdGEgYmFzZWQgb24gc2V0dGluZ3MuJyApOwoJCSRtYXliZV9zZXJpYWxpemVkID0gdHJ1ZTsKCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ3dhcm5pbmcnLCAnTk9UIGFjY291bnRpbmcgZm9yIHNlcmlhbGl6ZWQgZGF0YSBiYXNlZCBvbiBzZXR0aW5ncy4gVXNlIHdpdGggY2F1dGlvbi4nICk7CgkJJG1heWJlX3NlcmlhbGl6ZWQgPSBmYWxzZTsKCX0KCSovCgkKCQoJLy8gUmVwbGFjZSBiYXNlZCBvbiB0aGUgdHlwZSBvZiB0YWJsZSByZXBsYWNlbWVudCBzZWxlY3RlZC4KCWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAndGFibGVfc2VsZWN0aW9uJyApID09ICdhbGwnICkgeyAvLyBBbGwgdGFibGVzLgoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2luZyBpbiBhbGwgdGFibGVzIGJhc2VkIG9uIHNldHRpbmdzLicgKTsKCQkKCQkkdGFibGVzID0gYXJyYXkoKTsKCQkkcmVzdWx0ID0gbXlzcWxfcXVlcnkoICdTSE9XIFRBQkxFUycsICR3cGRiLT5kYmggKTsKCQl3aGlsZSggJHJzID0gbXlzcWxfZmV0Y2hfcm93KCAkcmVzdWx0ICkgKSB7CgkJCSR0YWJsZXNbXSA9ICRyc1swXTsKCQl9CgkJbXlzcWxfZnJlZV9yZXN1bHQoICRyZXN1bHQgKTsgLy8gRnJlZSBtZW1vcnkuCgkJJHJvd3NfY2hhbmdlZCA9IDA7CgkJZm9yZWFjaCggJHRhYmxlcyBhcyAkdGFibGUgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2luZyBpbiB0YWJsZSBgJyAuICR0YWJsZSAuICdgLicgKTsKCQkJJHJvd3NfY2hhbmdlZCArPSAkZGJyZXBsYWNlLT5icnV0ZWZvcmNlX3RhYmxlKCAkdGFibGUsIGFycmF5KCAkbmVlZGxlICksIGFycmF5KCAkcmVwbGFjZW1lbnQgKSApOwoJCX0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdUb3RhbCByb3dzIHVwZGF0ZWQgYWNyb3NzIGFsbCB0YWJsZXM6ICcgLiAkcm93c19jaGFuZ2VkIC4gJy4nICk7CgkJCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnUmVwbGFjZW1lbnQgZmluaXNoZWQuJyApOwoJfSBlbHNlaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICd0YWJsZV9zZWxlY3Rpb24nICkgPT0gJ3NpbmdsZV90YWJsZScgKSB7CgkJJHRhYmxlID0gbXlzcWxfcmVhbF9lc2NhcGVfc3RyaW5nKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICd0YWJsZScgKSApOyAvLyBTaW5nbGUgc3BlY2lmaWVkIHRhYmxlLgoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2luZyBpbiBzaW5nbGUgdGFibGUgYCcgLiAkdGFibGUgLiAnYCBiYXNlZCBvbiBzZXR0aW5ncy4nICk7CgkJJGRicmVwbGFjZS0+YnJ1dGVmb3JjZV90YWJsZSggJHRhYmxlLCBhcnJheSggJG5lZWRsZSApLCBhcnJheSggJHJlcGxhY2VtZW50ICkgKTsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdSZXBsYWNlbWVudCBmaW5pc2hlZC4nICk7Cgl9IGVsc2VpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3RhYmxlX3NlbGVjdGlvbicgKSA9PSAncHJlZml4JyApIHsgLy8gTWF0Y2hpbmcgdGFibGUgcHJlZml4LgoJCSRwcmVmaXggPSBteXNxbF9yZWFsX2VzY2FwZV9zdHJpbmcoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3RhYmxlX3ByZWZpeCcgKSApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2luZyBpbiBhbGwgdGFibGVzIG1hdGNoaW5nIHByZWZpeCBgJyAuICRwcmVmaXggLiAnYC4nICk7CgkJCgkJJHRhYmxlcyA9IGFycmF5KCk7CgkJJGVzY2FwZWRfcHJlZml4ID0gc3RyX3JlcGxhY2UoICdfJywgJ1xfJywgJHByZWZpeCApOwoJCSRyZXN1bHQgPSBteXNxbF9xdWVyeSggIlNIT1cgVEFCTEVTIExJS0UgJ3skZXNjYXBlZF9wcmVmaXh9JSciLCAkd3BkYi0+ZGJoICk7CgkJd2hpbGUoICRycyA9IG15c3FsX2ZldGNoX3JvdyggJHJlc3VsdCApICkgewoJCQkkdGFibGVzW10gPSAkcnNbMF07CgkJfQoJCW15c3FsX2ZyZWVfcmVzdWx0KCAkcmVzdWx0ICk7IC8vIEZyZWUgbWVtb3J5LgoJCSRyb3dzX2NoYW5nZWQgPSAwOwoJCWZvcmVhY2goICR0YWJsZXMgYXMgJHRhYmxlICkgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdSZXBsYWNpbmcgaW4gdGFibGUgYCcgLiAkdGFibGUgLiAnYC4nICk7CgkJCSRyb3dzX2NoYW5nZWQgKz0gJGRicmVwbGFjZS0+YnJ1dGVmb3JjZV90YWJsZSggJHRhYmxlLCBhcnJheSggJG5lZWRsZSApLCBhcnJheSggJHJlcGxhY2VtZW50ICkgKTsKCQl9CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnVG90YWwgcm93cyB1cGRhdGVkIGFjcm9zcyBhbGwgdGFibGVzOiAnIC4gJHJvd3NfY2hhbmdlZCAuICcuJyApOwoJCQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2VtZW50IGZpbmlzaGVkLicgKTsKCX0gZWxzZSB7CgkJZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPmpRdWVyeSgiI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciKS5oaWRlKCk7PC9zY3JpcHQ+JzsKCQlkaWUoICdFcnJvciAjNDQ1Njg5MzQ4OTM0OTgzNC4gVW5rbm93biBtZXRob2QuJyApOwoJfQoJCgllY2hvICc8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+alF1ZXJ5KCIjcGJfaW1wb3J0YnVkZHlfd29ya2luZyIpLmhpZGUoKTs8L3NjcmlwdD4nOwoJZWNobyAnPGJyPjxhIGhyZWY9IicgLiBwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSAuICcmcGFyZW50X2NvbmZpZz0nIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhcmVudF9jb25maWcnICkgKSAuICciIGNsYXNzPSJidXR0b24gc2Vjb25kYXJ5LWJ1dHRvbiI+JmxhcnI7ICcgLiAgX18oICdiYWNrJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9hPic7CgkKCSRwYl9iYWNrdXBidWRkeV9qc19zdGF0dXMgPSBmYWxzZTsKCXJldHVybjsKfQoKCgoKCgoKCgoKCgokdGFibGVzID0gYXJyYXkoKTsKJHByZWZpeGVzID0gYXJyYXkoKTsKCi8vIE1ha2Ugc3VyZSB0aGlzIFdQJ3MgcHJlZml4IGlzIGluIHRoZXJlIGZvciBzdXJlICh1c2VmdWwgaWYgc29tZW9uZSB1c2VzIGEgcHJlZml4IHRoYXQgaGFzIGFuIHVuZGVyc2NvcmUgaW4gaXQ7IHRoZXkgc2hvdWxkbnQgYnV0IHRoZXkgZG8pLgpnbG9iYWwgJHRhYmxlX3ByZWZpeDsKJHByZWZpeGVzW10gPSAkdGFibGVfcHJlZml4OwoKLy8gQ2FsY3VsYXRlIHByZWZpeGVzIGZvdWRuIGluIHRoaXMgZGF0YWJhc2UuIERvZXMgbm90IGhhbmRsZSBtdWx0aXBsZS11bmRlcnNjb3JlCiRyZXN1bHQgPSBteXNxbF9xdWVyeSggJ1NIT1cgVEFCTEVTJywgJHdwZGItPmRiaCApOwp3aGlsZSggJHJzID0gbXlzcWxfZmV0Y2hfcm93KCAkcmVzdWx0ICkgKSB7CgkkdGFibGVzW10gPSAkcnNbMF07CgkKCWlmICggcHJlZ19tYXRjaCggJy9bYS16QS1aMC05XSpfKFswLTldK18pKi9pJywgJHJzWzBdLCAkbWF0Y2hlcyApICkgewoJCSRwcmVmaXhlc1tdID0gJG1hdGNoZXNbMF07Cgl9Cn0KbXlzcWxfZnJlZV9yZXN1bHQoICRyZXN1bHQgKTsgLy8gRnJlZSBtZW1vcnkuCgokcHJlZml4ZXMgPSBhcnJheV91bmlxdWUoICRwcmVmaXhlcyApOwpuYXRzb3J0KCAkcHJlZml4ZXMgKTsKPz4KPGRpdj4KCTxmb3JtIGFjdGlvbj0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKTs/PiZkYXRhYmFzZV9yZXBsYWNlPTEmcGFyZW50X2NvbmZpZz08P3BocCBlY2hvIGh0bWxlbnRpdGllcyggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdwYXJlbnRfY29uZmlnJyApICk7ID8+IiBtZXRob2Q9InBvc3QiPgoJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9InJlcGxhY2UiPgoJCQoJCTxoND5SZXBsYWNlIDw/cGhwIHBiX2JhY2t1cGJ1ZGR5Ojp0aXAoICdUZXh0IHlvdSB3YW50IHRvIGJlIHNlYXJjaGVkIGZvciBhbmQgcmVwbGFjZWQuIEV2ZXJ5dGhpbmcgaW4gdGhlIGJveCBpcyBjb25zaWRlcmVkIG9uZSBtYXRjaCBhbmQgbWF5IHNwYW4gbXVsdGlwbGUgbGluZXMuJyApOyA/PjwvaDQ+CgkJPHRleHRhcmVhIG5hbWU9Im5lZWRsZSIgc3R5bGU9IndpZHRoOiAxMDAlOyI+PC90ZXh0YXJlYT4KCQk8YnI+CgkJCgkJPGg0PldpdGggPD9waHAgcGJfYmFja3VwYnVkZHk6OnRpcCggJ1RleHQgeW91IHdhbnQgdG8gcmVwbGFjZSB3aXRoLiBBbnkgdGV4dCBmb3VuZCBtYXRjaGluZyB0aGUgYm94IGFib3ZlIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGlzIHRleHQuIEV2ZXJ5dGhpbmcgaW4gdGhlIGJveCBpcyBjb25zaWRlcmVkIG9uZSBtYXRjaCBhbmQgbWF5IHNwYW4gbXVsdGlwbGUgbGluZXMuJyApOyA/PjwvaDQ+CgkJPHRleHRhcmVhIG5hbWU9InJlcGxhY2VtZW50IiBzdHlsZT0id2lkdGg6IDEwMCU7Ij48L3RleHRhcmVhPgoJCQoJCTxoND5JbiB0YWJsZShzKTwvaDQ+CgkJPGxhYmVsIHN0eWxlPSJmbG9hdDogbm9uZTsiIGZvcj0idGFibGVfc2VsZWN0aW9uX2FsbCI+PGlucHV0IGlkPSJ0YWJsZV9zZWxlY3Rpb25fYWxsIiAgY2hlY2tlZD0nY2hlY2tlZCcgdHlwZT0icmFkaW8iIG5hbWU9InRhYmxlX3NlbGVjdGlvbiIgdmFsdWU9ImFsbCI+IGFsbCB0YWJsZXM8L2xhYmVsPgoJCTxsYWJlbCBzdHlsZT0iZmxvYXQ6IG5vbmU7IiBmb3I9InRhYmxlX3NlbGVjdGlvbl9wcmVmaXgiPjxpbnB1dCBpZD0idGFibGVfc2VsZWN0aW9uX3ByZWZpeCIgdHlwZT0icmFkaW8iIG5hbWU9InRhYmxlX3NlbGVjdGlvbiIgdmFsdWU9InByZWZpeCI+IHdpdGggcHJlZml4OjwvbGFiZWw+CgkJPHNlbGVjdCBuYW1lPSJ0YWJsZV9wcmVmaXgiIGlkPSJ0YWJsZV9zZWxlY3Rpb25fcHJlZml4IiBvbmNsaWNrPSJqUXVlcnkoJyN0YWJsZV9zZWxlY3Rpb25fcHJlZml4JykuY2xpY2soKTsiPgoJCQk8P3BocAoJCQlmb3JlYWNoKCAkcHJlZml4ZXMgYXMgJHByZWZpeCApIHsKCQkJCWVjaG8gJzxvcHRpb24gdmFsdWU9IicgLiAkcHJlZml4IC4gJyI+JyAuICRwcmVmaXggLiAnPC9vcHRpb24+JzsKCQkJfQoJCQk/PgoJCTwvc2VsZWN0PgoJCTxsYWJlbCBzdHlsZT0iZmxvYXQ6IG5vbmU7IiBmb3I9InRhYmxlX3NlbGVjdGlvbl90YWJsZSI+PGlucHV0IGlkPSJ0YWJsZV9zZWxlY3Rpb25fdGFibGUiIHR5cGU9InJhZGlvIiBuYW1lPSJ0YWJsZV9zZWxlY3Rpb24iIHZhbHVlPSJzaW5nbGVfdGFibGUiPiBzaW5nbGU6PC9sYWJlbD4KCQk8c2VsZWN0IG5hbWU9InRhYmxlIiBpZD0idGFibGVfc2VsZWN0aW9uX3RhYmxlIiBvbmNsaWNrPSJqUXVlcnkoJyN0YWJsZV9zZWxlY3Rpb25fdGFibGUnKS5jbGljaygpOyI+CgkJCTw/cGhwCgkJCWZvcmVhY2goICR0YWJsZXMgYXMgJHRhYmxlICkgewoJCQkJZWNobyAnPG9wdGlvbiB2YWx1ZT0iJyAuICR0YWJsZSAuICciPicgLiAkdGFibGUgLiAnPC9vcHRpb24+JzsKCQkJfQoJCQk/PgoJCTwvc2VsZWN0PgoJCTxoND5JbiBkYXRhYmFzZTwvaDQ+CgkJIjw/cGhwIGVjaG8gJGRhdGFiYXNlU2V0dGluZ3NbJ25hbWUnXTsgPz4iIG9uIGhvc3QgIjw/cGhwIGVjaG8gJGRhdGFiYXNlU2V0dGluZ3NbJ2hvc3QnXTsgPz4iIHdpdGggdXNlcm5hbWUgIjw/cGhwIGVjaG8gJGRhdGFiYXNlU2V0dGluZ3NbJ3VzZXJuYW1lJ107ID8+Ii4KCQk8P3BocAoJCWlmICggc3Vic3RyX2NvdW50KCAkdGFibGVfcHJlZml4LCAnXycgKSA+IDEgKSB7CgkJCWVjaG8gJzxzcGFuIGNsYXNzPSJwYl9sYWJlbCBwYl9sYWJlbC13YXJuaW5nIj5XYXJuaW5nPC9zcGFuPiAnOwoJCQlfZSggIlNpdGUgdGFibGUgcHJlZml4IGNvbnRhaW5zIG11bHRpcGxlIHVuZGVyc2NvcmVzLiBQcmVmaXggbGlzdCBtYXkgYmUgaW5hY2N1cmF0ZSBpZiB0aGVzZSBhcmUgbm90IE11bHRpc2l0ZSBzdWJzaXRlcy4iLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQl9CgkJLyoKCQk8aDQ+V2l0aCBhZHZhbmNlZCBvcHRpb25zPC9oND4KCQk8bGFiZWwgZm9yPSJtYXliZV9zZXJpYWxpemVkIj48aW5wdXQgaWQ9Im1heWJlX3NlcmlhbGl6ZWQiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJtYXliZV9zZXJpYWxpemVkIiB2YWx1ZT0idHJ1ZSIgY2hlY2tlZD0iY2hlY2tlZCI+IFRyZWF0IGZpZWxkcyBhcyBwb3NzaWJseSBjb250YWluaW5nIHNlcmlhbGl6ZWQgZGF0YSAodW5jaGVjayB3aXRoIGNhdXRpb247IHNsb3dlcikuPC9sYWJlbD4KCQkqLwoJCT8+PGJyPjxicj4KCQoJCTxwPgoJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJCZWdpbiBSZXBsYWNlbWVudCIgY2xhc3M9ImJ1dHRvbiBidXR0b24tcHJpbWFyeSIgLz4gPHNwYW4gY2xhc3M9ImRlc2NyaXB0aW9uIj5DYXV0aW9uOyB0aGlzIGNhbm5vdCBiZSB1bmRvbmUuIFNlcmlhbGl6ZWQgZGF0YSBpcyBoYW5kbGVkIGJ5IHRoaXMgcmVwbGFjZW1lbnQuPC9zcGFuPgoJCTwvcD4KCTwvZm9ybT4KPC9kaXY+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9Cj8+Cgo8L2Rpdj4KPC9kaXY+CgoKCjw/cGhwIGlmICggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkaXNwbGF5X21vZGUnXSA9PSAnbm9ybWFsJyApIHsgPz4KCTxkaXYgY2xhc3M9ImZvb3RlciI+PGJyPjxicj4KCQk8Y2VudGVyPgoJCQk8P3BocAoJCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snYmJfdmVyc2lvbiddICE9ICcnKSB7CgkJCQllY2hvICc8YnI+PHNwYW4gY2xhc3M9ImZvb3Rlcl90ZXh0Ij5JbXBvcnRCdWRkeSB2JyAuIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snYmJfdmVyc2lvbiddIC4gJyBmb3IgPGEgaHJlZj0iaHR0cDovL2l0aGVtZXMuY29tLyI+QmFja3VwQnVkZHk8L2E+PC9zcGFuPic7CgkJCX0KCQkJPz4KCQk8L2NlbnRlcj4KCTwvZGl2Pgo8P3BocCB9ID8+CgoKCjwvYm9keT4KPC9odG1sPgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgokcGFnZV90aXRsZSA9ICdEYXRhYmFzZSBUZXh0IFJlcGxhY2UgVG9vbCc7CnJlcXVpcmVfb25jZSggJ19oZWFkZXIucGhwJyApOwo/PgoKPGRpdiBjbGFzcz0id3JhcCI+Cjw/cGhwCiRjb25maWdGaWxlID0gJyc7CmlmICggISBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd3cC1jb25maWcucGhwJyApICkgeyAvLyBOb3JtYWwgY29uZmlnIGZpbGUgbm90IGZvdW5kIHNvIHdhcm4gb3Igc2VlIGlmIHBhcmVudCBjb25maWcgbWF5IGV4aXN0LgoJJHBhcmVudENvbmZpZ01lc3NhZ2UgPSAnJzsKCSRwYXJlbnRDb25maWcgPSAgZGlybmFtZSggQUJTUEFUSCApIC4gJy93cC1jb25maWcucGhwJzsKCWlmICggQGZpbGVfZXhpc3RzKCAkcGFyZW50Q29uZmlnICkgKSB7IC8vIFBhcmVudCBjb25maWcgZXhpc3RzIHNvIG9mZmVyIGl0IGFzIGFuIG9wdGlvbiBvciBwb3NzaWJseSB1c2UgaXQgaWYgdXNlciBoYXMgc2VsZWN0ZWQgdG8gZG8gc28uCgkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhcmVudF9jb25maWcnICkgPT0gJ3RydWUnICkgeyAvLyBVc2VyIG9wdGVkIHRvIHVzZSBwYXJlbnQgY29uZmlnLgoJCQkkY29uZmlnRmlsZSA9ICRwYXJlbnRDb25maWc7CgkJfSBlbHNlIHsgLy8gVXNlciBoYXMgbm90IG9wdGVkIHRvIHVzZSBwYXJlbnQgY29uZmlnIHlldCBzbyBzZXQgbWVzc2FnZSB0byBvZmZlciBpdC4KCQkJJHBhcmVudENvbmZpZ01lc3NhZ2UgPSAnPGJyPjxicj48Yj5Ib3dldmVyPC9iPiwgYSB3cC1jb25maWcucGhwIGZpbGUgd2FzIGZvdW5kIGluIHRoZSBwYXJlbnQgZGlyZWN0b3J5IGFzIGAnIC4gJHBhcmVudENvbmZpZyAuICdgLiA8YSBocmVmPSI/cGFnZT1kYnJlcGxhY2UmcGFyZW50X2NvbmZpZz10cnVlIj48Yj5DbGljayBoZXJlPC9iPjwvYT4gaWYgeW91IHdvdWxkIGxpa2UgdG8gcnVuIHRoaXMgdG9vbCB1c2luZyB0aGlzIHdwLWNvbmZpZy5waHAgZmlsZSBpbiB0aGUgcGFyZW50IGRpcmVjdG9yeS4nOwoJCX0KCX0KCWlmICggJycgPT0gJGNvbmZpZ0ZpbGUgKSB7CgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnPGI+RXJyb3I6PC9iPiBUaGlzIHRvb2wgcmVxdWlyZXMgYW4gZXhpc3RpbmcgV29yZFByZXNzIGluc3RhbGxhdGlvbiB0byBwZXJmb3JtIGRhdGFiYXNlIHJlcGxhY2VtZW50cyBvbi4gTm8gV29yZFByZXNzIHdwLWNvbmZpZy5waHAgY29uZmlndXJhdGlvbiBmaWxlIHdhcyBmb3VuZCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgaW1wb3J0YnVkZHkucGhwLiAnIC4gJHBhcmVudENvbmZpZ01lc3NhZ2UgLiAnIDxicj48YnI+IDxiPk5vdGU6PC9iPiBJbXBvcnRCdWRkeSBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgbWlncmF0aW5nICYgcmVwbGFjaW5nIHlvdXIgc2l0ZSBVUkxzIGFuZCBmaWxlIHBhdGhzIGR1cmluZyByZXN0b3JlL21pZ3JhdGlvbjsgdGhpcyB0b29sIGlzIG5vdCBuZWVkZWQgZm9yIG5vcm1hbCBiYWNrdXAgLyByZXN0b3JlIG9wZXJhdGlvbnMuJywgdHJ1ZSApOwoJfQp9IGVsc2UgeyAvLyBVc2Ugbm9ybWFsIGNvbmZpZyBmaWxlLgoJJGNvbmZpZ0ZpbGUgPSBBQlNQQVRIIC4gJ3dwLWNvbmZpZy5waHAnOwp9CgppZiAoICcnICE9ICRjb25maWdGaWxlICkgewoJCgkvLyBSZWFkIGluIHdwLWNvbmZpZy5waHAgZmlsZSBjb250ZW50cy4KCSRjb25maWdDb250ZW50cyA9IGZpbGVfZ2V0X2NvbnRlbnRzKCAkY29uZmlnRmlsZSApOwoJaWYgKCBmYWxzZSA9PT0gJGNvbmZpZ0NvbnRlbnRzICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yOiBVbmFibGUgdG8gcmVhZCB3cC1jb25maWcucGhwIGNvbmZpZ3VyYXRpb24gZmlsZS4nICk7CgkJcmV0dXJuOwoJfQoJCgkvLyBHcmFiIGRhdGFiYXNlIHNldHRpbmdzIGZyb20gd3AtY29uZmlnLnBocCBjb250ZW50cy4KCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX05BTUUoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWyduYW1lJ10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX1VTRVIoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWyd1c2VybmFtZSddID0gJG1hdGNoZXNbNF07CglwcmVnX21hdGNoKCAnL2RlZmluZVwoW1xzXSooXCd8IilEQl9QQVNTV09SRChcJ3wiKSxbXHNdKihcJ3wiKSguKikoXCd8IilbXHNdKlwpOy9pJywgJGNvbmZpZ0NvbnRlbnRzLCAkbWF0Y2hlcyApOwoJJGRhdGFiYXNlU2V0dGluZ3NbJ3Bhc3N3b3JkJ10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX0hPU1QoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWydob3N0J10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvXCR0YWJsZV9wcmVmaXhbXHNdKj1bXHNdKihcJ3wiKSguKikoXCd8Iik7L2knLCAkY29uZmlnQ29udGVudHMsICRtYXRjaGVzICk7CgkkZGF0YWJhc2VTZXR0aW5nc1sncHJlZml4J10gPSAkbWF0Y2hlc1syXTsKCQoJLy9wcmludF9yKCAkZGF0YWJhc2VTZXR0aW5ncyApOwoJCgkvLyBDb25uZWN0IHRvIGRhdGFiYXNlLgoJZ2xvYmFsICR3cGRiOwoJJHdwZGIgPSBuZXcgd3BkYiggJGRhdGFiYXNlU2V0dGluZ3NbJ3VzZXJuYW1lJ10sICRkYXRhYmFzZVNldHRpbmdzWydwYXNzd29yZCddLCAkZGF0YWJhc2VTZXR0aW5nc1snbmFtZSddLCAkZGF0YWJhc2VTZXR0aW5nc1snaG9zdCddICk7CglpZiAoIGZhbHNlID09PSAkd3BkYi0+ZGJoICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yICM4NTgzODM6IFVuYWJsZSB0byBjb25uZWN0IHRvIGRhdGFiYXNlIHVzaW5nIHNldHRpbmdzIGluIHdwLWNvbmZpZy5waHAuIFZlcmlmeSBjb25uZWN0aW9uIHNldHRpbmdzLicgKTsKCX0gZWxzZSB7CgkJcmVxdWlyZV9vbmNlKCAnX2RicmVwbGFjZS5waHAnICk7Cgl9Cn0KPz4KPC9kaXY+Cgo8P3BocApyZXF1aXJlX29uY2UoICdfZm9vdGVyLnBocCcgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/html_1.php,importbuddy/views/html_1.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/html_1.php,importbuddy/views/html_1.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/html_2.php,importbuddy/views/html_2.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgokcGFnZV90aXRsZSA9ICdTdGVwIDxzcGFuIGNsYXNzPSJzdGVwX251bWJlciI+JyAuICRzdGVwIC4gJzwvc3Bhbj4gb2YgNjogVW56aXBwaW5nIEJhY2t1cCBGaWxlJzsKcmVxdWlyZV9vbmNlKCAnX2hlYWRlci5waHAnICk7CmVjaG8gJzxkaXYgY2xhc3M9IndyYXAiPic7CgplY2hvIHBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10tPnN0YXR1c19ib3goICdFeHRyYWN0aW5nIGJhY2t1cCBaSVAgZmlsZSB3aXRoIEltcG9ydEJ1ZGR5IHYnIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydiYl92ZXJzaW9uJ10gLiAnLi4uIFBvd2VyZWQgYnkgQmFja3VwQnVkZHkuJyApOwplY2hvICc8ZGl2IGlkPSJwYl9pbXBvcnRidWRkeV93b3JraW5nIj48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9sb2FkaW5nX2xhcmdlLmdpZiIgdGl0bGU9IldvcmtpbmcuLi4gUGxlYXNlIHdhaXQgYXMgdGhpcyBtYXkgdGFrZSBhIG1vbWVudC4uLiI+PC9kaXY+JzsKcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgoKLy8gVHJ5IHRvIHB1dCBhIC5tYWludGVuYW5jZSBmaWxlIGluIHBsYWNlIGR1cmluZyBpbXBvcnQgdG8gaGVscCBwcmV2ZW50IGFnYWluc3Qgdmlld2luZyBzaXRlIGJlZm9yZSBpbXBvcnQgY29tcGxldGVzLgpnZW5lcmF0ZV9tYWludGVuYW5jZV9maWxlKCk7CgoKJHJlc3VsdHMgPSBleHRyYWN0X2ZpbGVzKCk7CgoKZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPmpRdWVyeSgiI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciKS5oaWRlKCk7PC9zY3JpcHQ+JzsKCmlmICggdHJ1ZSA9PT0gJHJlc3VsdHMgKSB7IC8vIE1vdmUgb24gdG8gbmV4dCBzdGVwLgoJZWNobyAnPGJyPjxicj48cCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+RmlsZXMgc3VjY2Vzc2Z1bGx5IGV4dHJhY3RlZC48L3A+JzsKCWVjaG8gJzxmb3JtIGFjdGlvbj0iP3N0ZXA9MyIgbWV0aG9kPXBvc3Q+JzsKCWVjaG8gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9wdGlvbnMiIHZhbHVlPSInIC4gaHRtbHNwZWNpYWxjaGFycyggc2VyaWFsaXplKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnMgKSApIC4gJyIgLz4nOwoJZWNobyAnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icGFzc19oYXNoIiBpZD0icGFzc19oYXNoIiB2YWx1ZT0iJyAuICBodG1sc3BlY2lhbGNoYXJzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzX2hhc2gnICkgKSAuICciPic7CgllY2hvICc8L2Rpdj48IS0tIC93cmFwIC0tPic7CgllY2hvICc8ZGl2IGNsYXNzPSJtYWluX2JveF9mb290Ij48aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJOZXh0IFN0ZXAgJnJhcnI7IiBjbGFzcz0iYnV0dG9uIiAvPjwvZGl2Pic7CgllY2hvICc8L2Zvcm0+JzsKfSBlbHNlIHsKCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0ZpbGUgZXh0cmFjdGlvbiBwcm9jZXNzIGRpZCBub3QgY29tcGxldGUgc3VjY2Vzc2Z1bGx5LiBVbmFibGUgdG8gY29udGludWUgdG8gbmV4dCBzdGVwLiBNYW51YWxseSBleHRyYWN0IHRoZSBiYWNrdXAgWklQIGZpbGUgYW5kIGNob29zZSB0byAiU2tpcCBGaWxlIEV4dHJhY3Rpb24iIGZyb20gdGhlIGFkdmFuY2VkIG9wdGlvbnMgb24gU3RlcCAxLicsIHRydWUsICc5MDA1JyApOwoJZWNobyAnPC9kaXY+PCEtLSAvd3JhcCAtLT4nOwp9CgpyZW5hbWVfaHRhY2Nlc3NfdGVtcCgpOyAvLyBSZW5hbWUgLmh0YWNjZXNzIHRvIC5odGFjY2Vzcy5iYl90ZW1wIHVudGlsIGVuZCBvZiBtaWdyYXRpb24uCgpyZXF1aXJlX29uY2UoICdfZm9vdGVyLnBocCcgKTsgPz4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/html_2.php,importbuddy/views/html_2.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/html_3.php,importbuddy/views/html_3.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/html_3.php,importbuddy/views/html_3.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/html_4.php,importbuddy/views/html_4.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgokcGFnZV90aXRsZSA9ICdTdGVwIDxzcGFuIGNsYXNzPSJzdGVwX251bWJlciI+JyAuICRzdGVwIC4gJzwvc3Bhbj4gb2YgNjogRGF0YWJhc2UgSW1wb3J0JzsKcmVxdWlyZV9vbmNlKCAnX2hlYWRlci5waHAnICk7CmVjaG8gJzxkaXYgY2xhc3M9IndyYXAiPic7CgoKJGZhaWxlZCA9IGZhbHNlOwoKCmVjaG8gcGJfYmFja3VwYnVkZHk6OiRjbGFzc2VzWydpbXBvcnQnXS0+c3RhdHVzX2JveCggJ0ltcG9ydGluZyBkYXRhYmFzZSBjb250ZW50IHdpdGggSW1wb3J0QnVkZHkgdicgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2JiX3ZlcnNpb24nXSAuICcuLi4gUG93ZXJlZCBieSBCYWNrdXBCdWRkeS4nICk7CmVjaG8gJzxkaXYgaWQ9InBiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciPjxpbWcgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL2xvYWRpbmdfbGFyZ2UuZ2lmIiB0aXRsZT0iV29ya2luZy4uLiBQbGVhc2Ugd2FpdCBhcyB0aGlzIG1heSB0YWtlIGEgbW9tZW50Li4uIj48L2Rpdj4nOwoKcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgoKJGltcG9ydF9yZXN1bHQgPSBpbXBvcnRfZGF0YWJhc2UoKTsKCmVjaG8gJzxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij5qUXVlcnkoIiNwYl9pbXBvcnRidWRkeV93b3JraW5nIikuaGlkZSgpOzwvc2NyaXB0Pic7CgppZiAoICRpbXBvcnRfcmVzdWx0WzBdID09IHRydWUgKSB7CglpZiAoICRpbXBvcnRfcmVzdWx0WzFdICE9PSB0cnVlICkgeyAvLyBpZiBub3QgZmluaXNoZWQuCgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnRGF0YWJhc2UgdG9vIGxhcmdlIHRvIGltcG9ydCBpbiBvbmUgc3RlcCBzbyBpdCB3aWxsIGJlIGltcG9ydGVkIGluIGNodW5rcy4gUGxlYXNlIGNvbnRpbnVlIHRoZSBwcm9jZXNzIHVudGlsIHRoaXMgc3RlcCBpcyBmaW5pc2hlZC4gVGhpcyBtYXkgdGFrZSBhIGZldyBzdGVwcyBkZXBlbmRpbmcgb24gdGhlIHNpemUgb2YgeW91ciBkYXRhYmFzZSBhbmQgc2VydmVyIHNwZWVkLicgKTsKCQllY2hvICc8YnI+JzsKCQllY2hvICdQbGVhc2Uga2VlcCBjb250aW51aW5nIHVudGlsIHlvdXIgZGF0YWJhc2UgaGFzIGZ1bGx5IGltcG9ydGVkLiBUaGlzIG1heSB0YWtlIGEgZmV3IHN0ZXBzLic7CgkJZWNobyAnPGZvcm0gYWN0aW9uPSI/c3RlcD00IiBtZXRob2Q9cG9zdD4nOwoJCWVjaG8gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBhc3NfaGFzaCIgaWQ9InBhc3NfaGFzaCIgdmFsdWU9IicgLiBodG1sc3BlY2lhbGNoYXJzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzX2hhc2gnICkgKSAuICciPic7CgkJZWNobyAnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGJfY29udGludWUiIHZhbHVlPSInIC4gJGltcG9ydF9yZXN1bHRbMV0gLiAnIj4nOwoJCWVjaG8gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Im9wdGlvbnMiIHZhbHVlPSInIC4gaHRtbHNwZWNpYWxjaGFycyggc2VyaWFsaXplKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnMgKSApIC4gJyIgLz4nOwoJCWVjaG8gJzwvZGl2PjwhLS0gL3dyYXAgLS0+JzsKCQllY2hvICc8ZGl2IGNsYXNzPSJtYWluX2JveF9mb290Ij48aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIGNsYXNzPSJidXR0b24iIHZhbHVlPSJDb250aW51ZSBEYXRhYmFzZSBJbXBvcnQgJnJhcnI7IiAvPjwvZGl2Pic7CgkJZWNobyAnPC9mb3JtPic7Cgl9IGVsc2UgewoJCWVjaG8gJzxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7Ij5Jbml0aWFsIGRhdGFiYXNlIGltcG9ydCBjb21wbGV0ZSE8L3A+PGJyPic7CgkJZWNobyAnTmV4dCB0aGUgZGF0YSBpbiB0aGUgZGF0YWJhc2Ugd2lsbCBiZSBtaWdyYXRlZCB0byBhY2NvdW50IGZvciBhbnkgZmlsZSBwYXRoIG9yIFVSTCBjaGFuZ2VzLic7CgkJZWNobyAnPGZvcm0gYWN0aW9uPSI/c3RlcD01IiBtZXRob2Q9cG9zdD4nOwoJCWVjaG8gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBhc3NfaGFzaCIgaWQ9InBhc3NfaGFzaCIgdmFsdWU9IicgLiBodG1sc3BlY2lhbGNoYXJzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzX2hhc2gnICkgKSAuICciPic7CgkJZWNobyAnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ib3B0aW9ucyIgdmFsdWU9IicgLiBodG1sc3BlY2lhbGNoYXJzKCBzZXJpYWxpemUoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9ucyApICkgLiAnIiAvPic7CgkJZWNobyAnPC9kaXY+PCEtLSAvd3JhcCAtLT4nOwoJCWVjaG8gJzxkaXYgY2xhc3M9Im1haW5fYm94X2Zvb3QiPjxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiIgdmFsdWU9Ik5leHQgU3RlcCAmcmFycjsiIC8+PC9kaXY+JzsKCQllY2hvICc8L2Zvcm0+JzsKCX0KfSBlbHNlIHsKCWVjaG8gJzxicj48cCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+RGF0YWJhc2UgaW1wb3J0IGZhaWxlZC4gUGxlYXNlIHVzZSB5b3VyIGJhY2sgYnV0dG9uIHRvIGNvcnJlY3QgYW55IGVycm9ycy48L3A+JzsKCWVjaG8gJzwvZGl2PjwhLS0gL3dyYXAgLS0+JzsKfQoKCgpyZXF1aXJlX29uY2UoICdfZm9vdGVyLnBocCcgKTsKPz4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/html_4.php,importbuddy/views/html_4.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/html_5.php,importbuddy/views/html_5.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgokcGFnZV90aXRsZSA9ICdTdGVwIDxzcGFuIGNsYXNzPSJzdGVwX251bWJlciI+JyAuICRzdGVwIC4gJzwvc3Bhbj4gb2YgNjogRGF0YWJhc2UgTWlncmF0aW9uIChVcGRhdGluZyBVUkxzLCBwYXRocywgZXRjKSc7CnJlcXVpcmVfb25jZSggJ19oZWFkZXIucGhwJyApOwo/PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaW1wb3J0YnVkZHkvanMvanF1ZXJ5LnNpbXBsZS1leHBhbmQubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaW1wb3J0YnVkZHkvanMvanF1ZXJ5LmxlYW5Nb2RhbC5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CglqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJCQoJCWpRdWVyeSgnLmV4cGFuZGVyJykuc2ltcGxlZXhwYW5kKCk7CgkJCgkJalF1ZXJ5KCcubGVhbk1vZGFsJykubGVhbk1vZGFsKAoJCQl7IHRvcCA6IDIwLCBvdmVybGF5IDogMC40LCBjbG9zZUJ1dHRvbjogIi5tb2RhbF9jbG9zZSIgfQoJCSk7Cgl9KTsKPC9zY3JpcHQ+CgoKPD9waHAKZWNobyAnPGRpdiBjbGFzcz0id3JhcCI+JzsKCgpyZW5hbWVfaHRhY2Nlc3NfdGVtcF9iYWNrKCk7IC8vIFJlbmFtZSAuaHRhY2Nlc3MuYmJfdGVtcCBiYWNrIHRvIC5odGFjY2Vzcy4KCgplY2hvIHBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10tPnN0YXR1c19ib3goICdNaWdyYXRpbmcgZGF0YWJhc2UgY29udGVudCB3aXRoIEltcG9ydEJ1ZGR5IHYnIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydiYl92ZXJzaW9uJ10gLiAnLi4uIFBvd2VyZWQgYnkgQmFja3VwQnVkZHkuJyApOwplY2hvICc8ZGl2IGlkPSJwYl9pbXBvcnRidWRkeV93b3JraW5nIj48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9sb2FkaW5nX2xhcmdlLmdpZiIgdGl0bGU9IldvcmtpbmcuLi4gUGxlYXNlIHdhaXQgYXMgdGhpcyBtYXkgdGFrZSBhIG1vbWVudC4uLiI+PC9kaXY+JzsKcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgoKJHJlc3VsdCA9IG1pZ3JhdGVfZGF0YWJhc2UoKTsKCgppZiAoICggdHJ1ZSA9PT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydza2lwX2RhdGFiYXNlX2ltcG9ydCddICkgJiYgKCB0cnVlID09PSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3NraXBfZGF0YWJhc2VfbWlncmF0aW9uJ10gKSApIHsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1NraXBwaW5nIGRhdGFiYXNlIHZlcmlmaWNhdGlvbiBhcyBib3RoIEltcG9ydCBhbmQgTWlncmF0aW9uIHN0ZXBzIHdlcmUgc2tpcHBlZCBzbyBubyBtb2RpZmljYXRpb25zIHdlcmUgbWFkZSB0byBpdC4nICk7Cn0gZWxzZSB7Cgl2ZXJpZnlfZGF0YWJhc2UoKTsKfQoKCi8vIFJlbW92ZSBhbnkgdGVtcG9yYXJ5IC5tYWludGVuYW5jZSBmaWxlIGNyZWF0ZWQgYnkgSW1wb3J0QnVkZHkuCnNjcnViX21haW50ZW5hbmNlX2ZpbGUoKTsKCgovLyBSZW1vdmUgYW55IHRlbXBvcmFyeSBpbmRleC5odG0gZmlsZSBjcmVhdGVkIGJ5IEltcG9ydEJ1ZGR5LgpzY3J1Yl9pbmRleF9maWxlKCk7CgoKZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPmpRdWVyeSgiI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciKS5oaWRlKCk7PC9zY3JpcHQ+JzsKCmlmICggdHJ1ZSA9PT0gJHJlc3VsdCApIHsKCSR3cGNvbmZpZ19yZXN1bHQgPSBtaWdyYXRlX3dwX2NvbmZpZygpOwoJaWYgKCAkd3Bjb25maWdfcmVzdWx0ICE9PSB0cnVlICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yOiBVbmFibGUgdG8gdXBkYXRlIHdwLWNvbmZpZy5waHAgZmlsZS4gVmVyaWZ5IHdyaXRlIHBlcm1pc3Npb25zIGZvciB0aGUgd3AtY29uZmlnLnBocCBmaWxlIHRoZW4gcmVmcmVzaCB0aGlzIHBhZ2UuIFlvdSBtYXkgbWFudWFsbHkgdXBkYXRlIHlvdXIgd3AtY29uZmlnLnBocCBmaWxlIGJ5IGNoYW5naW5nIGl0IHRvIHRoZSBmb2xsb3dpbmc6PHRleHRhcmVhIHJlYWRvbmx5PSJyZWFkb25seSIgc3R5bGU9IndpZHRoOiA4MCU7Ij4nIC4gJHdwY29uZmlnX3Jlc3VsdCAuICc8L3RleHRhcmVhPicgKTsKCX0KCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ0ltcG9ydCBjb21wbGV0ZSEnICk7CgkKCWVjaG8gJzxmb3JtIGFjdGlvbj0iP3N0ZXA9NiIgbWV0aG9kPXBvc3Q+JzsKCWVjaG8gJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBhc3NfaGFzaCIgaWQ9InBhc3NfaGFzaCIgdmFsdWU9IicgLiBodG1sc3BlY2lhbGNoYXJzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzX2hhc2gnICkgKSAuICciPic7CgllY2hvICc8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvcHRpb25zIiB2YWx1ZT0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoIHNlcmlhbGl6ZSggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zICkgKSAuICciIC8+JzsKCQoJLy8gU2NhbiBmb3IgJ3Ryb3VibGUnIHN1Y2ggYXMgYSByZW1haW5pbmcgLm1haW50ZW5hbmNlIGZpbGUsIGluZGV4Lmh0bSwgaW5kZXguaHRtbCwgbWlzc2luZyB3cC1jb25maWcucGhwLCBtaXNzaW5nIC5odGFjY2VzcywgZXRjIGV0Yy4KCSR0cm91YmxlID0gdHJvdWJsZV9zY2FuKCk7CglpZiAoIGNvdW50KCAkdHJvdWJsZSApID4gMCApIHsKCQllY2hvICc8YnI+JzsKCQkkdHJvdWJsZV90ZXh0ID0gJyc7CgkJZm9yZWFjaCggJHRyb3VibGUgYXMgJHRoaXNfdHJvdWJsZSApIHsKCQkJJHRyb3VibGVfdGV4dCAuPSAnPGxpPicgLiAkdGhpc190cm91YmxlIC4gJzwvbGk+JzsKCQl9CgkJJHRyb3VibGVfdGV4dCA9ICc8dWw+JyAuICR0cm91YmxlX3RleHQgLiAnPC91bD4nOwoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJzxiPldhcm5pbmc6PC9iPiBPbmUgb3IgbW9yZSBwb3RlbnRpYWwgaXNzdWVzIGRldGVjdGVkIHRoYXQgPGk+bWF5PC9pPiByZXF1aXJlIHlvdXIgYXR0ZW50aW9uLicgLiAkdHJvdWJsZV90ZXh0ICk7Cgl9Cgk/PgoJCgkKCTxoMz5WZXJpZnkgaW1wb3J0ZWQgc2l0ZSBmdW5jdGlvbmFsaXR5IGJlZm9yZSBwcm9jZWVkaW5nOjxicj48YnI+PGEgaHJlZj0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2hvbWUnXTsgPz4iIHRhcmdldD0iX25ldyI+PD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2hvbWUnXTsgPz48L2E+PC9oMz48YnI+CgkKCQoJPGgzPlByb2JsZW1zPyBDbGljayB0byB2aWV3IHBvc3NpYmxlIHNvbHV0aW9uczo8L2gzPgoJPGRpdiBjbGFzcz0iZXhwYW5kZXItYm94Ij4KCQk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9IiMiPkNsaWNraW5nIG9uIGEgcG9zdHMgcmVzdWx0cyBpbiBhIDQwNCBOb3QgRm91bmQ8L2E+CgkJPGRpdiBjbGFzcz0iY29udGVudCI+CgkJCVRoaXMgaXMgdHlwaWNhbGx5IGNhdXNlZCBieSBhIHByb2JsZW0gd2l0aCB5b3VyIC5odGFjY2VzcyBmaWxlLiAgTG9nIGludG8geW91ciB3cC1hZG1pbiwgbmF2aWdhdGUgdG8gU2V0dGluZ3M6IFBlcm1hbGlua3MgaW4gdGhlIFdvcmRQcmVzcyBtZW51IGFuZCBjbGljayB0aGUgIlNhdmUiIGJ1dHRvbiB0byB1cGRhdGUgcGVybWFsaW5rIHNldHRpbmdzIHRvIHlvdXIgLmh0YWNjZXNzIGZpbGUuIFRoaXMgdHlwaWNhbGx5IHJlc29sdmVzIHRoaXMgcHJvYmxlbS4KCQk8L2Rpdj4KCTwvZGl2PgoJPGRpdiBjbGFzcz0iZXhwYW5kZXItYm94Ij4KCQk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9IiMiPkxvZ2dpbmcgaW4gcmVkaXJlY3RzIGJhY2sgdG8gdGhlIG9sZCBzaXRlPC9hPgoJCTxkaXYgY2xhc3M9ImNvbnRlbnQiPgoJCQlUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIGJ5IGVudGVyaW5nIHRoZSBzb3VyY2Ugc2l0ZSBVUkwgYXMgdGhlIGRlc3RpbmF0aW9uIFVSTCBvbiBTdGVwIDMuICBSZS1yZXN0b3JpbmcgdXNpbmcgdGhlIGNvcnJlY3QgVVJMIHNob3VsZCBmaXggdGhpcyBwcm9ibGVtLgoJCTwvZGl2PgoJPC9kaXY+Cgk8ZGl2IGNsYXNzPSJleHBhbmRlci1ib3giPgoJCTxhIGNsYXNzPSJleHBhbmRlciIgaHJlZj0iIyI+U291cmNlIHNpdGUgaGFzIGNoYW5nZWQgdG8gdGhlIGRlc3RpbmF0aW9uIFVSTDwvYT4KCQk8ZGl2IGNsYXNzPSJjb250ZW50Ij4KCQkJVGhpcyBpcyBjYXVzZWQgaWYgeW91IHJlc3RvcmVkIG92ZXIgeW91ciBzb3VyY2Ugc2l0ZSBkYXRhYmFzZSBieSBlbnRlcmluZyB0aGUgc291cmNlIHNpdGUgZGF0YWJhc2Ugc2V0dGluZ3Mgb24gU3RlcCAzLiBZb3UgbWF5IHJlLXJlc3RvcmUgdXNpbmcgY29ycmVjdCBzZXR0aW5ncy4gIFlvdSBtYXkgY29ycmVjdCB0aGUgbW9kaWZpZWQgVVJMIG9uIHRoZSBzb3VyY2Ugc2l0ZSBieSB1c2luZyB0aGUgU2VydmVyIFRvb2xzIHBhZ2UncyBNYXNzIFRleHQgUmVwbGFjZSB0b29sIHdpdGhpbiB0aGUgRGF0YWJhc2UgdGFiLgoJCTwvZGl2PgoJPC9kaXY+CgkKCQoJPGJyPgoJPGgzPkZpbmFsIGNsZWFudXAgc3RlcCBuZXh0OjwvaDM+Cgk8dGFibGU+PHRyPjx0ZD4KCQk8bGFiZWwgZm9yPSJkZWxldGVfYmFja3VwIiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX2JhY2t1cCIgaWQ9ImRlbGV0ZV9iYWNrdXAiIHZhbHVlPSIxIiBjaGVja2VkPiBEZWxldGUgYmFja3VwIHppcCBhcmNoaXZlPC9sYWJlbD4KCQk8YnI+CgkJPGxhYmVsIGZvcj0iZGVsZXRlX3RlbXAiIHN0eWxlPSJ3aWR0aDogYXV0bzsgZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkZWxldGVfdGVtcCIgaWQ9ImRlbGV0ZV90ZW1wIiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIHRlbXBvcmFyeSBpbXBvcnQgZmlsZXM8L2xhYmVsPgoJPC90ZD48dGQ+CgkJPGxhYmVsIGZvcj0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBpZD0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIEltcG9ydEJ1ZGR5IHRvb2wgZmlsZXM8L2xhYmVsPgoJCTxicj4KCQk8bGFiZWwgZm9yPSJkZWxldGVfaW1wb3J0YnVkZHlsb2ciIHN0eWxlPSJ3aWR0aDogYXV0bzsgZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkZWxldGVfaW1wb3J0YnVkZHlsb2ciIGlkPSJkZWxldGVfaW1wb3J0YnVkZHlsb2ciIHZhbHVlPSIxIiBjaGVja2VkPiBEZWxldGUgaW1wb3J0YnVkZHkudHh0IGxvZyBmaWxlPC9sYWJlbD4KCTwvdGQ+PC90cj48L3RhYmxlPgoJCgk8P3BocAoJZWNobyAnPC9kaXY+PCEtLSAvd3JhcCAtLT4nOwoJZWNobyAnPGRpdiBjbGFzcz0ibWFpbl9ib3hfZm9vdCI+JzsKCWVjaG8gJzxhIGhyZWY9IiNwYl9sb2dfbW9kYWwiIGNsYXNzPSJidXR0b24gYnV0dG9uLXRlcnRpYXJ5IGxlYW5Nb2RhbCIgc3R5bGU9ImZsb2F0OiBsZWZ0OyBmb250LXNpemU6IDEzcHg7Ij5WaWV3IEltcG9ydCBMb2c8L2E+JzsKCWVjaG8gJzxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiIgdmFsdWU9IkNsZWFuIHVwICYgcmVtb3ZlIHRlbXBvcmFyeSBmaWxlcyAmcmFycjsiIC8+JzsKCWVjaG8gJzwvZGl2Pic7CgllY2hvICc8L2Zvcm0+JzsKfSBlbHNlIHsKCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yOiBVbmFibGUgdG8gbWlncmF0ZSBkYXRhYmFzZSBjb250ZW50LiBTb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoZSBkYXRhYmFzZSBtaWdyYXRpb24gcG9ydGlvbiBvZiB0aGUgcmVzdG9yZSBwcm9jZXNzLicsIHRydWUgKTsKCWVjaG8gJzwvZGl2PjwhLS0gL3dyYXAgLS0+JzsKfQo/PgoKCgoKPGRpdiBpZD0icGJfbG9nX21vZGFsIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJPGRpdiBjbGFzcz0ibW9kYWwiPgoJCTxkaXYgY2xhc3M9Im1vZGFsX2hlYWRlciI+CgkJCTxhIGNsYXNzPSJtb2RhbF9jbG9zZSI+JnRpbWVzOzwvYT4KCQkJPGgyPkltcG9ydCBMb2c8L2gyPgoJCQlNdWNoIG9mIHRoZSBJbXBvcnQgcHJvY2VzcyBpcyBsb2dnZWQgZm9yIGRlYnVnZ2luZyBvciB0cm91Ymxlc2hvb3RpbmcgcHVycG9zZXMuCgkJCVRoaXMgbG9nIG1heSBiZSBoZWxwZnVsIHdoZW4gc2Vla2luZyB0ZWNobmljYWwgc3VwcG9ydCBvciBhc3Npc3RhbmNlLgoJCTwvZGl2PgoJCTxkaXYgY2xhc3M9Im1vZGFsX2NvbnRlbnQiPgoJCQkKCQkJPHRleHRhcmVhIHN0eWxlPSJ3aWR0aDogOTUlOyBoZWlnaHQ6IDMwMHB4OyIgd3JhcD0ib2ZmIj48P3BocCBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L3N0YXR1cy0nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCcgKTsgPz48L3RleHRhcmVhPgoJCQkKCQk8L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4KCgoKCjw/cGhwCnJlcXVpcmVfb25jZSggJ19mb290ZXIucGhwJyApOwo/Pgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/html_5.php,importbuddy/views/html_5.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/html_6.php,importbuddy/views/html_6.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgokcGFnZV90aXRsZSA9ICdTdGVwIDxzcGFuIGNsYXNzPSJzdGVwX251bWJlciI+JyAuICRzdGVwIC4gJzwvc3Bhbj4gb2YgNjogRmluYWwgQ2xlYW51cCc7CnJlcXVpcmVfb25jZSggJ19oZWFkZXIucGhwJyApOwplY2hvICc8ZGl2IGNsYXNzPSJ3cmFwIj4nOwoKZWNobyBwYl9iYWNrdXBidWRkeTo6JGNsYXNzZXNbJ2ltcG9ydCddLT5zdGF0dXNfYm94KCAnQ2xlYW5pbmcgdXAgYWZ0ZXIgcmVzdG9yZSB3aXRoIEltcG9ydEJ1ZGR5IHYnIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydiYl92ZXJzaW9uJ10gLiAnLi4uIFBvd2VyZWQgYnkgQmFja3VwQnVkZHkuJyApOwplY2hvICc8ZGl2IGlkPSJwYl9pbXBvcnRidWRkeV93b3JraW5nIj48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9sb2FkaW5nX2xhcmdlLmdpZiIgdGl0bGU9IldvcmtpbmcuLi4gUGxlYXNlIHdhaXQgYXMgdGhpcyBtYXkgdGFrZSBhIG1vbWVudC4uLiI+PC9kaXY+JzsKCgovLyBBdHRlbXB0IHRvIGZsdXNoIHRoZSBwYWdlIGFuZCBwYXVzZSBzbyBhc3NldHMgKENTUywgaW1hZ2VzKSBjYW4gbG9hZCBiZWZvcmUgYWN0dWFsIGZpbGVzIGdldCBkZWxldGVkIGJ5IGNsZWFudXAoKS4KcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CnNsZWVwKCA1ICk7IC8vIFBhdXNlIHNlcnZlci1zaWRlIGJyaWVmbHkgdG8gZ2l2ZSB0aW1lIGZvciB0aGVpciBicm93c2VyIHRvIGxvYWQgYXNzZXRzLgpwYl9iYWNrdXBidWRkeTo6Zmx1c2goKTsKCgovLyBDbGVhbnVwIQpjbGVhbnVwKCk7CgoKZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPmpRdWVyeSgiI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciKS5oaWRlKCk7PC9zY3JpcHQ+JzsKCmVjaG8gJ1RoaXMgc3RlcCBoYW5kbGVzIGRlbGV0aW5nIGZpbGVzLiBJbiByYXJlIGluc3RhbmNlcyBvbiBzb21lIHNlcnZlcnMgeW91IG1heSByZWNlaXZlIGVycm9ycyBsb2FkaW5nIGZpbGVzIG9yIGFuIHVuc3R5bGVkIHBhZ2UgaGVyZSBkdWUgdG8gZmlsZXMgZ2V0dGluZyBkZWxldGluZyBwcmVtYXR1cmVseSBiZWZvcmUgdGhlIHBhZ2UgY29tcGxldGVzIGxvYWRpbmcuIFRoaXMgbWF5IHNhZmVseSBiZSBpZ25vcmVkLiBJdCBpcyBjb21tb24gdG8gbm90IGJlIGFibGUgdG8gZGVsZXRlIHNvbWUgZmlsZXMgZHVlIHRvIHBlcm1pc3Npb24gZXJyb3JzLiBZb3UgbWF5IG1hbnVhbGx5IGRlbGV0ZSB0aGVtLiA8Yj5pbXBvcnRidWRkeS5waHA8L2I+IHNob3VsZCBhbHdheXMgYmUgZGVsZXRlZCBhZnRlciByZXN0b3JlIGZvciBiZXN0IHNlY3VyaXR5Ljxicj48YnI+JzsKCmVjaG8gJzxoMyBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+WW91ciBzaXRlIGlzIHJlYWR5IHRvIGdvIGF0PGJyPjxicj4nOwplY2hvICc8YSBocmVmPSInIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydob21lJ10gLiAnIiB0YXJnZXQ9Il9uZXciPjxiPicgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2hvbWUnXSAuICc8L2I+PC9hPjxicj48YnI+JzsKZWNobyAnVGhhbmsgeW91IGZvciBjaG9vc2luZyBCYWNrdXBCdWRkeSE8L2gzPic7CgoKZWNobyAnPC9kaXY+PC9kaXY+PGJyPjxicj48YnI+JzsKPz4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/html_6.php,importbuddy/views/html_6.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoKLy9wcmludF9yKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoKSApOwoKJGNwYW5lbF91c2VyID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3VzZXInICk7CiRjcGFuZWxfcGFzc3dvcmQgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfcGFzcycgKTsKJGNwYW5lbF9ob3N0ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3VybCcgKTsKJGNwYW5lbF9wb3J0ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3BvcnQnICk7CiRkYl9uYW1lID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX2RibmFtZScgKTsKJGRiX3VzZXIgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfZGJ1c2VyJyApOwokZGJfcGFzcyA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2NwYW5lbF9kYnBhc3MnICk7CgovLyBOZWVkZWQgZm9yIEhUVFAgcmVxdWVzdHMuCiRyZXF1ZXN0Y29yZV9maWxlID0gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9yZXF1ZXN0Y29yZS9yZXF1ZXN0Y29yZS5jbGFzcy5waHAnOwpyZXF1aXJlX29uY2UoICRyZXF1ZXN0Y29yZV9maWxlICk7CgpyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvY3BhbmVsL2NwYW5lbC5waHAnICk7CiRjcmVhdGVfZGJfcmVzdWx0ID0gcGJfYmFja3VwYnVkZHlfY3BhbmVsOjpjcmVhdGVfZGIoICRjcGFuZWxfdXNlciwgJGNwYW5lbF9wYXNzd29yZCwgJGNwYW5lbF9ob3N0LCAkZGJfbmFtZSwgJGRiX3VzZXIsICRkYl9wYXNzLCAkY3BhbmVsX3BvcnQgKTsKCmlmICggJGNyZWF0ZV9kYl9yZXN1bHQgPT09IHRydWUgKSB7CgllY2hvICdTdWNjZXNzISBDcmVhdGVkIGRhdGFiYXNlLCB1c2VyLCBhbmQgYXNzaWduZWQgdXNlciB0byBkYXRhYmFzZS4nOwp9IGVsc2UgewoJZWNobyAiVW5hYmxlIHRvIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGRhdGFiYXNlIHdpdGggdGhlIHByb3ZpZGVkIHNldHRpbmdzLiBDaGVjayBzZXR0aW5ncyBvciBtYW51YWxseSBjcmVhdGUgdGhlIGRhdGFiYXNlIGZyb20geW91ciBob3N0J3MgY29udHJvbCBwYW5lbC4gU2VlIHR1dG9yaWFsIGF0OiAiOwoJZWNobyAiaHR0cDovL2l0aGVtZXMuY29tL3R1dG9yaWFsLWNyZWF0ZS1kYXRhYmFzZS1pbi1jcGFuZWwvXG5cbiI7CgllY2hvICJFcnJvciBkZXRhaWxzOlxuIiAuIGltcGxvZGUoICJcbiIsICRjcmVhdGVfZGJfcmVzdWx0KTsKfQoKZGllKCk7Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/create_admin.php,importbuddy/controllers/ajax/create_admin.php
PD9waHAKZGllKCAnPGh0bWw+PC9odG1sPicgKTsgLy8gRElTQUJMRUQuCgpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgppZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ3dwLWxvYWQucGhwJyApICkgewoJb2Jfc3RhcnQoICdvYl9lcnJvcl9oYW5kbGVyJyApOyAvL1N1cHByZXNzIGVycm9ycwoJcmVxdWlyZV9vbmNlKCBBQlNQQVRIIC4gJ3dwLWxvYWQucGhwJyApOwoJb2JfZW5kX2NsZWFuKCk7Cn0gZWxzZSB7CglkaWUoICdVbmFibGUgdG8gZmluZCBXb3JkUHJlc3MgZmlsZXMgdG8gbG9hZCAod3AtbG9hZC5waHApLiBWZXJpZnkgeW91ciBXb3JkUHJlc3Mgc2l0ZSBpcyBmdW5jdGlvbmFsIGFuZCBhYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlLicgKTsKfQoKJHVzZXIgPSBnZXRfdXNlcl9ieSggJ2xvZ2luJywgJHNlYXJjaF9zdHJpbmcgKTsKaWYgKCAkdXNlciApIGRpZSgganNvbl9lbmNvZGUoICR1c2VyICkgKTsK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/create_admin.php,importbuddy/controllers/ajax/create_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgokZmlsZSA9IEFCU1BBVEggLiBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdmaWxlJyApOwoKaWYgKCAnJyA9PSAkZmlsZSApIHsKCWRpZSggJ05vIGZpbGUgcGFzc2VkLicgKTsKfQppZiAoICEgZmlsZV9leGlzdHMoICRmaWxlICkgKSB7CglkaWUoICdGaWxlIG5vdCBmb3VuZC4nICk7Cn0KCiRmaWxlSGFzaCA9IEBtZDVfZmlsZSggJGZpbGUgKTsKCmlmICggZmFsc2UgPT09ICRmaWxlSGFzaCApIHsKCWRpZSggJ1VuYWJsZSB0byBjYWxjdWxhdGUgaGFzaC4gVmVyaWZ5IGZpbGUgcGVybWlzc2lvbnMuJyApOwp9IGVsc2UgewoJZGllKCBqc29uX2VuY29kZSggYXJyYXkoICdoYXNoJyA9PiAkZmlsZUhhc2ggKSApICk7Cn0=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/1.php,importbuddy/controllers/pages/1.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgovLyBPbiBpbml0aWFsIGxvZ2luIHRvIFN0ZXAgMSAoY2hlY2tzIGZvciBwYXNzd29yZCBmaWVsZCBmcm9tIGF1dGggZm9ybSkgcmVzZXQgYW55IGRhbmdsaW5nIGRlZmF1bHRzIGZyb20gYSBwYXJ0aWFsIHJlc3RvcmUuCmlmICggKCB0cnVlID09PSBBdXRoOjppc19hdXRoZW50aWNhdGVkKCkgKSAmJiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApICE9ICcnICkgKSB7CglwYl9iYWNrdXBidWRkeTo6cmVzZXRfZGVmYXVsdHMoKTsKfQoKCi8qKgogKgl1cGxvYWQoKQogKgogKglQcm9jZXNzZXMgdXBsb2FkZWQgYmFja3VwIGZpbGUuCiAqCiAqCUByZXR1cm4JCWFycmF5CQlUcnVlIG9uIHVwbG9hZCBzdWNjZXNzOyBmYWxzZSBvdGhlcndpc2UuCiAqLwpmdW5jdGlvbiB1cGxvYWQoKSB7CgkKCUF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsKCQoJaWYgKCBpc3NldCggJF9QT1NUWyd1cGxvYWQnXSApICYmICggJF9QT1NUWyd1cGxvYWQnXSA9PSAnbG9jYWwnICkgKSB7CgkJJHBhdGhfcGFydHMgPSBwYXRoaW5mbyggJF9GSUxFU1snZmlsZSddWyduYW1lJ10gKTsKCQlpZiAoICggc3RydG9sb3dlciggc3Vic3RyKCAkX0ZJTEVTWydmaWxlJ11bJ25hbWUnXSwgMCwgNiApICkgPT0gJ2JhY2t1cCcgKSAmJiAoIHN0cnRvbG93ZXIoICRwYXRoX3BhcnRzWydleHRlbnNpb24nXSApID09ICd6aXAnICkgKSB7CgkJCWlmICggbW92ZV91cGxvYWRlZF9maWxlKCAkX0ZJTEVTWydmaWxlJ11bJ3RtcF9uYW1lJ10sIGJhc2VuYW1lKCAkX0ZJTEVTWydmaWxlJ11bJ25hbWUnXSApICkgKSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdGaWxlIFVwbG9hZGVkLiBZb3VyIGJhY2t1cCB3YXMgc3VjY2Vzc2Z1bGx5IHVwbG9hZGVkLicgKTsKCQkJCXJldHVybiB0cnVlOwoJCQl9IGVsc2UgewoJCQkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gdXBsb2FkaW5nIHlvdXIgZmlsZS4nLCB0cnVlICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9IGVsc2UgewoJCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdPbmx5IHByb3Blcmx5IG5hbWVkIEJhY2t1cEJ1ZGR5IHppcCBhcmNoaXZlcyB3aXRoIGEgemlwIGV4dGVuc2lvbiBtYXkgYmUgdXBsb2FkZWQuJywgdHJ1ZSApOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfQoJCgkvLyBET1dOTE9BRCBGSUxFIEZST00gU1RBU0ggVE8gTE9DQUwuCglpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3VwbG9hZCcgKSA9PSAnc3Rhc2gnICkgewoJCQoJCXBiX2JhY2t1cGJ1ZGR5OjpzZXRfZ3JlZWR5X3NjcmlwdF9saW1pdHMoIHRydWUgKTsKCQkKCQkvKgoJCWVjaG8gJzxwcmU+JzsKCQlwcmludF9yKCAkX1BPU1QgKTsKCQllY2hvICc8L3ByZT4nOwoJCSovCgkJCgkJJHJlcXVlc3Rjb3JlX2ZpbGUgPSBkaXJuYW1lKCBkaXJuYW1lKCBkaXJuYW1lKCBfX0ZJTEVfXyApICkgKSAuICcvbGliL3JlcXVlc3Rjb3JlL3JlcXVlc3Rjb3JlLmNsYXNzLnBocCc7CgkJcmVxdWlyZV9vbmNlKCAkcmVxdWVzdGNvcmVfZmlsZSApOwoJCQoJCSRsaW5rID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbGluaycgKTsKCQkkZGVzdGluYXRpb25fZmlsZSA9IGRpcm5hbWUoIGRpcm5hbWUoIGRpcm5hbWUoIGRpcm5hbWUoIF9fRklMRV9fICkgKSApICkgLiAnLycgLiBiYXNlbmFtZSggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbGluaycgKSApOwoJCSRkZXN0aW5hdGlvbl9maWxlID0gc3Vic3RyKCAkZGVzdGluYXRpb25fZmlsZSwgMCwgc3RyaXBvcyggJGRlc3RpbmF0aW9uX2ZpbGUsICcuemlwJyApICsgNCApOwoJCQoJCSRfR0VUWydmaWxlJ10gPSBiYXNlbmFtZSggJGRlc3RpbmF0aW9uX2ZpbGUgKTsKCQkKCQkkcmVxdWVzdCA9IG5ldyBSZXF1ZXN0Q29yZSggJGxpbmsgKTsKCQkkcmVxdWVzdC0+c2V0X3dyaXRlX2ZpbGUoICRkZXN0aW5hdGlvbl9maWxlICk7CgkJCgkJZWNobyAnPGRpdiBpZD0icGJfaW1wb3J0YnVkZHlfd29ya2luZyIgc3R5bGU9InBhZGRpbmc6IDIwcHg7Ij5Eb3dubG9hZGluZyBiYWNrdXAgZnJvbSBTdGFzaCB0byBgJyAuICRkZXN0aW5hdGlvbl9maWxlIC4gJ2AuLi48YnI+PGJyPjxpbWcgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL2xvYWRpbmdfbGFyZ2UuZ2lmIiB0aXRsZT0iV29ya2luZy4uLiBQbGVhc2Ugd2FpdCBhcyB0aGlzIG1heSB0YWtlIGEgbW9tZW50Li4uIj48YnI+PGJyPjwvZGl2Pic7CgkJcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgkJCgkJJHJlc3BvbnNlID0gJHJlcXVlc3QtPnNlbmRfcmVxdWVzdCggZmFsc2UgKTsKCQlpZiAoICRyZXNwb25zZSAhPT0gdHJ1ZSApIHsKCQkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnRXJyb3IgIzg1NDg0NTk1OTguIFVuYWJsZSB0byBkb3dubG9hZCBmaWxlIGZyb20gU3Rhc2guIFlvdSBtYXkgbWFudWFsbHkgZG93bmxvYWQgaXQgYW5kIHVwbG9hZCB0byB0aGUgc2VydmVyIHZpYSBGVFAuJyApOwoJCX0gZWxzZSB7IC8vIE5vIGVycm9yLgoJCQlpZiAoICEgZmlsZV9leGlzdHMoICRkZXN0aW5hdGlvbl9maWxlICkgKSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdFcnJvciAjMzQ4NDU3NDU4NzguIFN0YXNoIHJldHVybmVkIGEgc3VjY2VzcyBidXQgdGhlIGJhY2t1cCBmaWxlIHdhcyBub3QgZm91bmQgbG9jYWxseS4gQ2hlY2sgdGhpcyBzZXJ2ZXJcJ3MgZGlyZWN0b3J5IHdyaXRlIHBlcm1pc3Npb25zLiBZb3UgbWF5IG1hbnVhbGx5IGRvd25sb2FkIGl0IGFuZCB1cGxvYWQgdG8gdGhlIHNlcnZlciB2aWEgRlRQLicgKTsKCQkJfQoJCX0KCQkKCQllY2hvICc8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+alF1ZXJ5KCIjcGJfaW1wb3J0YnVkZHlfd29ya2luZyIpLmhpZGUoKTs8L3NjcmlwdD4nOwoJCQoJfQp9CgoKLyoqCiAqCWdldF9hcmNoaXZlc19saXN0KCkKICoKICoJUmV0dXJucyBhbiBhcnJheSBvZiBiYWNrdXAgYXJjaGl2ZSB6aXAgZmlsZW5hbWVzIGZvdW5kLgogKgogKglAcmV0dXJuCQlhcnJheQkJQXJyYXkgb2YgLnppcCBmaWxlbmFtZXM7IHBhdGggTk9UIGluY2x1ZGVkLgogKi8KZnVuY3Rpb24gZ2V0X2FyY2hpdmVzX2xpc3QoKSB7CgkKCUF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsKCQoJaWYgKCAhaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snemlwYnVkZHknXSApICkgewoJCXJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi96aXBidWRkeS96aXBidWRkeS5waHAnICk7CgkJcGJfYmFja3VwYnVkZHk6OiRjbGFzc2VzWyd6aXBidWRkeSddID0gbmV3IHBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5KCBBQlNQQVRIICk7Cgl9CgkKCS8vIExpc3QgYmFja3VwIGZpbGVzIGluIHRoaXMgZGlyZWN0b3J5LgoJJGJhY2t1cF9hcmNoaXZlcyA9IGFycmF5KCk7CgkkYmFja3VwX2FyY2hpdmVzX2dsb2IgPSBnbG9iKCBBQlNQQVRIIC4gJ2JhY2t1cCouemlwJyApOwoJaWYgKCAhaXNfYXJyYXkoICRiYWNrdXBfYXJjaGl2ZXNfZ2xvYiApIHx8IGVtcHR5KCAkYmFja3VwX2FyY2hpdmVzX2dsb2IgKSApIHsgLy8gT24gZmFpbHVyZSBnbG9iKCkgcmV0dXJucyBmYWxzZSBvciBhbiBlbXB0eSBhcnJheSBkZXBlbmRpbmcgb24gc2VydmVyIHNldHRpbmdzIHNvIG5vcm1hbGl6ZSBoZXJlLgoJCSRiYWNrdXBfYXJjaGl2ZXNfZ2xvYiA9IGFycmF5KCk7Cgl9Cglmb3JlYWNoKCAkYmFja3VwX2FyY2hpdmVzX2dsb2IgYXMgJGJhY2t1cF9hcmNoaXZlICkgewoJCSRjb21tZW50ID0gcGJfYmFja3VwYnVkZHk6OiRjbGFzc2VzWyd6aXBidWRkeSddLT5nZXRfY29tbWVudCggJGJhY2t1cF9hcmNoaXZlICk7CgkJJGNvbW1lbnQgPSBiYWNrdXBidWRkeV9jb3JlOjpub3JtYWxpemVfY29tbWVudF9kYXRhKCAkY29tbWVudCApOwoJCQoJCSR0aGlzX2FyY2hpdmUgPSBhcnJheSgKCQkJJ2ZpbGUnCQk9PgkJYmFzZW5hbWUoICRiYWNrdXBfYXJjaGl2ZSApLAoJCQknY29tbWVudCcJPT4JCSRjb21tZW50LAoJCSk7CgkJJGJhY2t1cF9hcmNoaXZlc1tdID0gJHRoaXNfYXJjaGl2ZTsKCX0KCXVuc2V0KCAkYmFja3VwX2FyY2hpdmVzX2dsb2IgKTsKCQoJCglyZXR1cm4gJGJhY2t1cF9hcmNoaXZlczsKfQoKCi8qKgogKgl3b3JkcHJlc3NfZXhpc3RzKCkKICoKICoJTm90aWZpZXMgdGhlIHVzZXIgd2l0aCBhbiBhbGVydCBpZiBXb3JkUHJlc3MgYXBwZWFycyB0byBhbHJlYWR5IGV4aXN0IGluIHRoaXMgZGlyZWN0b3J5LgogKgogKglAcmV0dXJuCQlib29sZWFuCQlUcnVlIGlmIFdvcmRQcmVzcyBhbHJlYWR5IGV4aXN0czsgZmFsc2Ugb3RoZXJ3aXNlLgogKi8KZnVuY3Rpb24gd29yZHByZXNzX2V4aXN0cygpIHsKCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnd3AtY29uZmlnLnBocCcgKSApIHsKCQlyZXR1cm4gdHJ1ZTsKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlOwoJfQp9CgoKZnVuY3Rpb24gcGhwaW5pX2V4aXN0cygpIHsKCXJldHVybiBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICdwaHAuaW5pJyApOwp9CgoKZnVuY3Rpb24gaHRhY2Nlc3NfZXhpc3RzKCkgewoJcmV0dXJuIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJy5odGFjY2VzcycgKTsKfQoKCmZ1bmN0aW9uIGluZGV4X2V4aXN0cygpIHsKCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnaW5kZXguaHRtJyApID09PSB0cnVlICkgewoJCXJldHVybiB0cnVlOwoJfQoJaWYgKCBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICdpbmRleC5odG1sJyApID09PSB0cnVlICkgewoJCXJldHVybiB0cnVlOwoJfQp9CgoKcGJfYmFja3VwYnVkZHk6OmxvYWRfdmlldyggJ2h0bWxfMScgKTsKCi8vIExPRyBJTVBPUlRCVUREWSBWRVJTSU9OIElORk9STUFUSU9OLgpwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdSdW5uaW5nIEltcG9ydEJ1ZGR5IHYnIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydiYl92ZXJzaW9uJ10gLiAnLicgKTsKCj8+Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/1.php,importbuddy/controllers/pages/1.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/2.php,importbuddy/controllers/pages/2.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/2.php,importbuddy/controllers/pages/2.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/3.php,importbuddy/controllers/pages/3.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoKJGRhdGEgPSBhcnJheSgKCSdzdGVwJwkJPT4JCSczJywKKTsKCgpwYl9iYWNrdXBidWRkeTo6c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCB0cnVlICk7CgoKCgpmdW5jdGlvbiBnZXRfcHJldmlvdXNfZGF0YWJhc2Vfc2V0dGluZ3MoKSB7CgkvLyBJZiBpbiBoaWdoIHNlY3VyaXR5IG1vZGUgdGhlbiBubyBndWVzc2VzIG9yIHByZXZpb3VzIHZhbHVlcyB3aWxsIGJlIGdpdmVuLgoJaWYgKCAoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZm9yY2VfaGlnaF9zZWN1cml0eSddICE9IGZhbHNlICkgfHwgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWydoaWdoX3NlY3VyaXR5J10gKSAmJiAoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnaGlnaF9zZWN1cml0eSddID09PSB0cnVlICkgKSApIHsKCQkkcmVzcG9uc2VbJ3NlcnZlciddID0gJyc7CgkJJHJlc3BvbnNlWydkYXRhYmFzZSddID0gJyc7CgkJJHJlc3BvbnNlWyd1c2VyJ10gPSAnJzsKCQkkcmVzcG9uc2VbJ3Bhc3N3b3JkJ10gPSAnJzsKCQkkcmVzcG9uc2VbJ3ByZWZpeCddID0gJyc7CgkJcmV0dXJuICRyZXNwb25zZTsKCX0gZWxzZSB7IC8vIG5vcm1hbCBtb2RlLiBwcm92aWRlIHByZXZpb3VzIHZhbHVlcy4KCQkkcmVzcG9uc2VbJ3NlcnZlciddID0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWydkYl9zZXJ2ZXInXTsKCQkkcmVzcG9uc2VbJ2RhdGFiYXNlJ10gPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX25hbWUnXTsKCQkkcmVzcG9uc2VbJ3VzZXInXSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfdXNlciddOwoJCSRyZXNwb25zZVsncGFzc3dvcmQnXSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfcGFzc3dvcmQnXTsKCQkkcmVzcG9uc2VbJ3ByZWZpeCddID0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWydkYl9wcmVmaXgnXTsKCQlyZXR1cm4gJHJlc3BvbnNlOwoJfQp9CgoKLyoqCiAqCWdldF9kZWZhdWx0X3ZhbHVlcygpCiAqCiAqCVBhcnNlcyB2YXJpb3VzIHN1Ym1pdHRlZCBvcHRpb25zIGFuZCBzZXR0aW5ncyBmcm9tIHN0ZXAgMS4KICoKICoJQHJldHVybgkJbnVsbAogKi8KZnVuY3Rpb24gZ2V0X2RhdGFiYXNlX2RlZmF1bHRzKCkgewoJLy8gRGF0YWJhc2UgZGVmYXVsdHMuCgkkcmVzcG9uc2VbJ3NlcnZlciddID0gJ2xvY2FsaG9zdCc7CgkkcmVzcG9uc2VbJ2RhdGFiYXNlJ10gPSAnJzsKCSRyZXNwb25zZVsndXNlciddID0gJyc7CgkkcmVzcG9uc2VbJ3Bhc3N3b3JkJ10gPSAnJzsKCSRyZXNwb25zZVsncHJlZml4J10gPSAnd3BfJzsKCSRyZXNwb25zZVsnd2lwZSddID0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWyd3aXBlX2RhdGFiYXNlJ107IC8vIGp1c3QgdGFibGVzIG1hdGNoaW5nIHByZWZpeAoJJHJlc3BvbnNlWyd3aXBlX2FsbCddID0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWyd3aXBlX2RhdGFiYXNlX2FsbCddOyAvLyBhbGwgdGFibGVzCgkKCWlmICggY291bnQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXSApID09IDAgKSB7CgkJZGllKCAnRXJyb3IgIzg1NDg5NC4gREFUIGZpbGUgY29udGVudHMgdW5leHBlY3RlZGx5IHdlbnQgbWlzc2luZy4gVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSBpbXBvcnQgcHJvY2VzcyB3YXMgcmVzZXQuIFBvc3NpYmxlIGNhdXNlczpUaGUgaW1wb3J0IHByb2Nlc3Mgd2FzIHJlc3RhcnRlZCBpbiBhbm90aGVyIGJyb3dzZXIgb3IgdGFiLCB0aGUgYmFja3VwIFpJUCBmaWxlIHdhcyByZW5hbWVkIGZyb20gaXRzIG9yaWdpbmFsIGZpbGVuYW1lLCBvciBwZXJtaXNzaW9ucyBuZWVkIHJlc2V0IHJlY3Vyc2l2ZWx5IG9uIGFsbCBmaWxlcyBmcm9tIHlvdXIgd2Vicm9vdC4nICk7Cgl9CgkKCS8vIElmIGluIGhpZ2ggc2VjdXJpdHkgbW9kZSB0aGVuIG5vIGd1ZXNzZXMgb3IgcHJldmlvdXMgdmFsdWVzIHdpbGwgYmUgZ2l2ZW4uCglpZiAoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2hpZ2hfc2VjdXJpdHknXSApICYmICggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWydoaWdoX3NlY3VyaXR5J10gPT09IHRydWUgKSApIHsgCgkJcmV0dXJuICRyZXNwb25zZTsKCX0KCQoJLyoKCQoJVE9ETzogRnV0dXJlOiBUaGlzIG1heSBuZWVkIHRvIGJlIGRvbmUgd2l0aCBBSkFYIGlmIGF0IGFsbCBiZWNhdXNlIHNvbWV0aW1lcyB3ZSBjYW5ub3Qgb3ZlcnJpZGUgdGltZW91dCBhbmQgaXQgaGFuZ3MgdGhlIHBhZ2UuCgkKCSRvbGRfY29ubmVjdF90aW1lb3V0ID0gQGluaV9nZXQoICdteXNxbC5jb25uZWN0X3RpbWVvdXQnICk7Cgkkb2xkX3NvY2tldF90aW1lb3V0ID0gQGluaV9nZXQoICdkZWZhdWx0X3NvY2tldF90aW1lb3V0JyApOwoJQGluaV9zZXQoICdteXNxbC5jb25uZWN0X3RpbWVvdXQnLCA1ICk7CglAaW5pX3NldCggJ2RlZmF1bHRfc29ja2V0X3RpbWVvdXQnLCA1ICk7CgkKCWlmICggZmFsc2UgIT09IEBteXNxbF9jb25uZWN0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX3NlcnZlciddLCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX3VzZXInXSwgcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWydkYl9wYXNzd29yZCddICkgKSB7IC8vIENvdWxkbnQgY29ubmVjdCB0byBzZXJ2ZXIgb3IgaW52YWxpZCBjcmVkZW50aWFscy4KCQkkcmVzcG9uc2VbJ3NlcnZlciddID0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWydkYl9zZXJ2ZXInXTsKCQkkcmVzcG9uc2VbJ3VzZXInXSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfdXNlciddOwoJCSRyZXNwb25zZVsncGFzc3dvcmQnXSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfcGFzc3dvcmQnXTsKCQkKCQlpZiAoIGZhbHNlICE9PSBAbXlzcWxfc2VsZWN0X2RiKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX25hbWUnXSApICkgewoJCQkkcmVzcG9uc2VbJ2RhdGFiYXNlJ10gPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX25hbWUnXTsKCQkJCgkJCSRyZXN1bHQgPSBteXNxbF9xdWVyeSggIlNIT1cgVEFCTEVTIExJS0UgJyIgLiBteXNxbF9yZWFsX2VzY2FwZV9zdHJpbmcoIHN0cl9yZXBsYWNlKCAnXycsICdcXycsIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfcHJlZml4J10gKSApIC4gIiUnIiApOwoJCQlpZiAoIG15c3FsX251bV9yb3dzKCAkcmVzdWx0ICkgPT0gMCApIHsKCQkJCSRyZXNwb25zZVsncHJlZml4J10gPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX3ByZWZpeCddOwoJCQl9CgkJfQoJfQoJCglAaW5pX3NldCggJ215c3FsLmNvbm5lY3RfdGltZW91dCcsICRvbGRfY29ubmVjdF90aW1lb3V0ICk7CglAaW5pX3NldCggJ2RlZmF1bHRfc29ja2V0X3RpbWVvdXQnLCAkb2xkX3NvY2tldF90aW1lb3V0ICk7CgkqLwoJCgkKCSRyZXNwb25zZVsnc2VydmVyJ10gPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX3NlcnZlciddOwoJJHJlc3BvbnNlWyd1c2VyJ10gPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2RiX3VzZXInXTsKCSRyZXNwb25zZVsncGFzc3dvcmQnXSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfcGFzc3dvcmQnXTsKCSRyZXNwb25zZVsnZGF0YWJhc2UnXSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfbmFtZSddOwoJJHJlc3BvbnNlWydwcmVmaXgnXSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnZGJfcHJlZml4J107CglpZiAoIHN1YnN0cl9jb3VudCggJHJlc3BvbnNlWydwcmVmaXgnXSwgJ18nICkgPiAxICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0ltcG9ydGFudDogWW91ciBvbGQgZGF0YWJhc2UgcHJlZml4IGNvbnRhaW5lZCBtb3JlIHRoYW4gb25lIHVuZGVyc2NvcmUuIFdlIGhpZ2hseSBzdWdnZXN0IGltcG9ydGluZyB1c2luZyBhIHByZWZpeCBiZWxvdyBpbiB0aGUgRGF0YWJhc2UgU2V0dGluZ3Mgd2l0aCBvbmx5IG9uZSB1bmRlcnNjb3JlIHRvIG1heGltaXplIGNvbXBhdGliaWxpdHkuJyApOwoJCSRyZXNwb25zZVsncHJlZml4J10gPSAnJzsKCX0KCQoJCglyZXR1cm4gJHJlc3BvbnNlOwp9CgoKLyoqCiAqCWdldF9kZWZhdWx0X3VybCgpCiAqCiAqCVJldHVybnMgdGhlIGRlZmF1bHQgc2l0ZSBVUkwuCiAqCiAqCUByZXR1cm4JCXN0cmluZwkJVVJMLgogKi8KZnVuY3Rpb24gZ2V0X2RlZmF1bHRfdXJsKCkgewoJLy8gR2V0IHRoZSBjdXJyZW50IFVSTCBvZiB3aGVyZSB0aGUgaW1wb3J0YnVkZHkgdG9vbCBpcyBydW5uaW5nLgoJJHVybCA9IHN0cl9yZXBsYWNlKCAkX1NFUlZFUlsnUVVFUllfU1RSSU5HJ10sICcnLCAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXSApOwoJJHVybCA9IHN0cl9yZXBsYWNlKCBiYXNlbmFtZSggJHVybCApICwgJycsICR1cmwgKTsKCSR1cmwgPSBwcmVnX3JlcGxhY2UoICd8LyokfCcsICcnLCAkdXJsICk7ICAvLyBzdHJpcHMgdHJhaWxpbmcgc2xhc2goZXMpLgoJJHVybCA9ICdodHRwOi8vJyAuICRfU0VSVkVSWydIVFRQX0hPU1QnXSAuICR1cmw7CgkKCXJldHVybiAkdXJsOwp9CgoKZnVuY3Rpb24gZ2V0X2RlZmF1bHRfZG9tYWluKCkgewoJcHJlZ19tYXRjaCgiL14oaHR0cDpcL1wvKT8oW15cL10rKS9pIiwgZ2V0X2RlZmF1bHRfdXJsKCksICRkb21haW4gKTsKCXJldHVybiAkZG9tYWluWzJdOwp9CgoKCgpwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnaHRtbF8zJywgJGRhdGEgKTsKPz4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/3.php,importbuddy/controllers/pages/3.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/4.php,importbuddy/controllers/pages/4.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/4.php,importbuddy/controllers/pages/4.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/5.php,importbuddy/controllers/pages/5.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoKJGRhdGEgPSBhcnJheSgKCSdzdGVwJwkJPT4JCSc1JywKKTsKCgpwYl9iYWNrdXBidWRkeTo6c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCB0cnVlICk7CgoKCgovKioKICoJbWlncmF0ZV9kYXRhYmFzZSgpCiAqCiAqCUNvbm5lY3RzIGRhdGFiYXNlIGFuZCBwZXJmb3JtcyBtaWdyYXRpb24gb2YgREIgY29udGVudC4gSGFuZGxlcyBza2lwcGluZy4KICoKICoJQHJldHVybgkJbnVsbAogKi8KZnVuY3Rpb24gbWlncmF0ZV9kYXRhYmFzZSgpIHsKCXBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10tPmNvbm5lY3RfZGF0YWJhc2UoKTsKCQoJaWYgKCBmYWxzZSA9PT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydza2lwX2RhdGFiYXNlX21pZ3JhdGlvbiddICkgewoJCXJldHVybiBwYl9iYWNrdXBidWRkeTo6JGNsYXNzZXNbJ2ltcG9ydCddLT5taWdyYXRlX2RhdGFiYXNlKCk7Cgl9IGVsc2UgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1NraXBwaW5nIGRhdGFiYXNlIG1pZ3JhdGlvbiBiYXNlZCBvbiBzZXR0aW5ncy4nICk7CgkJcmV0dXJuIHRydWU7Cgl9Cn0KCgovKioKICoJbWlncmF0ZV93cF9jb25maWcoKQogKgogKglQYXNzdGhyb3VnaCBmb3Igc3V0dXJlIHVzZTsgdHJ5aW5nIHRvIGZ1bm5lbCBhbGwgZXNzZW50aWFsIG1pZ3JhdGlvbiBzdGVwcyB0aHJvdWdoIHRoZSBBUEkgZmlsZXMuCiAqCiAqCUByZXR1cm4JCXRydWUgb24gc3VjY2VzcywgbmV3IHdwIGNvbmZpZyBmaWxlIGNvbnRlbnQgb24gZmFpbHVyZS4KICovCmZ1bmN0aW9uIG1pZ3JhdGVfd3BfY29uZmlnKCkgewoJaWYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWyd3cC1jb25maWdfaW5fcGFyZW50J10gKSApIHsKCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGF0X2ZpbGUnXVsnd3AtY29uZmlnX2luX3BhcmVudCddID09PSB0cnVlICkgeyAvLyB3cC1jb25maWcucGhwIHVzZWQgdG8gYmUgaW4gcGFyZW50LiBNdXN0IGNvcHkgZnJvbSB0ZW1wIGRpciB0byByb290LgoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdEQVQgZmlsZSBpbmRpY2F0ZXMgd3AtY29uZmlnLnBocCB3YXMgcHJldmlvdXNseSBpbiB0aGUgcGFyZW50IGRpcmVjdG9yeS4gQ29weWluZyBpbnRvIHNpdGUgcm9vdC4nICk7CgkJCQoJCQkkY29uZmlnX3NvdXJjZSA9IEFCU1BBVEggLiAnd3AtY29udGVudC91cGxvYWRzL2JhY2t1cGJ1ZGR5X3RlbXAvJyAuIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snemlwX2lkJ10gLiAnL3dwLWNvbmZpZy5waHAnOwoJCQkkcmVzdWx0ID0gY29weSggJGNvbmZpZ19zb3VyY2UsIEFCU1BBVEggLiAnd3AtY29uZmlnLnBocCcgKTsKCQkJaWYgKCAkcmVzdWx0ID09PSB0cnVlICkgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnd3AtY29uZmlnLnBocCBmaWxlIHdhcyByZXN0b3JlZCB0byB0aGUgcm9vdCBvZiB0aGUgc2l0ZSBgJyAuIEFCU1BBVEggLiAnd3AtY29uZmlnLnBocGAuIEl0IHdhcyBwcmV2aW91c2x5IGluIHRoZSBwYXJlbnQgZGlyZWN0b3J5IG9mIHRoZSBzb3VyY2Ugc2l0ZS4gWW91IG1heSBtb3ZlIGl0IG1hbnVhbGx5IHRvIHRoZSBwYXJlbnQgZGlyZWN0b3J5LicgKTsKCQkJfSBlbHNlIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdVbmFibGUgdG8gbW92ZSB3cC1jb25maWcucGhwIGZpbGUgZnJvbSB0ZW1wb3JhcnkgbG9jYXRpb24gYCcgLiAkY29uZmlnX3NvdXJjZSAuICdgIHRvIHJvb3QuJyApOwoJCQl9CgkJCQoJCX0gZWxzZSB7IC8vIHdwLWNvbmZpZy5waHAgd2FzIGluIG5vcm1hbCBsb2NhdGlvbiBvbiBzb3VyY2Ugc2l0ZS4gTm90aGluZyB0byBkby4KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnREFUIGZpbGUgaW5kaWNhdGVzIHdwLWNvbmZpZy5waHAgd2FzIHByZXZpb3VzbHkgaW4gdGhlIG5vcm1hbCBsb2NhdGlvbi4nICk7CgkJfQoJfSBlbHNlIHsgLy8gUHJlIDMuMCBiYWNrdXAKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdCYWNrdXAgcHJlLXYzLjAgc28gd3AtY29uZmlnLnBocCBtdXN0IGJlIGluIG5vcm1hbCBsb2NhdGlvbi4nICk7Cgl9CgkKCWlmICggJ2ZpbGVzJyA9PSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RhdF9maWxlJ11bJ2JhY2t1cF90eXBlJ10gKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnU2tpcHBpbmcgdXBkYXRlIG9mIERhdGFiYXNlIFNldHRpbmdzIGFuZCBVUkxzIGluIHdwLWNvbmZpZy5waHAgYXMgdGhpcyBpcyBhIEZpbGVzIE9ubHkgQmFja3VwLicgKTsKCQkkbWlncmF0ZVJlc3VsdCA9IHRydWU7Cgl9IGVsc2UgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1VwZGF0aW5nIERhdGFiYXNlIFNldHRpbmdzIGFuZCBVUkxzIGluIHdwLWNvbmZpZy5waHAgYXMgdGhpcyBpcyBub3QgYSBGaWxlcyBPbmx5IEJhY2t1cC4nICk7CgkJJG1pZ3JhdGVSZXN1bHQgPSBwYl9iYWNrdXBidWRkeTo6JGNsYXNzZXNbJ2ltcG9ydCddLT5taWdyYXRlX3dwX2NvbmZpZygpOwoJfQoJcmV0dXJuICRtaWdyYXRlUmVzdWx0Owp9CgoKLyoJdmVyaWZ5X2RhdGFiYXNlKCkKICoJCiAqCVZlcmlmeSB2YXJpb3VzIGNvbnRlbnRzIG9mIHRoZSBkYXRhYmFzZSBhZnRlciBhbGwgbWlncmF0aW9uIGlzIGNvbXBsZXRlLgogKgkKICoJQHBhcmFtCQkKICoJQHJldHVybgkJCiAqLwpmdW5jdGlvbiB2ZXJpZnlfZGF0YWJhc2UoKSB7CgkKCXBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10tPmNvbm5lY3RfZGF0YWJhc2UoKTsKCSRkYl9wcmVmaXggPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RiX3ByZWZpeCddOwoJCgkvLyBDaGVjayBzaXRlIFVSTC4KCSRyZXN1bHQgPSBteXNxbF9xdWVyeSggIlNFTEVDVCBvcHRpb25fdmFsdWUgRlJPTSBgeyRkYl9wcmVmaXh9b3B0aW9uc2AgV0hFUkUgb3B0aW9uX25hbWU9J3NpdGV1cmwnIExJTUlUIDEiICk7CglpZiAoICRyZXN1bHQgPT09IGZhbHNlICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdVbmFibGUgdG8gcmV0cmlldmUgc2l0ZXVybCBmcm9tIGRhdGFiYXNlLiBBIHBvcnRpb24gb2YgdGhlIGRhdGFiYXNlIG1heSBub3QgaGF2ZSBpbXBvcnRlZCAob3Igd2l0aCB0aGUgd3JvbmcgcHJlZml4KS4nICk7Cgl9IGVsc2UgewoJCXdoaWxlKCAkcm93ID0gbXlzcWxfZmV0Y2hfcm93KCAkcmVzdWx0ICkgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0ZpbmFsIHNpdGUgVVJMOiBgJyAuICRyb3dbMF0gLiAnYC4nICk7CgkJfQoJCW15c3FsX2ZyZWVfcmVzdWx0KCAkcmVzdWx0ICk7IC8vIEZyZWUgbWVtb3J5LgoJfQoJCgkvLyBDaGVjayBob21lIFVSTC4KCSRyZXN1bHQgPSBteXNxbF9xdWVyeSggIlNFTEVDVCBvcHRpb25fdmFsdWUgRlJPTSBgeyRkYl9wcmVmaXh9b3B0aW9uc2AgV0hFUkUgb3B0aW9uX25hbWU9J2hvbWUnIExJTUlUIDEiICk7CglpZiAoICRyZXN1bHQgPT09IGZhbHNlICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdVbmFibGUgdG8gcmV0cmlldmUgaG9tZSBbdXJsXSBmcm9tIGRhdGFiYXNlLiBBIHBvcnRpb24gb2YgdGhlIGRhdGFiYXNlIG1heSBub3QgaGF2ZSBpbXBvcnRlZCAob3Igd2l0aCB0aGUgd3JvbmcgcHJlZml4KS4nICk7Cgl9IGVsc2UgewoJCXdoaWxlKCAkcm93ID0gbXlzcWxfZmV0Y2hfcm93KCAkcmVzdWx0ICkgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0ZpbmFsIGhvbWUgVVJMOiBgJyAuICRyb3dbMF0gLiAnYC4nICk7CgkJfQoJfQoJQG15c3FsX2ZyZWVfcmVzdWx0KCAkcmVzdWx0ICk7IC8vIEZyZWUgbWVtb3J5LgoJCgkvLyBWZXJpZnkgbWVkaWEgdXBsb2FkIHBhdGguCgkkcmVzdWx0ID0gbXlzcWxfcXVlcnkoICJTRUxFQ1Qgb3B0aW9uX3ZhbHVlIEZST00gYHskZGJfcHJlZml4fW9wdGlvbnNgIFdIRVJFIG9wdGlvbl9uYW1lPSd1cGxvYWRfcGF0aCcgTElNSVQgMSIgKTsKCWlmICggJHJlc3VsdCA9PT0gZmFsc2UgKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ1VuYWJsZSB0byByZXRyaWV2ZSB1cGxvYWRfcGF0aCBmcm9tIGRhdGFiYXNlIHRhYmxlICcgLiAiYHskZGJfcHJlZml4fW9wdGlvbnNgIiAuICcuIEEgcG9ydGlvbiBvZiB0aGUgZGF0YWJhc2UgbWF5IG5vdCBoYXZlIGltcG9ydGVkIChvciB3aXRoIHRoZSB3cm9uZyBwcmVmaXgpLicgKTsKCQkkbWVkaWFfdXBsb2FkX3BhdGggPSAne0VSUl8zNDgzNDk4NC1VTktOT1dOfSc7Cgl9IGVsc2UgewoJCXdoaWxlKCAkcm93ID0gbXlzcWxfZmV0Y2hfcm93KCAkcmVzdWx0ICkgKSB7CgkJCSRtZWRpYV91cGxvYWRfcGF0aCA9ICRyb3dbMF07CgkJfQoJfQoJQG15c3FsX2ZyZWVfcmVzdWx0KCAkcmVzdWx0ICk7IC8vIEZyZWUgbWVtb3J5LgoJCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdNZWRpYSB1cGxvYWQgcGF0aCBpbiBkYXRhYmFzZSBvcHRpb25zIHRhYmxlOiBgJyAuICRtZWRpYV91cGxvYWRfcGF0aCAuICdgLicgKTsKCWlmICggc3Vic3RyKCAkbWVkaWFfdXBsb2FkX3BhdGgsIDAsIDEgKSA9PSAnLycgKSB7IC8vIEFic29sdXRlIHBhdGguCgkJaWYgKCAhZmlsZV9leGlzdHMoICRtZWRpYV91cGxvYWRfcGF0aCApICkgeyAvLyBNZWRpYSBwYXRoIGRvZXMgbm90IGV4aXN0LgoJCQkkbWVkaWFfdXBsb2FkX21lc3NhZ2UgPSAnWW91ciBtZWRpYSB1cGxvYWQgcGF0aCBpcyBhc3NpZ25lZCBhIGRpcmVjdG9yeSB3aGljaCBkb2VzIG5vdCBhcHBlYXIgdG8gZXhpc3Qgb24gdGhpcyBzZXJ2ZXIuIFBsZWFzZSB2ZXJpZnkgaXQgaXMgY29ycmVjdCBpbiB5b3VyIFdvcmRQcmVzcyBzZXR0aW5ncy4gQ3VycmVudCBwYXRoOiBgJyAuICRtZWRpYV91cGxvYWRfcGF0aCAuICdgLic7CgkJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJG1lZGlhX3VwbG9hZF9tZXNzYWdlICk7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICd3YXJuaW5nJywgJG1lZGlhX3VwbG9hZF9tZXNzYWdlICk7CgkJfSBlbHNlIHsgLy8gTWVkaWEgcGF0aCBkb2VzIGV4aXN0LgoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdZb3VyIG1lZGlhIHVwbG9hZCBwYXRoIGlzIGFzc2lnbmVkIGFuIGFic29sdXRlIHBhdGggd2hpY2ggYXBwZWFycyB0byBiZSBjb3JyZWN0LicgKTsKCQl9Cgl9IGVsc2UgeyAvLyBSZWxhdGl2ZSBwYXRoLgoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1lvdXIgbWVkaWEgdXBsb2FkIHBhdGggaXMgYXNzaWduZWQgYSByZWxhdGl2ZSBwYXRoOyB2YWxpZGl0eSBub3QgdGVzdGVkLicgKTsKCX0KCQp9IC8vIEVuZCB2ZXJpZnlfZGF0YWJhc2UoKS4KCgoKLyogc2NydWJfbWFpbnRlbmFuY2VfZmlsZSgpCiAqCiAqIERlbGV0ZXMgLm1haW50ZW5hbmNlIGZpbGUgaWYgaXQgYXBwZWFycyB0byBoYXZlIHRoZSBjb250ZW50cyB0aGF0IEltcG9ydEJ1ZGR5IGNyZWF0ZWQgaXQgd2l0aC4KICogTm9uLWltcG9ydGJ1ZGR5IGNyZWF0ZWQgLm1haW50ZW5hbmNlIGZpbGVzIGFyZSBsZWZ0IGluIHBsYWNlIHRvIGJlIHdhcm5lZCBhYm91dCBsYXRlciBhcyB0aGUgdXNlciBtYXkgd2FudCBpdCB0aGVyZS4KICoKICovCmZ1bmN0aW9uIHNjcnViX21haW50ZW5hbmNlX2ZpbGUoKSB7CglpZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJy5tYWludGVuYW5jZScgKSApIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICcubWFpbnRlbmFuY2UgZmlsZSBleGlzdHMuIENoZWNraW5nIHRvIHNlZSBpZiBJbXBvcnRCdWRkeSBnZW5lcmF0ZWQgaXQuJyApOwoJCSRtYWludGVuYW5jZV9jb250ZW50cyA9IEBmaWxlX2dldF9jb250ZW50cyggQUJTUEFUSCAuICcubWFpbnRlbmFuY2UnICk7CgkJaWYgKCBmYWxzZSA9PT0gJG1haW50ZW5hbmNlX2NvbnRlbnRzICkgeyAvLyBDYW5ub3QgcmVhZC4KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJy5tYWludGVuYW5jZSBmaWxlIHVucmVhZGFibGUuIFlvdSBtYXkgbmVlZCB0byBtYW51YWxseSBkZWxldGUgaXQgdG8gdmlldyB5b3VyIHNpdGUuJyApOwoJCX0gZWxzZSB7IC8vIFJlYWQgZmlsZSBzdWNjZWVkZWQuCgkJCWlmICggdHJpbSggJG1haW50ZW5hbmNlX2NvbnRlbnRzICkgPT0gIjw/cGhwIGRpZSggJ1NpdGUgdW5kZXJnb2luZyBtYWludGVuYW5jZS4nICk7ID8+IiApIHsgLy8gT3VyIGZpbGUuIERlbGV0ZSBpdCEKCQkJCSRtYWludGVuYW5jZV91bmxpbmsgPSBAdW5saW5rKCBBQlNQQVRIIC4gJy5tYWludGVuYW5jZScgKTsKCQkJCWlmICggdHJ1ZSA9PT0gJG1haW50ZW5hbmNlX3VubGluayApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdUZW1wb3JhcnkgLm1haW50ZW5hbmNlIGZpbGUgY3JlYXRlZCBieSBJbXBvcnRCdWRkeSBzdWNjZXNzZnVsbHkgZGVsZXRlZC4nICk7CgkJCQl9IGVsc2UgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdVbmFibGUgdG8gZGVsZXRlIHRlbXBvcmFyeSAubWFpbnRlbmFuY2UgZmlsZS4gIFRoaXMgaXMgbGlrZWx5IGR1ZSB0byBwZXJtaXNzaW9ucy4gWW91IG1heSBuZWVkIHRvIG1hbnVhbGx5IGRlbGV0ZSBpdCB0byB2aWV3IHlvdXIgc2l0ZS4nICk7CgkJCQl9CgkJCX0gZWxzZSB7IC8vIE5vdCBvdXIgZmlsZS4gTGVhdmUgYWxvbmUuIFdlIHdpbGwgd2FybiBhYm91dCB0aGlzIGxhdGVyIHRob3VnaC4KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJy5tYWludGVuYW5jZSBmaWxlIG5vdCBnZW5lcmF0ZWQgYnkgSW1wb3J0QnVkZHkuIExlYXZpbmcgYXMgaXMuIFlvdSBtYXkgbmVlZCB0byBkZWxldGUgaXQgdG8gdmlldyB5b3VyIHNpdGUuJyApOwoJCQl9CgkJfQoJfSBlbHNlIHsgLy8gTm8gLm1haW50ZW5hbmNlIGZpbGUuCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnLm1haW50ZW5hbmNlIGZpbGUgbm90IGZvdW5kLiBTa2lwcGluZyBkZWxldGlvbi4nICk7Cgl9Cn0gLy8gRW5kIHNjcnViX21haW50ZW5hbmNlX2ZpbGUoKS4KCgoKLyogc2NydWJfaW5kZXhfZmlsZSgpCiAqCiAqIERlbGV0ZXMgaW5kZXguaHRtIGZpbGUgaWYgaXQgYXBwZWFycyB0byBoYXZlIHRoZSBjb250ZW50cyB0aGF0IEltcG9ydEJ1ZGR5IGNyZWF0ZWQgaXQgd2l0aC4KICogTm9uLWltcG9ydGJ1ZGR5IGNyZWF0ZWQgaW5kZXguaHRtIGZpbGVzIGFyZSBsZWZ0IGluIHBsYWNlIHRvIGJlIHdhcm5lZCBhYm91dCBsYXRlciBhcyB0aGUgdXNlciBtYXkgd2FudCBpdCB0aGVyZS4KICoKICovCmZ1bmN0aW9uIHNjcnViX2luZGV4X2ZpbGUoKSB7CglpZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ2luZGV4Lmh0bScgKSApIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdpbmRleC5odG0gZmlsZSBleGlzdHMuIENoZWNraW5nIHRvIHNlZSBpZiBJbXBvcnRCdWRkeSBnZW5lcmF0ZWQgaXQuJyApOwoJCSRpbmRleF9jb250ZW50cyA9IEBmaWxlX2dldF9jb250ZW50cyggQUJTUEFUSCAuICdpbmRleC5odG0nICk7CgkJaWYgKCBmYWxzZSA9PT0gJGluZGV4X2NvbnRlbnRzICkgeyAvLyBDYW5ub3QgcmVhZC4KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ2luZGV4Lmh0bSBmaWxlIHVucmVhZGFibGUuIFlvdSBtYXkgbmVlZCB0byBtYW51YWxseSBkZWxldGUgaXQgdG8gdmlldyB5b3VyIHNpdGUuJyApOwoJCX0gZWxzZSB7IC8vIFJlYWQgZmlsZSBzdWNjZWVkZWQuCgkJCWlmICggdHJpbSggJGluZGV4X2NvbnRlbnRzICkgPT0gJzxodG1sPjwvaHRtbD4nICkgeyAvLyBPdXIgZmlsZS4gRGVsZXRlIGl0IQoJCQkJJGluZGV4X3VubGluayA9IEB1bmxpbmsoIEFCU1BBVEggLiAnaW5kZXguaHRtJyApOwoJCQkJaWYgKCB0cnVlID09PSAkaW5kZXhfdW5saW5rICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1RlbXBvcmFyeSBpbmRleC5odG0gZmlsZSBjcmVhdGVkIGJ5IEltcG9ydEJ1ZGR5IHN1Y2Nlc3NmdWxseSBkZWxldGVkLicgKTsKCQkJCX0gZWxzZSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ1VuYWJsZSB0byBkZWxldGUgdGVtcG9yYXJ5IGluZGV4Lmh0bSBmaWxlLiAgVGhpcyBpcyBsaWtlbHkgZHVlIHRvIHBlcm1pc3Npb25zLiBZb3UgbWF5IG5lZWQgdG8gbWFudWFsbHkgZGVsZXRlIGl0IHRvIHZpZXcgeW91ciBzaXRlLicgKTsKCQkJCX0KCQkJfSBlbHNlIHsgLy8gTm90IG91ciBmaWxlLiBMZWF2ZSBhbG9uZS4gV2Ugd2lsbCB3YXJuIGFib3V0IHRoaXMgbGF0ZXIgdGhvdWdoLgoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnaW5kZXguaHRtIGZpbGUgbm90IGdlbmVyYXRlZCBieSBJbXBvcnRCdWRkeS4gTGVhdmluZyBhcyBpcy4gWW91IG1heSBuZWVkIHRvIGRlbGV0ZSBpdCB0byB2aWV3IHlvdXIgc2l0ZS4nICk7CgkJCX0KCQl9Cgl9IGVsc2UgeyAvLyBObyBpbmRleC5odG0gZmlsZS4KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdpbmRleC5odG0gZmlsZSBub3QgZm91bmQuIFNraXBwaW5nIGRlbGV0aW9uLicgKTsKCX0KfSAvLyBFbmQgc2NydWJfaW5kZXhfZmlsZSgpLgoKCgovKglyZW5hbWVfaHRhY2Nlc3NfdGVtcF9iYWNrKCkKICoJCiAqCVJlbmFtZXMgLmh0YWNjZXNzIHRvIC5odGFjY2Vzcy5iYl90ZW1wIHVudGlsIGxhc3QgSW1wb3J0QnVkZHkgc3RlcCB0byBhdm9pZCBjb21wbGljYXRpb25zLgogKgkKICoJQHJldHVybgkJbnVsbAogKi8KZnVuY3Rpb24gcmVuYW1lX2h0YWNjZXNzX3RlbXBfYmFjaygpIHsKCQoJaWYgKCAhZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnLmh0YWNjZXNzLmJiX3RlbXAnICkgKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnTm8gYC5odGFjY2Vzcy5iYl90ZW1wYCBmaWxlIGZvdW5kLiBTa2lwcGluZyB0ZW1wb3JhcnkgZmlsZSByZW5hbWUuJyApOwoJfQoJCgkkcmVzdWx0ID0gQHJlbmFtZSggQUJTUEFUSCAuICcuaHRhY2Nlc3MuYmJfdGVtcCcsIEFCU1BBVEggLiAnLmh0YWNjZXNzJyApOwoJaWYgKCAkcmVzdWx0ID09PSB0cnVlICkgeyAvLyBSZW5hbWUgc3VjY2VlZGVkLgoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlbmFtZWQgYC5odGFjY2Vzcy5iYl90ZW1wYCBmaWxlIHRvIGAuaHRhY2Nlc3NgIHVudGlsIGZpbmFsIEltcG9ydEJ1ZGR5IHN0ZXAuJyApOwoJfSBlbHNlIHsgLy8gUmVuYW1lIGZhaWxlZC4KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnVW5hYmxlIHRvIHJlbmFtZSBgLmh0YWNjZXNzLmJiX3RlbXBgIGZpbGUgdG8gYC5odGFjY2Vzc2AuIFlvdXIgZmlsZSBwZXJtaXNzaW9ucyBtYXkgYmUgdG9vIHN0cmljdC4gWW91IG1heSB3aXNoIHRvIG1hbnVhbGx5IHJlbmFtZSB0aGlzIGZpbGUgYW5kL29yIGNoZWNrIHBlcm1pc3Npb25zIGJlZm9yZSBwcm9jZWVkaW5nLicgKTsKCX0KCQp9IC8vIEVuZCByZW5hbWVfaHRhY2Nlc3NfdGVtcF9iYWNrKCkuCgoKCi8qIHRyb3VibGVfc2NhbigpCiAqCiAqIFNjYW5zIGZvciBwb3RlbnRpYWwgcHJvYmxlbXMgYW5kIHByb3ZpZGVkIGluZm9ybWF0aXZlIHdhcm5pbmdzLgogKgogKiBAcmV0dXJuIGFycmF5IEFycmF5IG9mIHRleHQgd2FybmluZ3MgdG8gZGlzcGxheSB0byB1c2VyLgogKgogKi8KZnVuY3Rpb24gdHJvdWJsZV9zY2FuKCkgewoJJHRyb3VibGUgPSBhcnJheSgpOwoJCgkvLyAubWFpbnRlbmFuY2UKCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnLm1haW50ZW5hbmNlJyApICkgewoJCSR0cm91YmxlW10gPSAnLm1haW50ZW5hbmNlIGZpbGUgZm91bmQgaW4gV29yZFByZXNzIHJvb3QuIFRoZSBzaXRlIG1heSBub3QgYmUgYWNjZXNzaWJsZSB1bmxlc3MgdGhpcyBmaWxlIGlzIGRlbGV0ZWQuJzsKCX0KCQoJLy8gaW5kZXguaHRtCglpZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ2luZGV4Lmh0bScgKSApIHsKCQkkdHJvdWJsZVtdID0gJ2luZGV4Lmh0bSBmaWxlIGZvdW5kIGluIFdvcmRQcmVzcyByb290LiBUaGlzIG1heSBwcmV2ZW50IFdvcmRQcmVzcyBmcm9tIGxvYWRpbmcgb24gc29tZSBzZXJ2ZXJzICYgbWF5IG5lZWQgdG8gYmUgZGVsZXRlZC4nOwoJfQoJCgkvLyBpbmRleC5odG1sCglpZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ2luZGV4Lmh0bWwnICkgKSB7CgkJJHRyb3VibGVbXSA9ICdpbmRleC5odG1sIGZpbGUgZm91bmQgaW4gV29yZFByZXNzIHJvb3QuIFRoaXMgbWF5IHByZXZlbnQgV29yZFByZXNzIGZyb20gbG9hZGluZyBvbiBzb21lIHNlcnZlcnMgJiBtYXkgbmVlZCB0byBiZSBkZWxldGVkLic7Cgl9CgkKCS8vIHdwLWNvbmZpZy5waHAKCWlmICggISBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd3cC1jb25maWcucGhwJyApICkgewoJCSR0cm91YmxlW10gPSAnV2FybmluZyBvbmx5OiB3cC1jb25maWcucGhwIGZpbGUgbm90IGZvdW5kIFdvcmRQcmVzcyByb290LiA8aT5UaGlzIGlzIG5vcm1hbCBmb3IgYSBkYXRhYmFzZS1vbmx5IHJlc3RvcmUuPC9pPic7Cgl9IGVsc2UgeyAvLyB3cC1jb25maWcucGhwIGV4aXN0cyBzbyBjaGVjayBmb3IgdW5jaGFuZ2VkIFVSTHMgbm90IHVwZGF0ZWQgZHVlIHRvIHByb3ZlbmFuY2UgdW5rbm93bi4KCQkKCQlpZiAoICdmaWxlcycgPT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkYXRfZmlsZSddWydiYWNrdXBfdHlwZSddICkgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdTa2lwcGluZyBVUkwgc2NhbiBmb3Igd3AtY29uZmlnLnBocCBhcyB0aGlzIGlzIGEgRmlsZXMgT25seSByZXN0b3JlLicgKTsKCQl9IGVsc2UgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdDaGVja2luZyB3cC1jb25maWcucGhwIGZpbGUgZm9yIHVuY2hhbmdlZCBVUkxzLicgKTsKCQkJJGNvbmZpZ19jb250ZW50cyA9IEBmaWxlX2dldF9jb250ZW50cyggQUJTUEFUSCAuICd3cC1jb25maWcucGhwJyApOwoJCQlpZiAoIGZhbHNlID09PSAkY29uZmlnX2NvbnRlbnRzICkgeyAvLyBVbmFibGUgdG8gb3Blbi4KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdVbmFibGUgdG8gb3BlbiB3cC1jb25maWcucGhwIGZvciBjaGVja2luZyB0aG91Z2ggaXQgZXhpc3RzLiBWZXJpZnkgcGVybWlzc2lvbnMuJyApOwoJCQl9IGVsc2UgeyAvLyBBYmxlIHRvIG9wZW4uCgkJCQkKCQkJCXByZWdfbWF0Y2hfYWxsKCAnI1xiaHR0cHM/Oi8vW15ccygpPD5dKyg/OlwoW1x3XGRdK1wpfChbXls6cHVuY3Q6XVxzXXwvKSkjJywgJGNvbmZpZ19jb250ZW50cywgJG1hdGNoZXMgKTsKCQkJCSRtYXRjaGVzID0gJG1hdGNoZXNbMF07CgkJCQlmb3JlYWNoKCAkbWF0Y2hlcyBhcyAkbWF0Y2ggKSB7CgkJCQkJaWYgKCBmYWxzZSAhPT0gc3RyaXN0ciggJG1hdGNoLCAnYXBpLndvcmRwcmVzcy5vcmcnICkgKSB7CgkJCQkJCWNvbnRpbnVlOwoJCQkJCX0KCQkJCQlpZiAoIGZhbHNlICE9PSBzdHJpc3RyKCAkbWF0Y2gsICdjb2RleC53b3JkcHJlc3Mub3JnJyApICkgewoJCQkJCQljb250aW51ZTsKCQkJCQl9CgkJCQkJJHRyb3VibGVbXSA9ICdBIFVSTCBmb3VuZCBpbiBvbmUgb3IgbW9yZSBsb2NhdGlvbnMgaW4gd3AtY29uZmlnLnBocCB3YXMgbm90IG1pZ3JhdGVkIGFzIGl0IHdhcyBlaXRoZXIgbm90IHJlY29nbml6ZWQgb3IgaW4gYW4gdW5yZWNvZ25pemVkIGxvY2F0aW9uIGluIHRoZSBmaWxlOiAiJyAuIGh0bWxlbnRpdGllcyggJG1hdGNoICkgLiAnIi4nOwoJCQkJfQoJCQkJCgkJCQlpZiAoIGZhbHNlICE9PSBzdHJpc3RyKCAkY29uZmlnX2NvbnRlbnRzLCAnQ09PS0lFX0RPTUFJTicgKSApIHsgLy8gRm91bmQgY29va2llIGRvbWFpbi4KCQkJCQkkdHJvdWJsZVtdID0gJ0Nvb2tpZSBkb21haW4gc2V0IGluIHdwLWNvbmZpZy5waHAgZmlsZSBhbmQgaGFzIG5vdCBiZWVuIHVwZGF0ZWQuIFlvdSBtYXkgbmVlZCB0byBtYW51YWx5IHVwZGF0ZSB0aGlzLic7CgkJCQl9CgkJCX0KCQl9Cgl9CgkKCS8vIC5odGFjY2VzcwoJaWYgKCAhIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJy5odGFjY2VzcycgKSApIHsKCQkkdHJvdWJsZVtdID0gJ1dhcm5pbmcgb25seTogLmh0YWNjZXNzIGZpbGUgbm90IGZvdW5kIGluIFdvcmRQcmVzcyByb290LiBUaGlzIGlzIHVzZWQgZm9yIHBlcm1hbGlua3Mgb24gc2VydmVycyB3aGljaCBzdXBwb3J0IGl0LiBJZiBuZWVkZWQgb3IgVVJMcyByZXN1bHQgaW4gYSA0MDQgeW91IG1heSByZWdlbmVyYXRlIHRoaXMgZmlsZSBieSBsb2dnaW5nIGludG8gdGhlIHdwLWFkbWluICYgbmF2aWdhdGluZyB0byBTZXR0aW5nczogUGVybWFsaW5rcyBhbmQgY2xpY2tpbmcgIlNhdmUiLic7Cgl9CgkKCS8vIHBocC5pbmkKCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAncGhwLmluaScgKSApIHsKCQkkdHJvdWJsZVtdID0gJ0EgcGhwLmluaSBmaWxlIHdhcyByZXN0b3JlZCBpbiB0aGUgaW1wb3J0IHByb2Nlc3MgaW4gdGhlIHNpdGUgcm9vdC4gVGhpcyBtYXkgY2F1c2UgcHJvYmxlbXMgd2l0aCBzaXRlIGZ1bmN0aW9uYWxpdHkgaWYgaW1wb3J0ZWQgdG8gYSBkaWZmZXJlbnQgc2VydmVyIGFzIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBvZnRlbiBkaWZmZXIgYmV0d2VlbiBzZXJ2ZXJzLCBwb3NzaWJseSByZXN1bHRpbmcgaW4gZGVncmFkZWQgcGVyZm9ybWFuY2Ugb3IgdW5leHBlY3RlZCBiZWhhdmlvci4nOwoJfQoJCglpZiAoIGNvdW50KCAkdHJvdWJsZSApID4gMCApIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnd2FybmluZycsICdQb3RlbnRpYWwgcHJvYmxlbXMgdGhhdCBtYXkgbmVlZCB5b3VyIGF0dGVudGlvbjogJyAuIGltcGxvZGUoICc7ICcsICR0cm91YmxlICkgKTsKCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnTm8gcG90ZW50aWFsIHByb2JsZW1zIGRldGVjdGVkLicgKTsKCX0KCQoJcmV0dXJuICR0cm91YmxlOwoJCn0gLy8gRW5kIHRyb3VibGVfc2NhbigpLgoKCgppZiAoICRtb2RlID09ICdodG1sJyApIHsKCXBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3ZpZXcoICdodG1sXzUnLCAkZGF0YSApOwp9IGVsc2UgeyAvLyBBUEkgbW9kZS4KCSRyZXN1bHQgPSBtaWdyYXRlX2RhdGFiYXNlKCk7CglpZiAoICRyZXN1bHQgPT09IHRydWUgKSB7CgkJbWlncmF0ZV93cF9jb25maWcoKTsKCQlpZiAoICggdHJ1ZSA9PT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydza2lwX2RhdGFiYXNlX2ltcG9ydCddICkgJiYgKCB0cnVlID09PSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3NraXBfZGF0YWJhc2VfbWlncmF0aW9uJ10gKSApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnU2tpcHBpbmcgZGF0YWJhc2UgdmVyaWZpY2F0aW9uIGFzIGJvdGggSW1wb3J0IGFuZCBNaWdyYXRpb24gc3RlcHMgd2VyZSBza2lwcGVkIHNvIG5vIG1vZGlmaWNhdGlvbnMgd2VyZSBtYWRlIHRvIGl0LicgKTsKCQl9IGVsc2UgewoJCQl2ZXJpZnlfZGF0YWJhc2UoKTsKCQl9Cgl9Cn0KPz4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/5.php,importbuddy/controllers/pages/5.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/6.php,importbuddy/controllers/pages/6.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoKJGRhdGEgPSBhcnJheSgKCSdzdGVwJwkJPT4JCSc2JywKKTsKCgoKcGJfYmFja3VwYnVkZHk6OnNldF9ncmVlZHlfc2NyaXB0X2xpbWl0cyggdHJ1ZSApOwoKCgoKLyoJY2xlYW51cCgpCiAqCQogKglDbGVhbnMgdXAgYW55IHRlbXBvcmFyeSBmaWxlcyBsZWZ0IGJ5IGltcG9ydGJ1ZGR5LgogKgkKICoJQHJldHVybgkJbnVsbAogKi8KZnVuY3Rpb24gY2xlYW51cCgpIHsKCWlmICggaXNzZXQoICRfUE9TVFsnZGVsZXRlX2JhY2t1cCddICkgJiYgKCAkX1BPU1RbJ2RlbGV0ZV9iYWNrdXAnXSA9PSAnMScgKSApIHsKCQlyZW1vdmVfZmlsZSggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydmaWxlJ10sICdiYWNrdXAgLlpJUCBmaWxlICgnIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydmaWxlJ10gLiAnKScsIHRydWUgKTsKCX0KCQoJaWYgKCBpc3NldCggJF9QT1NUWydkZWxldGVfdGVtcCddICkgJiYgKCAkX1BPU1RbJ2RlbGV0ZV90ZW1wJ10gPT0gJzEnICkgKSB7CgkJLy8gRnVsbCBiYWNrdXAgLnNxbCBmaWxlCgkJcmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnd3AtY29udGVudC91cGxvYWRzL3RlbXBfJy5wYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3ppcF9pZCddLicvZGIuc3FsJywgJ2RiLnNxbCAoYmFja3VwIGRhdGFiYXNlIGR1bXApJywgZmFsc2UgKTsKCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvdGVtcF8nLnBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snemlwX2lkJ10uJy9kYl8xLnNxbCcsICdkYl8xLnNxbCAoYmFja3VwIGRhdGFiYXNlIGR1bXApJywgZmFsc2UgKTsKCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvYmFja3VwYnVkZHlfdGVtcC8nLnBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snemlwX2lkJ10uJy9kYl8xLnNxbCcsICdkYl8xLnNxbCAoYmFja3VwIGRhdGFiYXNlIGR1bXApJywgZmFsc2UgKTsKCQkvLyBEQiBvbmx5IHNxbCBmaWxlCgkJcmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnZGIuc3FsJywgJ2RiLnNxbCAoYmFja3VwIGRhdGFiYXNlIGR1bXApJywgZmFsc2UgKTsKCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICdkYl8xLnNxbCcsICdkYl8xLnNxbCAoYmFja3VwIGRhdGFiYXNlIGR1bXApJywgZmFsc2UgKTsKCQkKCQkvLyBGdWxsIGJhY2t1cCBkYXQgZmlsZQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ3dwLWNvbnRlbnQvdXBsb2Fkcy90ZW1wXycgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3ppcF9pZCddIC4gJy9iYWNrdXBidWRkeV9kYXQucGhwJywgJ2JhY2t1cGJ1ZGR5X2RhdC5waHAgKGJhY2t1cCBkYXRhIGZpbGUpJywgZmFsc2UgKTsKCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvYmFja3VwYnVkZHlfdGVtcC8nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWyd6aXBfaWQnXSAuICcvYmFja3VwYnVkZHlfZGF0LnBocCcsICdiYWNrdXBidWRkeV9kYXQucGhwIChiYWNrdXAgZGF0YSBmaWxlKScsIGZhbHNlICk7CgkJLy8gREIgb25seSBkYXQgZmlsZQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ2JhY2t1cGJ1ZGR5X2RhdC5waHAnLCAnYmFja3VwYnVkZHlfZGF0LnBocCAoYmFja3VwIGRhdGEgZmlsZSknLCBmYWxzZSApOwoJCQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ3dwLWNvbnRlbnQvdXBsb2Fkcy9iYWNrdXBidWRkeV90ZW1wLycgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3ppcF9pZCddIC4gJy8nLCAnVGVtcG9yYXJ5IGJhY2t1cCBkaXJlY3RvcnkuJywgZmFsc2UgKTsKCQkKCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS8nLCAnSW1wb3J0QnVkZHkgRGlyZWN0b3J5JywgdHJ1ZSApOwoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L19zZXR0aW5nc19kYXQucGhwJywgJ19zZXR0aW5nc19kYXQucGhwICh0ZW1wb3Jhcnkgc2V0dGluZ3MgZmlsZSknLCBmYWxzZSApOwoJfQoJaWYgKCBpc3NldCggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHknXSApICYmICggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHknXSA9PSAnMScgKSApIHsKCQlyZW1vdmVfZmlsZSggJ2ltcG9ydGJ1ZGR5LnBocCcsICdpbXBvcnRidWRkeS5waHAgKHRoaXMgc2NyaXB0KScsIHRydWUgKTsKCX0KCS8vIERlbGV0ZSBsb2cgZmlsZSBsYXN0LgoJaWYgKCBpc3NldCggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHlsb2cnXSApICYmICggJF9QT1NUWydkZWxldGVfaW1wb3J0YnVkZHlsb2cnXSA9PSAnMScgKSApIHsKCQlyZW1vdmVfZmlsZSggJ2ltcG9ydGJ1ZGR5LScgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0JywgJ2ltcG9ydGJ1ZGR5LScgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0IGxvZyBmaWxlJywgdHJ1ZSApOwoJfQp9CgoKCi8vIFVzZWQgYnkgY2xlYW51cCgpIGFib3ZlLgpmdW5jdGlvbiByZW1vdmVfZmlsZSggJGZpbGUsICRkZXNjcmlwdGlvbiwgJGVycm9yX29uX21pc3NpbmcgPSBmYWxzZSApIHsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ0RlbGV0aW5nIGAnIC4gJGRlc2NyaXB0aW9uIC4gJ2AuLi4nICk7CgoJQGNobW9kKCAkZmlsZSwgMDc1NSApOyAvLyBIaWdoIHBlcm1pc3Npb25zIHRvIGRlbGV0ZS4KCQoJaWYgKCBpc19kaXIoICRmaWxlICkgKSB7IC8vIGRpcmVjdG9yeS4KCQlwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0tPnVubGlua19yZWN1cnNpdmUoICRmaWxlICk7CgkJaWYgKCBmaWxlX2V4aXN0cyggJGZpbGUgKSApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ1VuYWJsZSB0byBkZWxldGUgZGlyZWN0b3J5OiBgJyAuICRkZXNjcmlwdGlvbiAuICdgLiBZb3Ugc2hvdWxkIG1hbnVhbGx5IGRlbGV0ZSBpdC4nICk7CgkJfSBlbHNlIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnRGVsZXRlZC4nLCBmYWxzZSApOyAvLyBObyBsb2dnaW5nIG9mIHRoaXMgYWN0aW9uIHRvIHByZXZlbnQgcmVjcmVhdGluZyBsb2cuCgkJfQoJfSBlbHNlIHsgLy8gZmlsZQoJCWlmICggZmlsZV9leGlzdHMoICRmaWxlICkgKSB7CgkJCWlmICggQHVubGluayggJGZpbGUgKSAhPSAxICkgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ1VuYWJsZSB0byBkZWxldGUgZmlsZTogYCcgLiAkZGVzY3JpcHRpb24gLiAnYC4gWW91IHNob3VsZCBtYW51YWxseSBkZWxldGUgaXQuJyApOwoJCQl9IGVsc2UgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnRGVsZXRlZC4nLCBmYWxzZSApOyAvLyBObyBsb2dnaW5nIG9mIHRoaXMgYWN0aW9uIHRvIHByZXZlbnQgcmVjcmVhdGluZyBsb2cuCgkJCX0KCQl9Cgl9Cn0gLy8gRW5kIHJlbW92ZV9maWxlKCkuCgoKCgoKaWYgKCAkbW9kZSA9PSAnaHRtbCcgKSB7CglwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnaHRtbF82JywgJGRhdGEgKTsKfSBlbHNlIHsgLy8gQVBJIG1vZGUuCgljbGVhbnVwKCk7Cn0KPz4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/6.php,importbuddy/controllers/pages/6.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
PD9waHAKZGllKCk7CgppZiAoICEgZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApIHx8ICggdHJ1ZSAhPT0gUEJfSU1QT1JUQlVERFkgKSApIHsKCWRpZSggJzxodG1sPjwvaHRtbD4nICk7Cn0KCkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgo/Pgo8ZGl2IGlkPSJwYl9jcmVhdGVhZG1pbl9tb2RhbCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IGhlaWdodDogOTAlOyI+CgkJPGRpdiBjbGFzcz0ibW9kYWwiPgoJCQk8ZGl2IGNsYXNzPSJtb2RhbF9oZWFkZXIiPgoJCQkJPGEgY2xhc3M9Im1vZGFsX2Nsb3NlIj4mdGltZXM7PC9hPgoJCQkJPGgyPlNlcnZlciBJbmZvcm1hdGlvbjwvaDI+CgkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJtb2RhbF9jb250ZW50Ij4KCQkJCQoJCQkJCgkJCQkKCQkJCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCQkJCQlqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJCQkJCQlqUXVlcnkoICcjY3JlYXRlYWRtaW5fZm9ybScgKS5zdWJtaXQoZnVuY3Rpb24oKXsKCQkJCQkJCQoJCQkJCQkJalF1ZXJ5KCAnLmNyZWF0ZWFkbWluX2xvYWRpbmcnICkuc2hvdygpOwoJCQkJCQkJalF1ZXJ5LnBvc3QoJ2ltcG9ydGJ1ZGR5LnBocD9hamF4PWNyZWF0ZV9hZG1pbicsCgkJCQkJCQkJalF1ZXJ5KCAnI2NyZWF0ZWFkbWluX2Zvcm0nICkuc2VyaWFsaXplKCksIGZ1bmN0aW9uKGRhdGEpIHsKCQkJCQkJCQkJCgkJCQkJCQkJCWRhdGEgPSBqUXVlcnkudHJpbSggZGF0YSApOwoJCQkJCQkJCQlqUXVlcnkoICcuY3JlYXRlYWRtaW5fbG9hZGluZycgKS5oaWRlKCk7CgkJCQkJCQkJCQoJCQkJCQkJCQlpZiAoIGRhdGEgPT0gJzEnICkgewoJCQkJCQkJCQkJYWxlcnQoICdTdWNjZXNzJyApOwoJCQkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCQkJYWxlcnQoICdFcnJvcjogJyArIGRhdGEgKTsKCQkJCQkJCQkJfQoJCQkJCQkJCQkKCQkJCQkJCQl9CgkJCQkJCQkpOwoJCQkJCQkJCgkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCQkKCQkJCQkJfSk7CgkJCQkJfSk7CgkJCQk8L3NjcmlwdD4KCQkJCQoJCQkJPGZvcm0gaWQ9ImNyZWF0ZWFkbWluX2Zvcm0iPgoJCQkJCVVzZXJuYW1lOiA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idXNlcm5hbWUiPgoJCQkJCUVtYWlsOiA8aW5wdXQgdHlwZT0iZW1haWwiIG5hbWU9ImVtYWlsIj4KCQkJCQlQYXNzd29yZDogPGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCI+CgkJCQkJQ29uZmlybSBQYXNzd29yZDogPGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZF9jb25maXJtIj4KCQkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJDcmVhdGUgQWRtaW4gVXNlciIgY2xhc3M9ImJ1dHRvbiI+CgkJCQkJPHNwYW4gY2xhc3M9ImNyZWF0ZWFkbWluX2xvYWRpbmciIHN0eWxlPSJkaXNwbGF5OiBub25lOyBtYXJnaW4tbGVmdDogMTBweDsiPjxpbWcgc3JjPSI8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCk7ID8+L2ltYWdlcy9sb2FkaW5nLmdpZiIgYWx0PSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHRpdGxlPSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtM3B4OyI+PC9zcGFuPgoJCQkJPC9mb3JtPgoJCQkJCgkJCQkKCQk8L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgoKJGRhdGEgPSBhcnJheSgpOwpwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnZGJyZXBsYWNlJywgJGRhdGEgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgoKCi8qKioqKiogQkVHSU4gQVVUSEVOVElDQVRJT04gKioqKiovCnJlcXVpcmVfb25jZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS9jbGFzc2VzL2F1dGgucGhwJyApOwpBdXRoOjpjaGVjaygpOwovKioqKioqIEVORCBBVVRIRU5USUNBVElPTiAqKioqKi8KCgoKJG1vZGUgPSAnaHRtbCc7CgoKCi8vIFJlZ2lzdGVyIFBIUCBzaHV0ZG93biBmdW5jdGlvbiB0byBoZWxwIGNhdGNoIGFuZCBsb2cgZmF0YWwgUEhQIGVycm9ycyBkdXJpbmcgYmFja3VwLgpyZWdpc3Rlcl9zaHV0ZG93bl9mdW5jdGlvbiggJ3NodXRkb3duX2Z1bmN0aW9uJyApOwovL2Vycm9yX3JlcG9ydGluZyggRV9FUlJPUiB8IEVfV0FSTklORyB8IEVfUEFSU0UgfCBFX05PVElDRSApOyAvLyBISUdICgovKglzaHV0ZG93bl9mdW5jdGlvbigpCiAqCQogKglVc2VkIGZvciBjYXRjaGluZyBmYXRhbCBQSFAgZXJyb3JzIGR1cmluZyBiYWNrdXAgdG8gd3JpdGUgdG8gbG9nIGZvciBkZWJ1Z2dpbmcuCiAqCQogKglAcmV0dXJuCQludWxsCiAqLwpmdW5jdGlvbiBzaHV0ZG93bl9mdW5jdGlvbigpIHsKCQoJCgkvLyBHZXQgZXJyb3IgbWVzc2FnZS4KCS8vIEVycm9yIHR5cGVzOiBodHRwOi8vcGhwLm5ldC9tYW51YWwvZW4vZXJyb3JmdW5jLmNvbnN0YW50cy5waHAKCSRlID0gZXJyb3JfZ2V0X2xhc3QoKTsKCWlmICggJGUgPT09IE5VTEwgKSB7IC8vIE5vIGVycm9yIG9mIGFueSBraW5kLgoJCXJldHVybjsKCX0gZWxzZSB7IC8vIFNvbWUgdHlwZSBvZiBlcnJvci4KCQlpZiAoICFpc19hcnJheSggJGUgKSB8fCAoICRlWyd0eXBlJ10gIT0gRV9FUlJPUiApICYmICggJGVbJ3R5cGUnXSAhPSBFX1VTRVJfRVJST1IgKSApIHsgLy8gUmV0dXJuIGlmIG5vdCBhIGZhdGFsIGVycm9yLgoJCQkvL2VjaG8gJzwhLS0gJyAuIHByaW50X3IoICRlLCB0cnVlICkgLiAnIC0tPicgLiAiXG4iOwoJCQlyZXR1cm47CgkJfQoJfQoJCgkKCS8vIENhbGN1bGF0ZSBsb2cgZGlyZWN0b3J5LgoJJGxvZ19kaXJlY3RvcnkgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKTsgLy8gQWxzbyBoYW5kbGUgd2hlbiBpbiBpbXBvcnRidWRkeS4KCSRtYWluX2ZpbGUgPSAkbG9nX2RpcmVjdG9yeSAuICdsb2ctJyAuIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOwoJCgkKCS8vIERldGVybWluZSBpZiB3cml0aW5nIHRvIGEgc2VyaWFsIGxvZy4KCWlmICggcGJfYmFja3VwYnVkZHk6OiRfc3RhdHVzX3NlcmlhbCAhPSAnJyApIHsKCQkkc2VyaWFsID0gcGJfYmFja3VwYnVkZHk6OiRfc3RhdHVzX3NlcmlhbDsKCQkkc2VyaWFsX2ZpbGUgPSAkbG9nX2RpcmVjdG9yeSAuICdzdGF0dXMtJyAuICRzZXJpYWwgLiAnXycgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0JzsKCQkkd3JpdGVfc2VyaWFsID0gdHJ1ZTsKCX0gZWxzZSB7CgkJJHdyaXRlX3NlcmlhbCA9IGZhbHNlOwoJfQoJCgkKCS8vIEZvcm1hdCBlcnJvciBtZXNzYWdlLgoJJGVfc3RyaW5nID0gJy0tLS0tIEZBVEFMIEVSUk9SIC0tLS0tIEEgZmF0YWwgUEhQIGVycm9yIHdhcyBlbmNvdW50ZXJlZDogJzsKCWZvcmVhY2goIChhcnJheSkkZSBhcyAkZV9saW5lX3RpdGxlID0+ICRlX2xpbmUgKSB7CgkJJGVfc3RyaW5nIC49ICRlX2xpbmVfdGl0bGUgLiAnID0+ICcgLiAkZV9saW5lIC4gIjsgIjsKCX0KCSRlX3N0cmluZyA9IHJ0cmltKCAkZV9zdHJpbmcsICc7ICcgKSAuICcuJzsKCQoJLy8gV3JpdGUgdG8gbG9nLgoJQGZpbGVfcHV0X2NvbnRlbnRzKCAkbWFpbl9maWxlLCAkZV9zdHJpbmcsIEZJTEVfQVBQRU5EICk7CgkKCS8vIElNUE9SVEJVRERZCgkkc3RhdHVzID0gcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPmRhdGUoIHRpbWUoKSApIC4gIlx0IiAuCgkJCQlzcHJpbnRmKCAiJTAxLjJmIiwgcm91bmQoIG1pY3JvdGltZSggdHJ1ZSApIC0gcGJfYmFja3VwYnVkZHk6OiRzdGFydF90aW1lLCAyICkgKSAuICJcdCIgLgoJCQkJc3ByaW50ZiggIiUwMS4yZiIsIHJvdW5kKCBtZW1vcnlfZ2V0X3BlYWtfdXNhZ2UoKSAvIDEwNDg1NzYsIDIgKSApIC4gIlx0IiAuCgkJCQknZXJyb3InIC4gIlx0XHQiIC4KCQkJCXN0cl9yZXBsYWNlKCBjaHIoOSksICcgICAnLCAkZV9zdHJpbmcgKQoJCQk7Cgkkc3RhdHVzID0gc3RyX3JlcGxhY2UoICdcXCcsICcvJywgJHN0YXR1cyApOwoJZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPnBiX3N0YXR1c19hcHBlbmQoIicgLiBzdHJfcmVwbGFjZSggJyInLCAnJnF1b3Q7JywgJHN0YXR1cyApIC4gJyIpOzwvc2NyaXB0Pic7CgkKfSAvLyBFbmQgc2h1dGRvd25fZnVuY3Rpb24uCgoKCi8qKioqKioqKioqIEFKQVggKioqKioqKioqKi8KCiRhamF4ID0gJyc7CmlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnYWpheCcgKSAhPSAnJyApIHsKCSRhamF4ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnYWpheCcgKTsKfSBlbHNlaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2FqYXgnICkgIT0gJycgKSB7CgkkYWpheCA9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnYWpheCcgKTsKfQppZiAoICRhamF4ICE9ICcnICkgewkKCQoJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4KCQoJJHBhZ2UgPSBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NvbnRyb2xsZXJzL2FqYXgvJyAuICRhamF4IC4gJy5waHAnOwoJaWYgKCBmaWxlX2V4aXN0cyggJHBhZ2UgKSApIHsKCQlyZXF1aXJlX29uY2UoICRwYWdlICk7Cgl9IGVsc2UgewoJCWVjaG8gJ3tFcnJvcjogSW52YWxpZCBBSkFYIGFjdGlvbiBgJyAuIGh0bWxlbnRpdGllcyggJGFqYXggKSAuICdgLn0nOwoJfQoJCi8qKioqKioqKioqIFBBR0VTICoqKioqKioqKiovCgovLyBTdGFuZGFsb25lIHBhZ2VzLgp9IGVsc2VpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAncGFnZScgKSAhPSAnJyApIHsKCQoJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4KCQoJJHBhZ2VTbHVnID0gc3RyX3JlcGxhY2UoICcvXFwnLCAnJywgcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdwYWdlJyApICk7CglpZiAoICEgY3R5cGVfYWxudW0oIHN0cl9yZXBsYWNlKCBhcnJheSggJy0nLCAnXycgKSwgJycsICRwYWdlU2x1ZyApICkgKSB7IC8vIERpc2FsbG93IG5vbi1hbHBoYW51bWVyaWMgZXhjZXB0IGRhc2gsIHVuZGVyc2NvcmUuCgkJZGllKCAnRXJyb3IgIzg1NzQ3ODMzLiBQYWdlIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gT25seSBhbHBoYW51bWVyaWMsIGRhc2hlcywgYW5kIHVuZGVyc2NvcmVzIHBlcm1pdHRlZC4nICk7Cgl9IAoJCgkkcGFnZUZpbGUgPSBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NvbnRyb2xsZXJzL3BhZ2VzLycgLiAkcGFnZVNsdWcgLiAnLnBocCc7CglpZiAoIGZpbGVfZXhpc3RzKCAkcGFnZUZpbGUgKSApIHsKCQllY2hvICc8IS0tIFN0YXJ0aW5nIHBhZ2UgJyAuICRwYWdlU2x1ZyAuICcuIC0tPic7CgkJcmVxdWlyZV9vbmNlKCAkcGFnZUZpbGUgKTsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hlZCBwYWdlICcgLiAkcGFnZVNsdWcgLiAnLicgKTsKCX0gZWxzZSB7CgkJZWNobyAne0Vycm9yOiBJbnZhbGlkIHBhZ2UgYCcgLiBodG1sZW50aXRpZXMoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnc3RlcCcgKSApIC4gJy5waHAnIC4gJ2AufSc7CgkJZGllKCk7Cgl9CgkKLy8gSW1wb3J0IHN0ZXBzLgp9IGVsc2VpZiAoICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApICE9ICcnICkgJiYgaXNfbnVtZXJpYyggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApICkgKSB7CgkKCSRzdGVwID0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApOwoJaWYgKCAkc3RlcCA+IDEgKSB7CgkJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4KCX0KCQoJJHBhZ2UgPSBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NvbnRyb2xsZXJzL3BhZ2VzLycgLiBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3N0ZXAnICkgLiAnLnBocCc7CglpZiAoIGZpbGVfZXhpc3RzKCAkcGFnZSApICkgewoJCSRzdGVwID0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApOwoJCWVjaG8gJzwhLS0gU3RhcnRpbmcgc3RlcCAnIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3N0ZXAnICkgKSAuICcuIFBhZ2U6IGAnIC4gYmFzZW5hbWUoICRwYWdlICkgLiAnYC4gLS0+JzsKCQlyZXF1aXJlX29uY2UoICRwYWdlICk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmluaXNoZWQgc3RlcCAnIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3N0ZXAnICkgKSAuICcuJyApOwoJfSBlbHNlIHsKCQllY2hvICd7RXJyb3I6IEludmFsaWQgcGFnZSBgJyAuIGh0bWxlbnRpdGllcyggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApICkgLiAnLnBocCcgLiAnYC59JzsKCQlkaWUoKTsKCX0KCQovKioqKioqKioqKiBBU1NVTUUgREVGQVVMVCBQQUdFICoqKioqKioqKiovCn0gZWxzZSB7CglyZXF1aXJlX29uY2UoICcxLnBocCcgKTsKfQo/Pgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php
###PACKDATA,FILE_START,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php

###PACKDATA,FILE_END,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php
###PACKDATA,FILE_START,/classes/core.php,importbuddy/classes/core.php

###PACKDATA,FILE_END,/classes/core.php,importbuddy/classes/core.php
###PACKDATA,FILE_START,/classes/import.php,importbuddy/classes/import.php

###PACKDATA,FILE_END,/classes/import.php,importbuddy/classes/import.php
###PACKDATA,FILE_START,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
Ly8gbGVhbk1vZGFsIHYxLjEgYnkgUmF5IFN0b25lIC0gaHR0cDovL2ZpbmVseXNsaWNlZC5jb20uYXUKLy8gRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGFuZCBHUEwKCihmdW5jdGlvbigkKXskLmZuLmV4dGVuZCh7bGVhbk1vZGFsOmZ1bmN0aW9uKG9wdGlvbnMpe3ZhciBkZWZhdWx0cz17dG9wOjEwMCxvdmVybGF5OjAuNSxjbG9zZUJ1dHRvbjpudWxsfTt2YXIgb3ZlcmxheT0kKCI8ZGl2IGlkPSdsZWFuX292ZXJsYXknPjwvZGl2PiIpOyQoImJvZHkiKS5hcHBlbmQob3ZlcmxheSk7b3B0aW9ucz0kLmV4dGVuZChkZWZhdWx0cyxvcHRpb25zKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIG89b3B0aW9uczskKHRoaXMpLmNsaWNrKGZ1bmN0aW9uKGUpe3ZhciBtb2RhbF9pZD0kKHRoaXMpLmF0dHIoImhyZWYiKTskKCIjbGVhbl9vdmVybGF5IikuY2xpY2soZnVuY3Rpb24oKXtjbG9zZV9tb2RhbChtb2RhbF9pZCl9KTskKG8uY2xvc2VCdXR0b24pLmNsaWNrKGZ1bmN0aW9uKCl7Y2xvc2VfbW9kYWwobW9kYWxfaWQpfSk7dmFyIG1vZGFsX2hlaWdodD0kKG1vZGFsX2lkKS5vdXRlckhlaWdodCgpO3ZhciBtb2RhbF93aWR0aD0kKG1vZGFsX2lkKS5vdXRlcldpZHRoKCk7CiQoIiNsZWFuX292ZXJsYXkiKS5jc3MoeyJkaXNwbGF5IjoiYmxvY2siLG9wYWNpdHk6MH0pOyQoIiNsZWFuX292ZXJsYXkiKS5mYWRlVG8oMjAwLG8ub3ZlcmxheSk7JChtb2RhbF9pZCkuY3NzKHsiZGlzcGxheSI6ImJsb2NrIiwicG9zaXRpb24iOiJmaXhlZCIsIm9wYWNpdHkiOjAsInotaW5kZXgiOjk5OTk5LCJsZWZ0Ijo1MCsiJSIsIm1hcmdpbi1sZWZ0IjotKG1vZGFsX3dpZHRoLzIpKyJweCIsInRvcCI6by50b3ArInB4In0pOyQobW9kYWxfaWQpLmZhZGVUbygyMDAsMSk7ZS5wcmV2ZW50RGVmYXVsdCgpfSl9KTtmdW5jdGlvbiBjbG9zZV9tb2RhbChtb2RhbF9pZCl7JCgiI2xlYW5fb3ZlcmxheSIpLmZhZGVPdXQoMjAwKTskKG1vZGFsX2lkKS5jc3MoeyJkaXNwbGF5Ijoibm9uZSJ9KX19fSl9KShqUXVlcnkpOwo=
###PACKDATA,FILE_END,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
###PACKDATA,FILE_START,/js/jquery.joyride-2.0.3.js,importbuddy/js/jquery.joyride-2.0.3.js

###PACKDATA,FILE_END,/js/jquery.joyride-2.0.3.js,importbuddy/js/jquery.joyride-2.0.3.js
###PACKDATA,FILE_START,/js/modernizr.mq.js,importbuddy/js/modernizr.mq.js
LyogTW9kZXJuaXpyIDIuNi4xIChDdXN0b20gQnVpbGQpIHwgTUlUICYgQlNECiAqIEJ1aWxkOiBodHRwOi8vbW9kZXJuaXpyLmNvbS9kb3dubG9hZC8jLW1xLXRlc3RzdHlsZXMKICovCjsKCgoKd2luZG93Lk1vZGVybml6ciA9IChmdW5jdGlvbiggd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkICkgewoKICAgIHZhciB2ZXJzaW9uID0gJzIuNi4xJywKCiAgICBNb2Rlcm5penIgPSB7fSwKCgogICAgZG9jRWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwKCiAgICBtb2QgPSAnbW9kZXJuaXpyJywKICAgIG1vZEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG1vZCksCiAgICBtU3R5bGUgPSBtb2RFbGVtLnN0eWxlLAoKICAgIGlucHV0RWxlbSAgLAoKCiAgICB0b1N0cmluZyA9IHt9LnRvU3RyaW5nLCAgICB0ZXN0cyA9IHt9LAogICAgaW5wdXRzID0ge30sCiAgICBhdHRycyA9IHt9LAoKICAgIGNsYXNzZXMgPSBbXSwKCiAgICBzbGljZSA9IGNsYXNzZXMuc2xpY2UsCgogICAgZmVhdHVyZU5hbWUsIAoKCiAgICBpbmplY3RFbGVtZW50V2l0aFN0eWxlcyA9IGZ1bmN0aW9uKCBydWxlLCBjYWxsYmFjaywgbm9kZXMsIHRlc3RuYW1lcyApIHsKCiAgICAgIHZhciBzdHlsZSwgcmV0LCBub2RlLAogICAgICAgICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksCiAgICAgICAgICAgICAgICBib2R5ID0gZG9jdW1lbnQuYm9keSwKICAgICAgICAgICAgICAgIGZha2VCb2R5ID0gYm9keSA/IGJvZHkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib2R5Jyk7CgogICAgICBpZiAoIHBhcnNlSW50KG5vZGVzLCAxMCkgKSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIG5vZGVzLS0gKSB7CiAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgIG5vZGUuaWQgPSB0ZXN0bmFtZXMgPyB0ZXN0bmFtZXNbbm9kZXNdIDogbW9kICsgKG5vZGVzICsgMSk7CiAgICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKG5vZGUpOwogICAgICAgICAgfQogICAgICB9CgogICAgICAgICAgICAgICAgc3R5bGUgPSBbJyYjMTczOycsJzxzdHlsZSBpZD0icycsIG1vZCwgJyI+JywgcnVsZSwgJzwvc3R5bGU+J10uam9pbignJyk7CiAgICAgIGRpdi5pZCA9IG1vZDsKICAgICAgICAgIChib2R5ID8gZGl2IDogZmFrZUJvZHkpLmlubmVySFRNTCArPSBzdHlsZTsKICAgICAgZmFrZUJvZHkuYXBwZW5kQ2hpbGQoZGl2KTsKICAgICAgaWYgKCAhYm9keSApIHsKICAgICAgICAgICAgICAgIGZha2VCb2R5LnN0eWxlLmJhY2tncm91bmQgPSAiIjsKICAgICAgICAgIGRvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoZmFrZUJvZHkpOwogICAgICB9CgogICAgICByZXQgPSBjYWxsYmFjayhkaXYsIHJ1bGUpOwogICAgICAgICFib2R5ID8gZmFrZUJvZHkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChmYWtlQm9keSkgOiBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpOwoKICAgICAgcmV0dXJuICEhcmV0OwoKICAgIH0sCgogICAgdGVzdE1lZGlhUXVlcnkgPSBmdW5jdGlvbiggbXEgKSB7CgogICAgICB2YXIgbWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhIHx8IHdpbmRvdy5tc01hdGNoTWVkaWE7CiAgICAgIGlmICggbWF0Y2hNZWRpYSApIHsKICAgICAgICByZXR1cm4gbWF0Y2hNZWRpYShtcSkubWF0Y2hlczsKICAgICAgfQoKICAgICAgdmFyIGJvb2w7CgogICAgICBpbmplY3RFbGVtZW50V2l0aFN0eWxlcygnQG1lZGlhICcgKyBtcSArICcgeyAjJyArIG1vZCArICcgeyBwb3NpdGlvbjogYWJzb2x1dGU7IH0gfScsIGZ1bmN0aW9uKCBub2RlICkgewogICAgICAgIGJvb2wgPSAod2luZG93LmdldENvbXB1dGVkU3R5bGUgPwogICAgICAgICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpIDoKICAgICAgICAgICAgICAgICAgbm9kZS5jdXJyZW50U3R5bGUpWydwb3NpdGlvbiddID09ICdhYnNvbHV0ZSc7CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIGJvb2w7CgogICAgIH0sCiAgICBfaGFzT3duUHJvcGVydHkgPSAoe30pLmhhc093blByb3BlcnR5LCBoYXNPd25Qcm9wOwoKICAgIGlmICggIWlzKF9oYXNPd25Qcm9wZXJ0eSwgJ3VuZGVmaW5lZCcpICYmICFpcyhfaGFzT3duUHJvcGVydHkuY2FsbCwgJ3VuZGVmaW5lZCcpICkgewogICAgICBoYXNPd25Qcm9wID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHkpIHsKICAgICAgICByZXR1cm4gX2hhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7CiAgICAgIH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgaGFzT3duUHJvcCA9IGZ1bmN0aW9uIChvYmplY3QsIHByb3BlcnR5KSB7IAogICAgICAgIHJldHVybiAoKHByb3BlcnR5IGluIG9iamVjdCkgJiYgaXMob2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZVtwcm9wZXJ0eV0sICd1bmRlZmluZWQnKSk7CiAgICAgIH07CiAgICB9CgoKICAgIGlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHsKICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHsKCiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7CgogICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksCiAgICAgICAgICAgIGJvdW5kID0gZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkgewoKICAgICAgICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uKCl7fTsKICAgICAgICAgICAgICBGLnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7CiAgICAgICAgICAgICAgdmFyIHNlbGYgPSBuZXcgRigpOwoKICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KAogICAgICAgICAgICAgICAgICBzZWxmLAogICAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gc2VsZjsKCiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoCiAgICAgICAgICAgICAgICAgIHRoYXQsCiAgICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkKICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgfQoKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gYm91bmQ7CiAgICAgIH07CiAgICB9CgogICAgZnVuY3Rpb24gc2V0Q3NzKCBzdHIgKSB7CiAgICAgICAgbVN0eWxlLmNzc1RleHQgPSBzdHI7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0Q3NzQWxsKCBzdHIxLCBzdHIyICkgewogICAgICAgIHJldHVybiBzZXRDc3MocHJlZml4ZXMuam9pbihzdHIxICsgJzsnKSArICggc3RyMiB8fCAnJyApKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpcyggb2JqLCB0eXBlICkgewogICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSB0eXBlOwogICAgfQoKICAgIGZ1bmN0aW9uIGNvbnRhaW5zKCBzdHIsIHN1YnN0ciApIHsKICAgICAgICByZXR1cm4gISF+KCcnICsgc3RyKS5pbmRleE9mKHN1YnN0cik7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHRlc3RET01Qcm9wcyggcHJvcHMsIG9iaiwgZWxlbSApIHsKICAgICAgICBmb3IgKCB2YXIgaSBpbiBwcm9wcyApIHsKICAgICAgICAgICAgdmFyIGl0ZW0gPSBvYmpbcHJvcHNbaV1dOwogICAgICAgICAgICBpZiAoIGl0ZW0gIT09IHVuZGVmaW5lZCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtID09PSBmYWxzZSkgcmV0dXJuIHByb3BzW2ldOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpcyhpdGVtLCAnZnVuY3Rpb24nKSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uYmluZChlbGVtIHx8IG9iaik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgZm9yICggdmFyIGZlYXR1cmUgaW4gdGVzdHMgKSB7CiAgICAgICAgaWYgKCBoYXNPd25Qcm9wKHRlc3RzLCBmZWF0dXJlKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU5hbWUgID0gZmVhdHVyZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICBNb2Rlcm5penJbZmVhdHVyZU5hbWVdID0gdGVzdHNbZmVhdHVyZV0oKTsKCiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgoTW9kZXJuaXpyW2ZlYXR1cmVOYW1lXSA/ICcnIDogJ25vLScpICsgZmVhdHVyZU5hbWUpOwogICAgICAgIH0KICAgIH0KCgoKICAgICBNb2Rlcm5penIuYWRkVGVzdCA9IGZ1bmN0aW9uICggZmVhdHVyZSwgdGVzdCApIHsKICAgICAgIGlmICggdHlwZW9mIGZlYXR1cmUgPT0gJ29iamVjdCcgKSB7CiAgICAgICAgIGZvciAoIHZhciBrZXkgaW4gZmVhdHVyZSApIHsKICAgICAgICAgICBpZiAoIGhhc093blByb3AoIGZlYXR1cmUsIGtleSApICkgewogICAgICAgICAgICAgTW9kZXJuaXpyLmFkZFRlc3QoIGtleSwgZmVhdHVyZVsga2V5IF0gKTsKICAgICAgICAgICB9CiAgICAgICAgIH0KICAgICAgIH0gZWxzZSB7CgogICAgICAgICBmZWF0dXJlID0gZmVhdHVyZS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgaWYgKCBNb2Rlcm5penJbZmVhdHVyZV0gIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNb2Rlcm5penI7CiAgICAgICAgIH0KCiAgICAgICAgIHRlc3QgPSB0eXBlb2YgdGVzdCA9PSAnZnVuY3Rpb24nID8gdGVzdCgpIDogdGVzdDsKCiAgICAgICAgIGlmIChlbmFibGVDbGFzc2VzKSB7CiAgICAgICAgICAgZG9jRWxlbWVudC5jbGFzc05hbWUgKz0gJyAnICsgKHRlc3QgPyAnJyA6ICduby0nKSArIGZlYXR1cmU7CiAgICAgICAgIH0KICAgICAgICAgTW9kZXJuaXpyW2ZlYXR1cmVdID0gdGVzdDsKCiAgICAgICB9CgogICAgICAgcmV0dXJuIE1vZGVybml6cjsgCiAgICAgfTsKCgogICAgc2V0Q3NzKCcnKTsKICAgIG1vZEVsZW0gPSBpbnB1dEVsZW0gPSBudWxsOwoKCiAgICBNb2Rlcm5penIuX3ZlcnNpb24gICAgICA9IHZlcnNpb247CgoKICAgIE1vZGVybml6ci5tcSAgICAgICAgICAgID0gdGVzdE1lZGlhUXVlcnk7CiAgICBNb2Rlcm5penIudGVzdFN0eWxlcyAgICA9IGluamVjdEVsZW1lbnRXaXRoU3R5bGVzOwogICAgcmV0dXJuIE1vZGVybml6cjsKCn0pKHRoaXMsIHRoaXMuZG9jdW1lbnQpOwo7
###PACKDATA,FILE_END,/js/modernizr.mq.js,importbuddy/js/modernizr.mq.js
###PACKDATA,FILE_START,/css/joyride.css,importbuddy/css/joyride.css

###PACKDATA,FILE_END,/css/joyride.css,importbuddy/css/joyride.css
###PACKDATA,FILE_START,/images/working.gif,importbuddy/images/working.gif
R0lGODlhKwALAPEAAPn5+SiKt5LC2CiKtyH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAKwALAAACMoSOCMuW2diD88UKG95W88uF4DaGWFmhZid93pq+pwxnLUnXh8ou+sSz+T64oCAyTBUAACH5BAkKAAAALAAAAAArAAsAAAI9xI4IyyAPYWOxmoTHrHzzmGHe94xkmJifyqFKQ0pwLLgHa82xrekkDrIBZRQab1jyfY7KTtPimixiUsevAAAh+QQJCgAAACwAAAAAKwALAAACPYSOCMswD2FjqZpqW9xv4g8KE7d54XmMpNSgqLoOpgvC60xjNonnyc7p+VKamKw1zDCMR8rp8pksYlKorgAAIfkECQoAAAAsAAAAACsACwAAAkCEjgjLltnYmJS6Bxt+sfq5ZUyoNJ9HHlEqdCfFrqn7DrE2m7Wdj/2y45FkQ13t5itKdshFExC8YCLOEBX6AhQAADs=
###PACKDATA,FILE_END,/images/working.gif,importbuddy/images/working.gif
###PACKDATA,FILE_START,/images/bullet_go.png,importbuddy/images/bullet_go.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEsSURBVDjLY/j//z8DJZhhmBuQvdj8a+p8w//xc3U5yTIgeb7h18bNUf/DZ2j8958qz0nQgPyltv9zF5v/TV9o/Ddxrv7fmvWh/1ednvi/ZLX/f9d+8b+23YI8eA0AOvn/hnPT/q89OwWsccXpCf8n7Cn5v/B41/+MpW7/TdvZ/+o2M/LjNADoZLDmvl35/zt3ZP9v3Zb2v2Fz4v+mren/Zxxq/h+zwOa/aj3DH5wGRM/W/L/y1IT/S0/0/l94rOv/vKMdQEOy/k8/1PQ/banHf8VahlfSlQwGOA0InK74z3Oi9D/nftF/1t38/+LmW/2fdrDhf9Jit//ytQzPJSsZtEiKBe1mxq/xC53/y1czPAFqVic5GoFO/ipXzfxftJJBkeyUKFzOwDm48wIAh5XH+g7drOwAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/bullet_go.png,importbuddy/images/bullet_go.png
###PACKDATA,FILE_START,/images/favicon.png,importbuddy/images/favicon.png
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
###PACKDATA,FILE_END,/images/favicon.png,importbuddy/images/favicon.png
###PACKDATA,FILE_START,/images/sort_down.png,importbuddy/images/sort_down.png
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAHBJREFUeNqMkD0OABEQRmcmVChIqN3/WBJHoLVYxK7GK4TvZwIMIcANrC0xxpJSOkzOOXjvASvUBOdcOxzBoXeDRhO11p+QlBKEEKtNc2OMAcbYKxL1aTsrWE201u4lPB4zUUphzrn8r9HA2+95BBgA3YASwqCieowAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/sort_down.png,importbuddy/images/sort_down.png
###PACKDATA,FILE_START,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
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
###PACKDATA,FILE_END,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
###PACKDATA,FILE_START,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php

###PACKDATA,FILE_END,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php
###PACKDATA,FILE_START,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
MS4wLjAgLSAyMDExLTA4LTE4IC0gRHVzdGluIEJvbHRvbgoJQ3JlYXRlZCBkYnJlcGxhY2UgY2xhc3Mu
###PACKDATA,FILE_END,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
###PACKDATA,FILE_START,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
###PACKDATA,FILE_START,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
PD9waHAKLy8gVE9ETzogRXZlbnR1YWxseSBwdWxsIG91dCBhbGwgY29tbWFuZCBsaW5lIGV4ZWN1dGlvbiB0byBydW4gdGhyb3VnaCB0aGlzIGxpYnJhcnkuCi8vCQlDdXJyZW50bHkgY29kZSBpcyBkdWNwbGljYXRlZCBiZXR3ZWVuIHRoZSBsaWJyYXJpZXMgdGhhdCBydW4gY29tbWFuZCBsaW5lIGNvbW1hbmRzLgoKY2xhc3MgcGJfYmFja3VwYnVkZHlfY29tbWFuZGJ1ZGR5IHsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkgewoJfQoJCgkvKglleGVjdXRlKCkKCSAqCQoJICoJRXhlY3V0ZSBhIGNvbW1hbmQgdmlhIHRoZSBjb21tYW5kIGxpbmUuCgkgKglFeGFtcGxlIHVzYWdlOgoJICoJCWxpc3QoICRleGVjX291dHB1dCwgJGV4ZWNfZXhpdF9jb2RlICkgPSAkdGhpcy0+ZXhlY3V0ZSggJ0NPTU1BTkRISEVSRScgKTsKCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRjb21tYW5kCQlDb21tYW5kIGxpbmUgdG8gcnVuLgoJICoJQHJldHVybgkJYXJyYXkJCQkJCQlBc3NvY2lhdGl2ZSBhcnJheSBvZiB0aGUgcmVzcG9uc2Ugb3V0cHV0IGFuZCBleGlzdCBjb2RlLiBVc2Ugd2l0aCBsaXN0IHRvIGFzc2lnbiB2YXJpYWJsZXMuCgkgKgkJCQkJCQkJCQkJRm9ybWF0OiBhcnJheSggRVhFQ19PVVRQVVQsIEVYSVRfQ09ERSApOwoJICovCglwdWJsaWMgZnVuY3Rpb24gZXhlY3V0ZSggJGNvbW1hbmQgKSB7CgkJaWYgKCBzdHJpc3RyKCBQSFBfT1MsICdXSU4nICkgJiYgIXN0cmlzdHIoIFBIUF9PUywgJ0RBUldJTicgKSApIHsKCQkJLy8gV2luZG93czsgZG8gbm90aGluZy4KCQl9IGVsc2UgeyAvLyBMaW51eC9NYWMKCQkJaWYgKCAoIGluaV9nZXQoICdleGVjX2RpcicgKSAhPT0gZmFsc2UgKSAmJiAoIGluaV9nZXQoICdleGVjX2RpcicgKSAhPSAnJyApICkgeyAvLyBleGVjX2RpciBQSFAgcGF0Y2ggaW4gcGxhY2U6IGh0dHA6Ly93d3cua3liZXJkaWdpLmN6L3Byb2plY3RzL2V4ZWNkaXIvCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjX2RpciBkZXRlY3RlZC4gU2tpcHBpbmcgcGF0aCBhc3NpZ25tZW50LicgKTsKCQkJfSBlbHNlIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ2V4ZWNfZGlyIG5vdCBkZXRlY3RlZC4gUHJvY2VlZGluZyBub3JtYWxseS4nICk7CgkJCQkkY29tbWFuZCA9ICdQQVRIPSRQQVRIOi91c3IvYmluLzovdXNyL2xvY2FsL2Jpbi86dXNyL2xvY2FsL2JpbjovdXNyL2xvY2FsL3NiaW4vOi91c3Ivc2Jpbi86L3NiaW4vOi91c3IvOi9iaW4vJyAuICc7ICcgLiAkY29tbWFuZDsKCQkJfQoJCX0KCQkKCQkvLyBPdXRwdXQgY29tbWFuZCAoc3RyaXBzIG15c3FsZHVtcCBwYXNzd29yZHMpLgoJCWlmICggc3Ryc3RyKCAkY29tbWFuZCwgJy0tcGFzc3dvcmQ9JyApICkgewoJCQkkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiA9IHN0cnBvcyggJGNvbW1hbmQsICctLXBhc3N3b3JkPScgKTsKCQkJJHBhc3N3b3JkX3BvcnRpb25fZW5kID0gc3RycG9zKCAkY29tbWFuZCwgJyAnLCAkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiApOwoJCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ3Bhc3Mgc3RhcnQ6IGAnIC4gJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gLiAnYC4gcGFzcyBlbmQ6IGAnIC4gJHBhc3N3b3JkX3BvcnRpb25fZW5kIC4gJ2AnICk7CgkJCSRwYXNzd29yZF9wb3J0aW9uID0gc3Vic3RyKCAkY29tbWFuZCwgJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4sICggJHBhc3N3b3JkX3BvcnRpb25fZW5kIC0gJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gKSApOwoJCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ3Bhc3MgcG9ydGlvbjogYCcgLiAkcGFzc3dvcmRfcG9ydGlvbiAuICdgLicgKTsKCQkJJHVucGFzc3dvcmRlZF9jb21tYW5kID0gc3RyX3JlcGxhY2UoICRwYXNzd29yZF9wb3J0aW9uLCAnLS1wYXNzd29yZD0qSElEREVOKicsICRjb21tYW5kICk7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ2V4ZWMoKSBjb21tYW5kIChwYXNzd29yZCBoaWRkZW4pIGAnIC4gJHVucGFzc3dvcmRlZF9jb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7CgkJCXVuc2V0KCAkdW5wYXNzd29yZGVkX2NvbW1hbmQgKTsKCQl9IGVsc2UgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjKCkgY29tbWFuZCBgJyAuICRjb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7CgkJfQoJCQoJCSRleGVjX291dHB1dCA9IGFycmF5KCk7CgkJQGV4ZWMoICRjb21tYW5kLCAkZXhlY19vdXRwdXQsICRleGVjX2V4aXRfY29kZSk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnZXhlYygpIGNvbW1hbmQgb3V0cHV0OiBgJyAuIGltcGxvZGUoICcsJywgJGV4ZWNfb3V0cHV0ICkgLiAnYDsgRXhpdCBjb2RlOiBgJyAuICRleGVjX2V4aXRfY29kZSAuICdgOyBFeGl0IGNvZGUgZGVzY3JpcHRpb246IGAnIC4gcGJfYmFja3VwYnVkZHk6OiRmaWxlc3lzdGVtLT5leGl0X2NvZGVfbG9va3VwKCAkZXhlY19leGl0X2NvZGUgKSAuICdgJyApOwoJCQoJCXJldHVybiBhcnJheSggJGV4ZWNfb3V0cHV0LCAkZXhlY19leGl0X2NvZGUgKTsKCX0gLy8gRW5kIGV4ZWN1dGUoKS4KfQ==
###PACKDATA,FILE_END,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
###PACKDATA,FILE_START,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
###PACKDATA,FILE_START,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
Mi4wLjAgLSAyMDExLTEwLTA4IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgaGlzdG9yeS50eHQuCglBZGRlZCB1bnppcCBmdW5jdGlvbmFsaXR5Lg==
###PACKDATA,FILE_END,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
###PACKDATA,FILE_START,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
###PACKDATA,FILE_START,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php

###PACKDATA,FILE_END,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php
PD9waHAKLyoqCiAqCXBsdWdpbmJ1ZGR5X3piZGlyIENsYXNzCiAqCiAqICBQcm92aWRlcyBhIGRpcmVjdG9yeSBjbGFzcyBmb3IgemlwYnVkZHkgZm9yIGJ1aWxkaW5nIGEgZGlyZWN0b3J5IHRyZWUgZm9yIGJhY2t1cAogKgkKICoJVmVyc2lvbjogMS4wLjAKICoJQXV0aG9yOgogKglBdXRob3IgVVJJOgogKgogKglAcGFyYW0JCSRwYXJlbnQJCW9iamVjdAkJT3B0aW9uYWwgcGFyZW50IG9iamVjdCB3aGljaCBjYW4gcHJvdmlkZSBmdW5jdGlvbnMgZm9yIHJlcG9ydGluZywgZXRjLgogKglAcmV0dXJuCQludWxsCiAqCiAqLwppZiAoICFjbGFzc19leGlzdHMoICJwbHVnaW5idWRkeV96YmRpciIgKSApIHsKCgljbGFzcyBwbHVnaW5idWRkeV96YmRpciB7CgkKCQkvLyBzdGF0dXMgbWV0aG9kIHR5cGUgcGFyYW1ldGVyIHZhbHVlcyAtIHdvdWxkIGxpa2UgYSBjbGFzcyBmb3IgdGhpcwoJCWNvbnN0IFNUQVRVU19UWVBFX0RFVEFJTFMgPSAnZGV0YWlscyc7CgkJY29uc3QgTk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SID0gJy8nOwoJCWNvbnN0IERJUkVDVE9SWV9TRVBBUkFUT1JTID0gJy9cXCc7CgoJCXB1YmxpYyAkX3ZlcnNpb24gPSAnMS4wJzsKCgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBwYXRoIG9mIHRoaXMgZGlyZWN0b3J5IG5vZGUKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIHBhdGggc3RyaW5nCiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfcGF0aCA9ICIiOwogICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhYnNvbHV0ZSBwYXRocyB0byBiZSBleGNsdWRlZCwgbXVzdCBiZSAvIHRlcm1pbmF0ZWQKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIHBhdGhzX3RvX2V4Y2x1ZGUgYXJyYXkgb2Ygc3RyaW5nCiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfcGF0aHNfdG9fZXhjbHVkZSA9IGFycmF5KCk7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBkaXJlY3RvcnkgbGlzdGluZyBpdGVtcyB0byBiZSBpZ25vcmVkCiAgICAgICAgICogCiAgICAgICAgICogQHZhciBpdGVtc190b19pZ25vcmUgYXJyYXkgb2Ygc3RyaW5nCiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfaXRlbXNfdG9faWdub3JlID0gYXJyYXkoICIuIiwgIi4uIiwgIi5EU19TdG9yZSIgKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGl0ZW1zIHRoYXQgYXJlIHRlcm1pbmFscyBhbmQgd2UgY2FuIGFkZCBkaXJlY3RseSBmb3IgdGhpcyBkaXJlY3RvcnkgKGFic29sdXRlIHBhdGhzKQogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgdGVybWluYWxzIGFycmF5IG9mIHN0cmluZwogICAgICAgICAqLwogICAgICAgIHByb3RlY3RlZCAkX3Rlcm1pbmFscyA9IGFycmF5KCk7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBicmFuY2ggbm9kZXMgb2Ygc3Vib3JkaW5hdGUgZGlyZWN0b3JpZXMgdGhhdCBhcmUgb24gYW4gZXhjbHVzaW9uIHBhdGgKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIGJyYW5jaGVzIGFycmF5IG9mIHN0cmluZyA9PiBwbHVnaW5idWRkeV96YmRpcgogICAgICAgICAqLwogICAgICAgIHByb3RlY3RlZCAkX2JyYW5jaGVzID0gYXJyYXkoKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogV2hldGhlciBvciBub3Qgd2UgY2FuIGNhbGwgYSBzdGF0dXMgY2FsYmFjawogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgaGF2ZV9zdGF0dXNfY2FsbGJhY2sgYm9vbAogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX2hhdmVfc3RhdHVzX2NhbGxiYWNrID0gZmFsc2U7CgkJCiAgICAgICAgLyoqCiAgICAgICAgICogT2JqZWN0LT5tZXRob2QgYXJyYXkgZm9yIHN0YXR1cyBmdW5jdGlvbgogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgc3RhdHVzX2NhbGxiYWNrIGFycmF5CiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfc3RhdHVzX2NhbGxiYWNrID0gYXJyYXkoKTsKCQkKCQkvKioKCQkgKglfX2NvbnN0cnVjdCgpCgkJICoJCgkJICoJRGVmYXVsdCBjb25zdHJ1Y3Rvci4KCQkgKgkKCQkgKglAcGFyYW0JCXN0cmluZwkJJHBhdGgJCQlUaGUgcGF0aCB0byBmb3JtIGEgbm9kZSBmb3IKCQkgKglAcGFyYW0JCWFycmF5CQkkZXhjbHVkZXMJCVRoZSBsaXN0IG9mIGRpcnMvZmlsZXMgdG8gZXhjbHVkZSAoYWJzb2x1dGUgcGF0aHMgd2l0aCAvIHRlcm1pbmF0b3IgZm9yIGRpcnMpCgkJICoJQHJldHVybgkJbnVsbAoJCSAqCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCAkcGF0aCwgJGV4Y2x1ZGVzID0gYXJyYXkoKSApIHsKCgkJCS8vIE5vcm1hbGl6ZSB0aGUgdHJhaWxpbmcgZGlyZWN0b3J5IHNlcGFyYXRvciBvbiB0aGUgcGF0aAoJCQkkcGF0aCA9IHJ0cmltKCAkcGF0aCwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsKCQkJCgkJCS8vIE5vcm1hbGl6ZSBwbGF0Zm9ybSBzcGVjaWZpYyBkaXJlY3Rvcnkgc2VwYXJhdG9ycyBpbiBwYXRoCgkJCSR0aGlzLT5fcGF0aCA9IHN0cl9yZXBsYWNlKCBESVJFQ1RPUllfU0VQQVJBVE9SLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IsICRwYXRoICk7CgkJCQoJCQkkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgPSAkZXhjbHVkZXM7CgkJCQoJCQkkY29udGVudCA9IHNjYW5kaXIoICR0aGlzLT5fcGF0aCApOyAvLyBHZXQgdGhlIGRpcmVjdG9yeSBjb250ZW50LCB3aWxsIGJlIHNpbXBsZSBuYW1lcwoJCQkKCQkJLy8gUHJvY2VzcyBlYWNoIGl0ZW0gZm9yIGlnbm9yaW5nLCB0cmVhdGluZyBhcyBhIHRlcm1pbmFsIG9yIGFzIGEgYnJhbmNoCgkJCWZvcmVhY2ggKCAkY29udGVudCBhcyAmJGl0ZW0gKSB7CgoJCQkJLy8gSW5pdGlhbGx5IGNoZWNrIHRoZSBzaW1wbGUgbmFtZQoJCQkJaWYgKCBpbl9hcnJheSggJGl0ZW0sICR0aGlzLT5faXRlbXNfdG9faWdub3JlICkgKSB7CgoJCQkJCS8vIFRoaXMgaXMganVzdCBmbHVmZiBpbiB0aGUgZGlyZWN0b3J5IGxpc3RpbmcKCQkJCQljb250aW51ZTsKCQkJCQkKCQkJCX0gZWxzZWlmICggaXNfZGlyKCAoICR0aGlzLT5fcGF0aCAuICRpdGVtICkgKSApIHsKCgkJCQkJLy8gSXQncyBhIGRpcmVjdG9yeSwgY2hlY2sgZm9yIG1hdGNoaW5nIGV4Y2x1c2lvbiBvciBiZWluZyBwcmVmaXggb2YgZXhjbHVzaW9uCgkJCQkJaWYgKCBpbl9hcnJheSggKCAkdGhpcy0+X3BhdGggLiAkaXRlbSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiApLCAkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgKSApIHsKCQkJCQkKCQkJCQkJLy8gRXhhY3QgbWF0Y2ggdG8gYW4gZXhjbHVzaW9uLCBleGNsdWRlIHRoaXMgZGlyZWN0b3J5IGNvbXBsZXRlbHkKCQkJCQkJY29udGludWU7CgkJCQkJCQoJCQkJCX0gZWxzZWlmICggJHRoaXMtPmluX2FycmF5X3ByZWZpeCggKCAkdGhpcy0+X3BhdGggLiAkaXRlbSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiApLCAkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgKSApIHsKCgkJCQkJCS8vIE5lZWQgYSBuZXcgbm9kZSwgYWRkIHRvIHRoZSBub2RlIGFycmF5IChhYnNvbHV0ZSBkaXIgcGF0aCBpcyBrZXkpCgkJCQkJCSR0aGlzLT5fYnJhbmNoZXNbICggJHRoaXMtPl9wYXRoIC4gJGl0ZW0gKSBdID0gbmV3IHBsdWdpbmJ1ZGR5X3piZGlyKCAoICR0aGlzLT5fcGF0aCAuICRpdGVtIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SICksICR0aGlzLT5fcGF0aHNfdG9fZXhjbHVkZSwgJHRoaXMgKTsKCQkJCQkJCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJLy8gTmVpdGhlciBleGNsdXNpb24gbm9yIGV4Y2x1c2lvbiBwcmVmaXggc28gd2VsbCB0cmVhdCBpdCBhcyBhIHRlcm1pbmFsCgkJCQkJCSR0aGlzLT5fdGVybWluYWxzW10gPSAoICR0aGlzLT5fcGF0aCAuICRpdGVtICk7CgkJCQkJCgkJCQkJfQoJCQkJCQoJCQkJfSBlbHNlIHsKCgkJCQkJLy8gQXNzdW1lIGl0J3MgYSBmaWxlLCBjaGVjayBmb3IgbWF0Y2hpbmcgZXhjbHVzaW9uCgkJCQkJaWYgKCBpbl9hcnJheSggKCAkdGhpcy0+X3BhdGggLiAkaXRlbSApLCAkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgKSApIHsKCQkJCQkKCQkJCQkJLy8gRXhhY3QgbWF0Y2ggdG8gYW4gZXhjbHVzaW9uLCBleGNsdWRlIHRoaXMgZmlsZSBjb21wbGV0ZWx5CgkJCQkJCWNvbnRpbnVlOwoJCQkJCQkKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBOb3QgYW4gZXhjbHVzaW9uIHNvIGl0J3MgYSB0ZXJtaW5hbAoJCQkJCQkkdGhpcy0+X3Rlcm1pbmFsc1tdID0gKCAkdGhpcy0+X3BhdGggLiAkaXRlbSApOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQl9CQoJCQl9CgkJCQkJCQkKCQl9CgkJCgkJLyoqCgkJICoJX19kZXN0cnVjdCgpCgkJICoJCgkJICoJRGVmYXVsdCBkZXN0cnVjdG9yLgoJCSAqCQoJCSAqCUByZXR1cm4JCW51bGwKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCApIHsKCgkJfQoJCQkJCgkJLyoqCgkJICoJc2V0X3N0YXR1c19jYWxsYmFjaygpCgkJICoKCQkgKglTZXRzIGEgcmVmZXJlbmNlIHRvIHRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHN0YXR1cyB1cGRhdGUuCgkJICogIEFyZ3VtZW50IG11c3QgYXQgbGVhc3QgYmUgYSBub24tZW1wdHkgYXJyYXkgd2l0aCAyIGVsZW1lbnRzCgkJICoKCQkgKglAcGFyYW0JCWFycmF5IAkkY2FsbGJhY2sJT2JqZWN0LT5tZXRob2QgdG8gY2FsbCBmb3Igc3RhdHVzIHVwZGF0ZXMuCgkJICoJQHJldHVybgkJbnVsbAoJCSAqCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIHNldF9zdGF0dXNfY2FsbGJhY2soICRjYWxsYmFjayA9IGFycmF5KCkgKSB7CgkJCgkJCWlmICggaXNfYXJyYXkoICRjYWxsYmFjayApICYmICFlbXB0eSggJGNhbGxiYWNrICkgJiYgKCAyID09IGNvdW50KCAkY2FsbGJhY2sgKSApICkgewoJCQkKCQkJCSR0aGlzLT5fc3RhdHVzX2NhbGxiYWNrID0gJGNhbGxiYWNrOwoJCQkJJHRoaXMtPl9oYXZlX3N0YXR1c19jYWxsYmFjayA9IHRydWU7CgoJCQl9CgkJCQoJCX0KCQkKCQkvKioKCQkgKglzdGF0dXMoKQoJCSAqCQoJCSAqCUludm9rZSBzdGF0dXMgbWV0aG9kIG9mIHBhcmVudCBpZiBpdCBleGlzdHMKCQkgKiAgTXVzdCBiZSBhdCBsZWFzdCBvbmUgcGFyYW1ldGVyIG90aGVyd2lzZSBpZ25vcmUgdGhlIGNhbGwKCQkgKgkKCQkgKglAcGFyYW0JCXN0cmluZwkJJHR5cGUJCShFeHBlY3RlZCkgU3RhdHVzIG1lc3NhZ2UgdHlwZS4KCQkgKglAcGFyYW0JCXN0cmluZwkJJG1lc3NhZ2UJKEV4cGVjdGVkKSBTdGF0dXMgbWVzc2FnZS4KCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gc3RhdHVzKCkgewoJCQoJCQlpZiAoICR0aGlzLT5faGF2ZV9zdGF0dXNfY2FsbGJhY2sgJiYgKCBmdW5jX251bV9hcmdzKCkgPiAwICkgKSB7CgoJCQkJJGFyZ3MgPSBmdW5jX2dldF9hcmdzKCk7CgkJCQljYWxsX3VzZXJfZnVuY19hcnJheSggJHRoaXMtPl9zdGF0dXNfY2FsbGJhY2ssICRhcmdzICk7CgkJCQkKCQkJfQoJCQkKCQl9CgkJCgkJLyoqCgkJICoJZ2V0X3Rlcm1pbmFscygpCgkJICoJCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgdGVybWluYWxzIGZyb20gdGhpcyBkaXIgcGx1cyBzdWJvcmRpbmF0ZXMKCQkgKgkKCQkgKglAcmV0dXJuCQlhcnJheQlGbGF0IGFycmF5IG9mIHRlcm1pbmFsIGZpbGVuYW1lcyBhbmQgZGlyZWN0b3J5IG5hbWVzCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X3Rlcm1pbmFscyggKSB7CgkJCgkJCS8vIE1pbmltdW0gaXMgb3VyIHRlcm1pbmFscwoJCQkkYWxsX3Rlcm1pbmFscyA9ICR0aGlzLT5fdGVybWluYWxzOwoJCQkKCQkJLy8gTm93IGFkZCB0ZXJtaW5hbHMgZnJvbSBlYWNoIHN1Ym9yZGluYXRlCgkJCWZvcmVhY2ggKCAkdGhpcy0+X2JyYW5jaGVzIGFzICRicmFuY2ggKSB7CgkJCQoJCQkJJGFsbF90ZXJtaW5hbHMgPSBhcnJheV9tZXJnZSggJGFsbF90ZXJtaW5hbHMsICRicmFuY2gtPmdldF90ZXJtaW5hbHMoKSApOwoJCQkJCgkJCX0KCQkJCgkJCXJldHVybiAkYWxsX3Rlcm1pbmFsczsKCQkJCgkJfQoJCQoJCS8qKgoJCSAqCWdldF9yZWxhdGl2ZV9leGNsdWRlcygpCgkJICoJCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgZXhjbHVzaW9ucyB3aXRoIG9wdGlvbmFsIGRpcmVjdG9yeSBwcmVmaXggcmVtb3ZlZAoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCVRoZSBiYXNlIGRpcmVjdG9yeSBwcmVmaXggdG8gYmUgcmVtb3ZlZAoJCSAqCUByZXR1cm4JCWFycmF5CUZsYXQgYXJyYXkgb2YgcmVsYXRpdmUgKHRvIHNpdGUgcm9vdCkgZXhjbHVkZWQgZmlsZW5hbWVzIGFuZCBkaXJlY3RvcnkgbmFtZXMKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfcmVsYXRpdmVfZXhjbHVkZXMoICRiYXNlID0gJycgKSB7CgkJCgkJCS8vIFRoZSBiYXNlZGlyIG11c3QgaGF2ZSBhIHRyYWlsaW5nIG5vcm1hbGl6ZWQgZGlyZWN0b3J5IHNlcGFyYXRvcgoJCQkkYmFzZWRpciA9ICggcnRyaW0oIHRyaW0oICRiYXNlICksIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICkgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsKCQkKCQkJLy8gTm9ybWFsaXplIHBsYXRmb3JtIHNwZWNpZmljIGRpcmVjdG9yeSBzZXBhcmF0b3JzIGluIHBhdGgKCQkJJGJhc2VkaXIgPSBzdHJfcmVwbGFjZSggRElSRUNUT1JZX1NFUEFSQVRPUiwgc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SLCAkYmFzZWRpciApOwoJCQkKCQkJJHJlbGF0aXZlX2V4Y2x1ZGVzID0gJHRoaXMtPl9wYXRoc190b19leGNsdWRlOwoJCQkKCQkJZm9yZWFjaCAoICRyZWxhdGl2ZV9leGNsdWRlcyBhcyAmJGV4Y2x1ZGUgKSB7CgkJCQoJCQkJLy8gUmVtb3ZlIGJhc2UgcHJlZml4IGJ1dCBsZWF2ZSBsZWFkaW5nIG5vcm1hbGl6ZWQgZGlyZWN0b3J5IHNlcGFyYXRvcgoJCQkJJGV4Y2x1ZGUgPSBzdHJfcmVwbGFjZSggcnRyaW0oICRiYXNlZGlyLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgKSwgJycsICRleGNsdWRlICk7CgkJCQoJCQl9CgkJCQoJCQlyZXR1cm4gJHJlbGF0aXZlX2V4Y2x1ZGVzOwoJCQkKCQl9CgkJCgkJLyoqCgkJICoJaW5fYXJyYXlfcHJlZml4KCkKCQkgKgkKCQkgKglDaGVjayBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgcHJlZml4IG9mIGFueSBzdHJpbmcgaW4gdGhlIGdpdmVuIGFycmF5CgkJICoJCgkJICogIEBwYXJhbQkJc3RyaW5nCSRwcmVmaXgJCVRoZSBwcmVmaXggc3RyaW5nCgkJICogIEBwYXJhbQkJYXJyYXkJJGNhbmRpZGF0ZXMJVGhlIGFycmF5IG9mIHN0cmluZ3MKCQkgKglAcmV0dXJuCQlib29sCXRydWUgaWYgdGhlIHN0cmluZyBpcyBhIHByZWZpeCwgZmFsc2Ugb3RoZXJ3aXNlCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gaW5fYXJyYXlfcHJlZml4KCAkcHJlZml4LCBhcnJheSAkY2FuZGlkYXRlcyApIHsKCgkJCWZvcmVhY2ggKCAkY2FuZGlkYXRlcyBhcyAkY2FuZGlkYXRlICkgewoJCQkKCQkJCWlmICggISggZmFsc2UgPT09IHN0cnBvcyggJGNhbmRpZGF0ZSwgJHByZWZpeCApICkgKSB7CgoJCQkJCS8vIFdlIGZvdW5kIHRoZSBwcmVmaXgKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBHb3QgdGhpcyBmYXIgc28gbm90IGEgcHJlZml4CgkJCXJldHVybiBmYWxzZTsKCQkJCgkJfQoJCQoJfSAvLyBlbmQgcGx1Z2luYnVkZHlfemJkaXIgY2xhc3MuCQoJCn0KPz4=
###PACKDATA,FILE_END,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
UEsDBAoAAAAAAC8ELUHj5ZWwDAAAAAwAAAAIABwAdGVzdC50eHRVVAkAA8obUVDjG1FQdXgLAAEE+AEAAAQUAAAASGVsbG8gV29ybGQKUEsBAh4DCgAAAAAALwQtQePllbAMAAAADAAAAAgAGAAAAAAAAQAAAKSBAAAAAHRlc3QudHh0VVQFAAPKG1FQdXgLAAEE+AEAAAQUAAAAUEsFBgAAAAABAAEATgAAAE4AAAAAAA==
###PACKDATA,FILE_END,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php
###PACKDATA,FILE_START,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php
PD9waHAKLyoqCiAqCXBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5IENsYXNzIChFeHBlcmltZW50YWwpCiAqCiAqCUhhbmRsZXMgemlwcGluZyBhbmQgdW56aXBwaW5nLCB1c2luZyB0aGUgYmVzdCBtZXRob2RzIGF2YWlsYWJsZSBhbmQgZmFsbGluZyBiYWNrIHRvIHdvcnNlIG1ldGhvZHMKICoJYXMgbmVlZGVkIGZvciBjb21wYXRpYmlsaXR5LiBBbGxvd3MgZm9yIGZvcmNpbmcgY29tcGF0aWJpbGl0eSBtb2Rlcy4KICoJCiAqCVZlcnNpb246IDEuMC4wCiAqCUF1dGhvcjogCiAqCUF1dGhvciBVUkk6IAogKgogKgogKi8KCi8vIFRlc3QgaWYgd2UgYXJlIGxvYWRpbmcgYXMgc3RhbmRhcmQgb3IgZXhwZXJpbWVudGFsIC0gaWYgZXhwZXJpbWVudGFsIGp1c3QgZHJvcCB0aHJvdWdoCmlmICggMCA9PT0gc3RyY21wKCBiYXNlbmFtZSggZGlybmFtZSggX19GSUxFX18gKSApLCAnemlwYnVkZHknICkgKSB7CgoJLy8gQ3VycmVudGx5IGxvYWRpbmcgYXMgc3RhbmRhcmQgc28gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gbG9hZCBleHBlcmltZW50YWwKCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snYWx0ZXJuYXRpdmVfemlwXzInXSApICYmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snYWx0ZXJuYXRpdmVfemlwXzInXSApICkgewoJCgkJLy8gVXNlciBlbmFibGVkIGV4cGVyaW1lbnRhbCBzbyBsb29rIGZvciBpdCBhbmQgbG9hZCBpdCBpcyBmb3VuZCwgb3RoZXJ3aXNlIGxvZwoJCSRleHBlcmltZW50YWxfemlwYnVkZHkgPSBkaXJuYW1lKCBkaXJuYW1lKCBfX0ZJTEVfXyApICkgLiAnL3h6aXBidWRkeS96aXBidWRkeS5waHAnOwoJCWlmICggQGlzX3JlYWRhYmxlKCAkZXhwZXJpbWVudGFsX3ppcGJ1ZGR5ICkgKSB7CgkJCgkJCXJlcXVpcmVfb25jZSggJGV4cGVyaW1lbnRhbF96aXBidWRkeSApOwoJCQkKCQl9IGVsc2UgewoJCQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdBbHRlcm5hdGUgWmlwIFN5c3RlbSBlbmFibGVkIGJ1dCBub3QgZm91bmQvcmVhZGFibGUgYXQ6ICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkZXhwZXJpbWVudGFsX3ppcGJ1ZGR5ICkgKTsKCgkJCgkJfQoJCgl9Cgp9IAoKaWYgKCAhY2xhc3NfZXhpc3RzKCAicGx1Z2luYnVkZHlfemlwYnVkZHkiICkgKSB7CgoJY2xhc3MgcGx1Z2luYnVkZHlfemlwYnVkZHkgewoJCgkJY29uc3QgWklQX01FVEhPRFNfVFJBTlNJRU5UID0gJ3BiX2JhY2t1cGJ1ZGR5X2F2YWlsX3ppcF9tZXRob2RzJzsKCQljb25zdCBaSVBfTUVUSE9EU19UUkFOU0lFTlRfRVhQRVJJTUVOVEFMID0gJ3BiX2JhY2t1cGJ1ZGR5X2F2YWlsX3h6aXBfbWV0aG9kcyc7CgkJY29uc3QgWklQX01FVEhPRFNfVFJBTlNJRU5UX0xJRkUgPSA0MzIwMDsgLy8gMTIgSG91cnMgLSByZWFsbHkgc2hvdWxkbid0IGNoYW5nZSB1bmxlc3Mgc2VydmVyIHByb2JsZW0KCQljb25zdCBOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgPSAnLyc7CgkJY29uc3QgRElSRUNUT1JZX1NFUEFSQVRPUlMgPSAnL1xcJzsKCgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBwbHVnaW4gcGF0aCBmb3IgdGhpcyBwbHVnaW4KICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIHN0cmluZwogICAgICAgICAqLwogICAgICAgIHB1YmxpYyAkX3BsdWdpblBhdGggPSAnJzsKCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIHBhdGggb2YgdGhlIHRlbXBvcmFyeSBkaXJlY3RvcnkgdGhhdCBjYW4gYmUgdXNlZCBmb3IgY3JlYXRpbmcgZmlsZXMgYW5kIHN0dWZmCiAgICAgICAgICogCiAgICAgICAgICogQHZhciBzdHJpbmcKICAgICAgICAgKi8KICAgICAgICBwcm90ZWN0ZWQgJF90ZW1wZGlyID0gIiI7CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGxpc3Qgb2YgemlwIG1ldGhvZHMgdGhhdCBhcmUgcmVxdWVzdGVkIHRvIGJlIHVzZWQKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIGFycmF5IG9mIHN0cmluZwogICAgICAgICAqLwogICAgICAgIHByb3RlY3RlZCAkX3JlcXVlc3RlZF96aXBfbWV0aG9kcyA9IGFycmF5KCk7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBtb2RlIHdoaWNoIHRoZSBvYmplY3QgaXMgYmVpbmcgY3JlYXRlZCBmb3IKICAgICAgICAgKiBOb3RlOiBUaGlzIGlzIG5vdyBpZ25vcmVkIGFzIGFuIG9iamVjdCBpcyBpbnN0YW50aWF0ZWQgZm9yIGJvdGggemlwICYgdW56aXAgc2VydmljZXMKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIHN0cmluZwogICAgICAgICAqLwogICAgICAgIHByb3RlY3RlZCAkX21vZGUgPSAiIjsKCiAgICAgICAgLyoqCiAgICAgICAgICogU3RhdHVzIG1lc3NhZ2UgYXJyYXkgdXNlZCB3aGVuIGNhbGxpbmcgb3RoZXIgbWV0aG9kcyB0byBnZXQgc3RhdHVzIGluZm9ybWF0aW9uIGJhY2sKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIGFycmF5IG9mIHN0cmluZwogICAgICAgICAqLwogICAgICAgIHB1YmxpYyAkX3N0YXR1cyA9IGFycmF5KCk7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBsaXN0IG9mIHppcCBtZXRob2RzIHRoYXQgYXJlIHRvIGJlIHVzZWQgb3IgYXJlIGF2YWlsYWJsZQogICAgICAgICAqIEhhZCB0byBtYWtlIHRoaXMgcHVibGljIGZvciBub3cgYmVjYXVzZSBzb21ldGhpbmcgYWNjZXNzZXMgaXQgZGlyZWN0bHkgLSBiYWQga2FybWEKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIGFycmF5IG9mIHN0cmluZwogICAgICAgICAqLwogICAgICAgIHB1YmxpYyAkX3ppcF9tZXRob2RzID0gYXJyYXkoKTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgZGV0YWlscyBvZiB0aGUgdmFyaW91cyB6aXAgbWV0aG9kcyB0aGF0IGFyZSBhdmFpbGFibGUKICAgICAgICAgKiBIYXZlIHRvIG1ha2UgdGhpcyBhIHNlcGFyYXRlIGFycmF5IGluZGV4ZWQgYnkgdGhlIG1ldGhvZCB0YWcuIElkZWFsbHkgd291bGQgYmUgY29tYmluZWQKICAgICAgICAgKiB3aXRoIHRoZSB6aXAgbWV0aG9kcyBhcnJheSBidXQgdGhhdCB3b3VsZCBpbnZvbHZlIG1vcmUgZ2VuZXJhbCBjaGFuZ2VzIGVsc2V3aGVyZSBzbyB0aGF0CiAgICAgICAgICogcmVmYWN0b3JpbmcgY2FuIGJlIGRvbmUgbGF0ZXIgLSBtYWluIHByb2JsZW0gaXMgdGhlIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIHppcCBtZXRob2RzCiAgICAgICAgICogYXJyYXkgdGhhdCBpcyBtYWRlIHJhdGhlciB0aGFuIHRocm91Z2ggYSBmdW5jdGlvbi4KICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIGFycmF5IG9mIGFycmF5IG9mIGFycmF5CiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfemlwX21ldGhvZHNfZGV0YWlscyA9IGFycmF5KCk7CiAgICAgICAgCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGxpc3Qgb2YgemlwIG1ldGhvZHMgdGhhdCBhcmUgc3VwcG9ydGVkLCBpLmUuLCB0aGVyZSBpcyBhIHN1cHBvcnRpbmcgY2xhc3MgZGVmaW5lZAogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgYXJyYXkgb2Ygc3RyaW5nCiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfc3VwcG9ydGVkX3ppcF9tZXRob2RzID0gYXJyYXkoKTsKICAgICAgICAKICAgICAgICAvKioKICAgICAgICAgKiBXaGV0aGVyIG9yIG5vdCB3ZSBjYW4gY2FsbCBhIHN0YXR1cyBjYWxiYWNrCiAgICAgICAgICogCiAgICAgICAgICogQHZhciBib29sCiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfaGF2ZV9zdGF0dXNfY2FsbGJhY2sgPSBmYWxzZTsKCQkKICAgICAgICAvKioKICAgICAgICAgKiBPYmplY3QtPm1ldGhvZCBhcnJheSBmb3Igc3RhdHVzIGZ1bmN0aW9uCiAgICAgICAgICogCiAgICAgICAgICogQHZhciBhcnJheQogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX3N0YXR1c19jYWxsYmFjayA9IGFycmF5KCk7CgkJCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGRpcmVjdG9yeSBuYW1lIHRoYXQgd2UgYXJlIGxvYWRlZCBmcm9tIChub3Q6IG5vdCBwYXRoKQogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgc3RyaW5nCiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfd2hlcmVhbWkgPSAiIjsKCQkKICAgICAgICAvKioKICAgICAgICAgKiBXaGV0aGVyIHdlIGFyZSBsb2FkZWQgYXMgdGhlIGV4cGVyaW1lbnRhbCB6aXBidWRkeQogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgYm9vbAogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX2lzX2V4cGVyaW1lbnRhbCA9IGZhbHNlOwoJCQogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSB6aXAgbWV0aG9kcyB0cmFuc2llbnQgd2lsbCBiZSBkZXBlbmRlbnQgb24gaWYgd2UgYXJlIHN0YW5kYXJkIG9yIGV4cGVyaW1lbnRhbAogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgc3RyaW5nCiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfemlwX21ldGhvZHNfdHJhbnNpZW50ID0gIiI7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBTZXJ2ZXIgQVBJIHRoYXQgaXMgaW4gdXNlCiAgICAgICAgICogCiAgICAgICAgICogQHZhciBzdHJpbmcKICAgICAgICAgKi8KCQlwcm90ZWN0ZWQgJF9zYXBpX25hbWUgPSAiIjsKCgkJLyoqCgkJICogCgkJICogZ2V0X3RyYW5zaWVudF9uYW1lc19zdGF0aWMoKQoJCSAqCgkJICogR2V0IHRoZSB0cmFuc2llbnQgbmFtZShzKSB0aGF0IG1heSBiZSBpbiB1c2UKCQkgKgoJCSAqIEByZXR1cm4JCWFycmF5CVRoZSB0cmFuc2llbnQgbmFtZShzKQoJCSAqCgkJICovCgkJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfdHJhbnNpZW50X25hbWVzX3N0YXRpYygpIHsKCQkKCQkJcmV0dXJuIGFycmF5KCBzZWxmOjpaSVBfTUVUSE9EU19UUkFOU0lFTlQsCgkJCQkJCSAgc2VsZjo6WklQX01FVEhPRFNfVFJBTlNJRU5UX0VYUEVSSU1FTlRBTCApOwoJCQkKCQl9CgoJCS8qKgoJCSAqCV9fY29uc3RydWN0KCkKCQkgKgkKCQkgKglEZWZhdWx0IGNvbnN0cnVjdG9yLgoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkkdGVtcF9kaXIJCVRoZSBwYXRoIG9mIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5IHRvIHVzZQoJCSAqCUBwYXJhbQkJYXJyYXkJCSR6aXBfbWV0aG9kcwlPcHRpb25hbDogVGhlIHNldCBvZiB6aXAgbWV0aG9kcyByZXF1ZXN0ZWQgdG8gdXNlCgkJICoJQHBhcmFtCQlzdHJpbmcJCSRtb2RlCQkJT3B0aW9uYWw6IFRoZSB6aXAgbW9kZSBmb3IgdGhlIG9iamVjdCAoaWdub3JlZCBjdXJyZW50bHkgLSBtYXkgYmUgcmV1c2VkPykKCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoICR0ZW1wX2RpciwgJHppcF9tZXRob2RzID0gYXJyYXkoKSwgJG1vZGUgPSAnemlwJyApIHsKCgkJCS8vIE5vcm1hbGl6ZSB0aGUgdHJhaWxpbmcgZGlyZWN0b3J5IHNlcGFyYXRvciBvbiB0aGUgcGF0aAoJCQkkdGVtcF9kaXIgPSBydHJpbSggJHRlbXBfZGlyLCBzZWxmOjpESVJFQ1RPUllfU0VQQVJBVE9SUyApIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SOwoJCQkKCQkJLy8gTm9ybWFsaXplIHBsYXRmb3JtIHNwZWNpZmljIGRpcmVjdG9yeSBzZXBhcmF0b3JzIGluIHBhdGgKCQkJJHRoaXMtPl90ZW1wZGlyID0gc3RyX3JlcGxhY2UoIERJUkVDVE9SWV9TRVBBUkFUT1IsIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiwgJHRlbXBfZGlyICk7CgkJCQoJCQkvLyBOb3RlOiB0aGlzIHdpbGwgYmUgcmVtb3ZlZCBhbmQgc2hvdWxkIG5vIGxvbmdlciBiZSB1c2VkIC0gYW4gb2JqZWN0IGlzIGluc3RhbnRpYXRlZCBmb3IKCQkJLy8gYm90aCB6aXAgJiB1bnppcCBzZXJ2aWNlcwoJCQkkdGhpcy0+X21vZGUgPSAkbW9kZTsKCQkJCgkJCS8vIFJlY29yZCB3aGVyZSB3ZSBhcmUgbG9jYXRlZCAodGhlIGRpcmVjdG9yeSBuYW1lKQoJCQkkdGhpcy0+X3doZXJlYW1pID0gYmFzZW5hbWUoIGRpcm5hbWUoIF9fRklMRV9fICkgKTsKCQkJCgkJCS8vIFVzZSBvdXIgbG9jYXRpb24gdG8gZGV0ZXJtaW5lIHdoaWNoIHppcCBtZXRob2RzIHRyYW5zaWVudCB3ZSBzaG91bGQgYmUgdXNpbmcKCQkJJHRoaXMtPl96aXBfbWV0aG9kc190cmFuc2llbnQgPSAoIDAgPT09IHN0cmNtcCggJHRoaXMtPl93aGVyZWFtaSwgJ3ppcGJ1ZGR5JyApICkgPyBzZWxmOjpaSVBfTUVUSE9EU19UUkFOU0lFTlQgOiBzZWxmOjpaSVBfTUVUSE9EU19UUkFOU0lFTlRfRVhQRVJJTUVOVEFMIDsKCgkJCS8vIFNldCBhIGZsYWcgZm9yIGVhc3kgY29uZGl0aW9uYWwgdGVzdGluZwoJCQkkdGhpcy0+X2lzX2V4cGVyaW1lbnRhbCA9ICggMCA9PT0gc3RyY21wKCAkdGhpcy0+X3doZXJlYW1pLCAnemlwYnVkZHknICkgKSA/IGZhbHNlIDogdHJ1ZSA7CgoJCQkvLyBTZXQgdGhlIHNhcGkgbmFtZSBzbyB3ZSBjYW4gdXNlIGl0IGxhdGVyCQkJCgkJCSR0aGlzLT5zZXRfc2FwaV9uYW1lKCk7CgkJCQoJCQkvLyBNYWtlIHN1cmUgd2UgbG9hZCB0aGUgY29yZSBhYnN0cmFjdCBjbGFzcyBhcyB0aGlzIHdpbGwgYWx3YXlzIGJlIG5lZWRlZAoJCQlyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvJyAuICR0aGlzLT5fd2hlcmVhbWkgLiAnL3piemlwY29yZS5waHAnICk7CgkJCQoJCQkvLyBJZiB3ZSBsb2FkZWQgdGhhdCBvayB0aGVuIHRyeSB0aGUgbWV0aG9kIHNwZWNpZmljIGNsYXNzZXMKCQkJLy8gQ291bGQgbWFrZSB0aGlzIG1vcmUgZ2VuZXJpYyBiYXNlZCBvbiBjb25maWcgb3Igc29tZXN1Y2gKCQkJaWYgKCBjbGFzc19leGlzdHMoICdwbHVnaW5idWRkeV96YnppcGNvcmUnICkgKSB7CgkJCQoJCQkJLy8gT25seSBwcm92aWRlIHByb2MgbW9kZSB3aGVuIGV4cGVyaW1lbnRhbCB6aXAgZW5hYmxlZAoJCQkJaWYgKCB0cnVlID09PSAkdGhpcy0+X2lzX2V4cGVyaW1lbnRhbCApIHsKCQkJCQoJCQkJCWluY2x1ZGVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi8nIC4gJHRoaXMtPl93aGVyZWFtaSAuICcvemJ6aXBwcm9jLnBocCcgKTsKCQkJCQkKCQkJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ3BsdWdpbmJ1ZGR5X3piemlwcHJvYycgKSApIHsKCQkJCQkKCQkJCQkJaWYgKCAkdGhpcy0+Y2hlY2tfbWV0aG9kX2RlcGVuZGVuY2llcyggJ3BsdWdpbmJ1ZGR5X3piemlwcHJvYycgKSApIHsKCQkJCQkJCgkJCQkJCQkkdGhpcy0+c2V0X3N1cHBvcnRlZF96aXBfbWV0aG9kcyggcGx1Z2luYnVkZHlfemJ6aXBwcm9jOjpnZXRfbWV0aG9kX3RhZ19zdGF0aWMoKSApOwoJCQkJCQkJCgkJCQkJCX0KCQkJCQkJCgkJCQkJfQoJCQkJCgkJCQl9CgkJCQkKCQkJCWluY2x1ZGVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi8nIC4gJHRoaXMtPl93aGVyZWFtaSAuICcvemJ6aXBleGVjLnBocCcgKTsKCQkJCWlmICggY2xhc3NfZXhpc3RzKCAncGx1Z2luYnVkZHlfemJ6aXBleGVjJyApICkgewoJCQkJCgkJCQkJaWYgKCAkdGhpcy0+Y2hlY2tfbWV0aG9kX2RlcGVuZGVuY2llcyggJ3BsdWdpbmJ1ZGR5X3piemlwZXhlYycgKSApIHsKCQkJCQkKCQkJCQkJJHRoaXMtPnNldF9zdXBwb3J0ZWRfemlwX21ldGhvZHMoIHBsdWdpbmJ1ZGR5X3piemlwZXhlYzo6Z2V0X21ldGhvZF90YWdfc3RhdGljKCkgKTsKCQkJCQkJCgkJCQkJfQoKCQkJCX0KCQkJCQoJCQkJaW5jbHVkZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliLycgLiAkdGhpcy0+X3doZXJlYW1pIC4gJy96YnppcHppcGFyY2hpdmUucGhwJyApOwoJCQkJaWYgKCBjbGFzc19leGlzdHMoICdwbHVnaW5idWRkeV96YnppcHppcGFyY2hpdmUnICkgKSB7CgkJCQkKCQkJCQlpZiAoICR0aGlzLT5jaGVja19tZXRob2RfZGVwZW5kZW5jaWVzKCAncGx1Z2luYnVkZHlfemJ6aXB6aXBhcmNoaXZlJyApICkgewoJCQkJCQoJCQkJCQkkdGhpcy0+c2V0X3N1cHBvcnRlZF96aXBfbWV0aG9kcyggcGx1Z2luYnVkZHlfemJ6aXB6aXBhcmNoaXZlOjpnZXRfbWV0aG9kX3RhZ19zdGF0aWMoKSApOwoJCQkJCQkKCQkJCQl9CgoJCQkJfQoJCQkJCgkJCQlpbmNsdWRlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvJyAuICR0aGlzLT5fd2hlcmVhbWkgLiAnL3piemlwcGNsemlwLnBocCcgKTsKCQkJCWlmICggY2xhc3NfZXhpc3RzKCAncGx1Z2luYnVkZHlfemJ6aXBwY2x6aXAnICkgKSB7CgkJCQkKCQkJCQlpZiAoICR0aGlzLT5jaGVja19tZXRob2RfZGVwZW5kZW5jaWVzKCAncGx1Z2luYnVkZHlfemJ6aXBwY2x6aXAnICkgKSB7CgkJCQkJCgkJCQkJCSR0aGlzLT5zZXRfc3VwcG9ydGVkX3ppcF9tZXRob2RzKCBwbHVnaW5idWRkeV96YnppcHBjbHppcDo6Z2V0X21ldGhvZF90YWdfc3RhdGljKCkgKTsKCQkJCQkJCgkJCQkJfQoKCQkJCX0KCQkJCQoJCQl9CgkJCQogCQkJLy8gV29yayBvdXQgdGhlIGxpc3Qgb2YgemlwIG1ldGhvZHMgZnJvbSB0aGUgcmVxdWVzdGVkIGFuZCBhdmFpbGFibGUgYWxvbmcgd2l0aCB0aGVpciBkZXRhaWxzCgkJCSR0aGlzLT5zZXRfemlwX21ldGhvZHMoICR6aXBfbWV0aG9kcyApOwoJCQkKCQl9CgkJCgkJCgkJLyoqCgkJICoJX19kZXN0cnVjdCgpCgkJICoJCgkJICoJRGVmYXVsdCBkZXN0cnVjdG9yLgoJCSAqCQoJCSAqCUByZXR1cm4JCW51bGwKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCApIHsKCgkJfQoJCQoJCS8qKgoJCSAqCXNldF9zYXBpX25hbWUoKQoJCSAqCgkJICoJU2V0cyB0aGUgc2FwaSBuYW1lIHRvIHRoYXQgZ2l2ZW4gb3IgcmV0cmlldmVzIGZyb20gUEhQCgkJICoJVE9ETzogRXh0ZW5kIHRvIGFsc28gc2V0IGEgc2FwaSBpZCBjb25zdGFudCBiYXNlZCBvbiB0aGUgbmFtZT8KCQkgKgoJCSAqCUBwYXJhbQlzdHJpbmcJJG5hbWUJQSBzYXBpIG5hbWUgdG8gc2V0IChkZWZhdWx0IGVtcHR5KQoJCSAqCUByZXR1cm4Jb2JqZWN0CQkJVGhpcyBvYmplY3QKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X3NhcGlfbmFtZSggJHNhcGlfbmFtZSA9ICIiICkgewoJCQoJCQlpZiAoIGVtcHR5KCAkc2FwaV9uYW1lICkgKSB7CgkJCQkKCQkJCSRzYXBpX25hbWUgPSBwaHBfc2FwaV9uYW1lKCk7CgkJCQkKCQkJfQoJCQkKCQkJJHRoaXMtPl9zYXBpX25hbWUgPSAkc2FwaV9uYW1lOwoJCQkKCQkJcmV0dXJuICR0aGlzOwoJCQkKCQl9CgoJCS8qKgoJCSAqCWdldF9zYXBpX25hbWUoKQoJCSAqCgkJICoJUmV0dXJucyB0aGUgcHJldmlvdXNseSBzZXQgc2FwaSBuYW1lCgkJICoKCQkgKglAcmV0dXJuCXN0cmluZwkJCVRoZSBzdG9yZWQgc2FwaSBuYW1lCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIGdldF9zYXBpX25hbWUoKSB7CgkJCQoJCQlyZXR1cm4gJHRoaXMtPl9zYXBpX25hbWU7CgkJCQoJCX0KCgkJLyoqCgkJICoJc2V0X3N1cHBvcnRlZF96aXBfbWV0aG9kcygpCgkJICoKCQkgKglBcHBlbmRzIG9yIHByZXBlbmRzIHRoZSBtZXRob2Qgb3IgbWV0aG9kcyBwYXNzZWQgdG8gdGhlIGV4aXN0aW5nIHN1cHBvcnRlZCBtZXRob2RzIGFycmF5CgkJICoKCQkgKglAcGFyYW0Jc3RyaW5nL2FycmF5CSRtZXRob2RzCUVpdGhlciBhIChjb21tYSBzZXBhcmF0ZWQpIHN0cmluZyBvZiBtZXRob2RzIG9yIGFuIGFycmF5CgkJICoJQHBhcmFtCWJvb2wJCQkkYXBwZW5kCQlUcnVlIGlmICRtZXRob2RzIHNob3VsZCBiZSBhcHBlbmRlZCB0byBleGlzdGluZyBzdXBwb3J0ZWQgbWV0aG9kcwoJCSAqCUByZXR1cm4JYm9vbAkJCQkJCVRydWUgaWYgc2V0IHN1Y2NlZWRlZCwgb3RoZXJ3aXNlIGZhbHNlCgkJICovCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIHNldF9zdXBwb3J0ZWRfemlwX21ldGhvZHMoICRtZXRob2RzLCAkYXBwZW5kID0gdHJ1ZSApIHsKCQkKCQkJJHJlc3VsdCA9IGZhbHNlOwoJCQoJCQkvLyBJZiAkbWV0aG9kcyBpcyBhIHN0cmluZyB3ZSBuZWVkIHRvIHR1cm4gaXQgaW50byBhbiBhcnJheSAob2Ygb25lIG9yIG1vcmUgZWxlbWVudHMpIG9yCgkJCS8vIG90aGVyd2lzZSBhc3N1bWUgaXQgaXMgYW4gYXJyYXkgYWxyZWFkeSAoYnV0IHdlIGRvdWJsZSBjaGVjayBpbiBhIG1vKQoJCQkoIGlzX3N0cmluZyggJG1ldGhvZHMgKSApID8gJG1ldGhvZHNfdG9fYWRkID0gZXhwbG9kZSggIiwiLCAkbWV0aG9kcyApIDogJG1ldGhvZHNfdG9fYWRkID0gJG1ldGhvZHM7CgoJCQkvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhbiBhcnJheSBhbmQgaWYgc28gdGhlbiBlaXRoZXIgYXBwZW5kIG9yIHByZXBlbmQgdG8gZXhpc3Rpbmcgc3VwcG9ydGVkIG1ldGhvZHMKCQkJaWYgKCBpc19hcnJheSggJG1ldGhvZHNfdG9fYWRkICkgKSB7CgkJCQoJCQkJKCAkYXBwZW5kICkgPyAkdGhpcy0+X3N1cHBvcnRlZF96aXBfbWV0aG9kcyA9IGFycmF5X21lcmdlKCAkdGhpcy0+X3N1cHBvcnRlZF96aXBfbWV0aG9kcywgJG1ldGhvZHNfdG9fYWRkICkgOgoJCQkJCQkJICAkdGhpcy0+X3N1cHBvcnRlZF96aXBfbWV0aG9kcyA9IGFycmF5X21lcmdlKCAkbWV0aG9kc190b19hZGQsICR0aGlzLT5fc3VwcG9ydGVkX3ppcF9tZXRob2RzICk7CgkJCQoJCQkJJHJlc3VsdCA9IHRydWU7CQkJCgkJCQoJCQl9CgkJCQoJCQkvLyBXaWxsIHJldHVybiBmYWxzZSBpZiB3ZSBzb21laG93IGRpZG4ndCBlbmQgdXAgd2l0aCBhbiBhcnJheSB0byBtZXJnZQoJCQlyZXR1cm4gJHJlc3VsdDsKCQkKCQl9CgkJCgkJLyoqCgkJICoJY2hlY2tfbWV0aG9kX2RlcGVuZGVuY2llcygpCgkJICoKCQkgKglDaGVja3MgdGhlIGRlcGVuZGVuY2llcyB0aGF0IGEgbWV0aG9kIGRlZmluZXMgZm9yIGl0c2VsZiAtIHRoaXMgbWF5IG9wdGlvbmFsbHkgYWxzbyBtZWFuCgkJICoJY2FsbGluZyBhIGdpdmVuIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIHRoZSBtZXRob2QgdG8gYWRkIGl0J3Mgb3duIHZlcnkgc3BlY2lmaWMgY2hlY2tzCgkJICoJYmV5b25kIHRob3NlIHRoYXQgYXJlIHJ1biBhcyBzdGFuZGFyZC4KCQkgKgoJCSAqCUBwYXJhbQlzdHJpbmcJCSRjbGFzc19uYW1lCQlUaGUgbmFtZSBvZiB0aGUgY2xhc3MgdG8gY2hlY2ssIG5lZWRlZCBiZWNhdXNlIHRoaXMgaXMgc3RhdGljIGNoZWNraW5nCgkJICoJQHJldHVybglib29sCQkJCQkJVHJ1ZSBpZiBkZXBlbmRlbmN5IGNoZWNrIHN1Y2NlZWRlZCwgb3RoZXJ3aXNlIGZhbHNlCgkJICovCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGNoZWNrX21ldGhvZF9kZXBlbmRlbmNpZXMoICRjbGFzc19uYW1lICkgewoJCQoJCQkvLyBBc3N1bWUgZGVwZW5kZW5jeSBjaGVja3Mgd2lsbCBwYXNzIC0gd2lsbCBiZSBzZXQgZmFsc2UgaWYgYSBjaGVjayBmYWlscwoJCQkkcmVzdWx0ID0gdHJ1ZTsKCQkJCgkJCWlmICggIW1ldGhvZF9leGlzdHMoICRjbGFzc19uYW1lLCAnZ2V0X21ldGhvZF9kZXBlbmRlbmNpZXNfc3RhdGljJyApICkgewoJCQkKCQkJCSRyZXN1bHQgPSBmYWxzZTsKCQkJCgkJCX0gZWxzZSB7CgkJCgkJCQkkbWV0aG9kX2RlcGVuZGVuY2llcyA9IGNhbGxfdXNlcl9mdW5jKCBhcnJheSggJGNsYXNzX25hbWUsICdnZXRfbWV0aG9kX2RlcGVuZGVuY2llc19zdGF0aWMnICkgKTsKCQkJCQoJCQl9CgkJCQoJCQlpZiAoICggJHJlc3VsdCApICYmIGlzc2V0KCAkbWV0aG9kX2RlcGVuZGVuY2llc1sgJ2NsYXNzZXMnIF0gKSAmJiAhZW1wdHkoICRtZXRob2RfZGVwZW5kZW5jaWVzWyAnY2xhc3NlcycgXSApICkgewoJCQkKCQkJCSRjbGFzc2VzID0gJG1ldGhvZF9kZXBlbmRlbmNpZXNbICdjbGFzc2VzJyBdOwoJCQkKCQkJCSRkaXNhYmxlZF9jbGFzc2VzID0gYXJyYXlfbWFwKCAidHJpbSIsIGV4cGxvZGUoICcsJywgaW5pX2dldCggJ2Rpc2FibGVfY2xhc3NlcycgKSApICk7CgkJCQkKCQkJCS8vIENoZWNrIGVhY2ggZnVuY3Rpb24gZGVwZW5kZW5jeSBhbmQgYmFpbCBvdXQgb24gZmlyc3QgZmFpbHVyZQoJCQkJZm9yZWFjaCAoICRjbGFzc2VzIGFzICRjbGFzcyApIHsKCQkJCQoJCQkJCSRjbGFzcyA9IHRyaW0oICRjbGFzcyApOwoJCQkJCQoJCQkJCWlmICggISggKCBjbGFzc19leGlzdHMoICRjbGFzcyApICkgJiYgKCAhaW5fYXJyYXkoICRjbGFzcywgJGRpc2FibGVkX2NsYXNzZXMgKSApICkgKSB7CgoJCQkJCQkkcmVzdWx0ID0gZmFsc2U7CgkJCQkJCWJyZWFrOwoJCQkJCQkKCQkJCQl9CgkJCQkKCQkJCX0KCQkJfQoJCQkKCQkJaWYgKCAoICRyZXN1bHQgKSAmJiBpc3NldCggJG1ldGhvZF9kZXBlbmRlbmNpZXNbICdmdW5jdGlvbnMnIF0gKSAmJiAhZW1wdHkoICRtZXRob2RfZGVwZW5kZW5jaWVzWyAnZnVuY3Rpb25zJyBdICkgKSB7CgkJCQoJCQkJJGZ1bmN0aW9ucyA9ICRtZXRob2RfZGVwZW5kZW5jaWVzWyAnZnVuY3Rpb25zJyBdOwoJCQkJCgkJCQkkZGlzYWJsZWRfZnVuY3Rpb25zID0gYXJyYXlfbWFwKCAidHJpbSIsIGV4cGxvZGUoICcsJywgaW5pX2dldCggJ2Rpc2FibGVfZnVuY3Rpb25zJyApICkgKTsKCQkJCQoJCQkJLy8gQ2hlY2sgZWFjaCBmdW5jdGlvbiBkZXBlbmRlbmN5IGFuZCBiYWlsIG91dCBvbiBmaXJzdCBmYWlsdXJlCgkJCQlmb3JlYWNoICggJGZ1bmN0aW9ucyBhcyAkZnVuY3Rpb24gKSB7CgkJCQkKCQkJCQkkZnVuY3Rpb24gPSB0cmltKCAkZnVuY3Rpb24gKTsKCQkJCQkKCQkJCQlpZiAoICEoICggZnVuY3Rpb25fZXhpc3RzKCAkZnVuY3Rpb24gKSApICYmICggIWluX2FycmF5KCAkZnVuY3Rpb24sICRkaXNhYmxlZF9mdW5jdGlvbnMgKSApICkgKSB7CgoJCQkJCQkkcmVzdWx0ID0gZmFsc2U7CgkJCQkJCWJyZWFrOwoJCQkJCQkKCQkJCQl9CgkJCQkKCQkJCX0KCQkJCgkJCX0KCQkJCgkJCS8vIE5vIGV4dGVuc2lvbiBjaGVja3MgeWV0CgkJCQoJCQkvLyBObyBmaWxlIGNoZWNrcyB5ZXQgKG5lZWQgdG8gZGV0ZXJtaW5lIGhvdyB0aGlzIG1pZ2h0IHdvcmsgYSBiaXQgYmV0dGVyKQoJCQkKCQkJaWYgKCAoICRyZXN1bHQgKSAmJiBpc3NldCggJG1ldGhvZF9kZXBlbmRlbmNpZXNbICdjaGVja19mdW5jJyBdICkgJiYgIWVtcHR5KCAkbWV0aG9kX2RlcGVuZGVuY2llc1sgJ2NoZWNrX2Z1bmMnIF0gKSApIHsKCQkJCgkJCQkkcmVzdWx0ID0gY2FsbF91c2VyX2Z1bmMoIGFycmF5KCAkY2xhc3NfbmFtZSwgJG1ldGhvZF9kZXBlbmRlbmNpZXNbICdjaGVja19mdW5jJyBdICkgKTsKCQkJCQoJCQl9CgkJCQoJCQlyZXR1cm4gJHJlc3VsdDsKCQkKCQl9CgkJCgkJLyoqCgkJICoJZGVkdWNlX3ppcF9tZXRob2RzKCkKCQkgKgkKCQkgKglSZXR1cm5zIHRoZSBhcnJheSBvZiB6aXAgbWV0aG9kcyB0aGF0IGFyZSBhdmFpbGFibGUgKG9yIGp1c3QgdGhlIGJlc3QpIGZpbHRlcmVkIGJ5IHJlcXVlc3RlZCBtZXRob2RzLgoJCSAqCUJlY2F1c2UgdGhlIGF2YWlsYWJsZSBtZXRob2RzIGRvbid0IHJlYWxseSBjaGFuZ2Ugb2Z0ZW4gKHJhcmVseSBvbmNlIHN0YWJsZSkgd2UgdXNlIGEgdHJhbnNpZW50CgkJICoJd2hpY2ggaGFzIHNvbWUgZGVmaW5lZCBsaWZldGltZSBzbyB3ZSBkb24ndCB3YXN0ZSB0aW1lIHJlcGVhdGluZyB0aGUgdGVzdGluZyB3aGljaCBpbnZvbHZlcyBjcmVhdGluZwoJCSAqCW9iamVjdHMgYW5kIHByb2Nlc3NlcyBhbmQgZmlsZXMgd2hpY2ggY2FuIGJlIHRpbWUgY29uc3VtaW5nLgoJCSAqCVRoZSB1c2luZyBzY3JpcHQgY2FuIGRlY2lkZSB0byBoYXZlIHRoZSB0cmFuc2llbnQgcmVmcmVzaGVkIGJ5IGRlbGV0aW5nIGl0IGFuZCB0aGVuIGl0IHdpbGwgYmUgcmVnZW5lcmF0ZWQuCgkJICoJTm90ZTogVGhlcmUgaXMgYW4gaW5jbHVkZWQgInNpZ25hdHVyZSIgc28gdGhhdCB3ZSBjYW4gZGV0ZWN0IHNlcnZlciBvciBvdGhlciBtb3ZlcyBhbmQgcmVnZW5lcmF0ZS4KCQkgKglOb3RlOiBmaWxlbXRpbWUoKSBpcyB1c2VkIGJlY2F1c2UgdGhpcyB3aWxsIChzaG91bGQpIGZvcmNlIHRoZSB0cmFuc2llbnQgdG8gdXBkYXRlIGlmIHRoZSBwbHVnaW4gaXMKCQkgKgl1cGRhdGVkIGJlY2F1c2UgdGhlIGZpbGUgbW9kaWZpY2F0aW9uIHRpbWUgb2YgdGhlIGZpbGUgd2lsbCBjaGFuZ2UgYmVjYXVzZSB0aGUgcGx1Z2luIGlzIGluc3RhbGxlZCBpbiBhCgkJICoJZGlmZmVyZW50IGRpc2sgbG9jYXRpb24gd2l0aCBuZXdseSB3cml0dGVuIGZpbGVzIC0gdGhlIHNhbWUgc2hvdWxkIGFwcGx5IGlmIHRoZSBzaXRlIGlzIHJlc3RvcmVkL21pZ3JhdGVkLgoJCSAqCQoJCSAqCUBwYXJhbQkJYXJyYXkJQXJyYXkgcmVmZXJlbmNlIGZvciB0aGUgZGVkdWNlZCB6aXAgbWV0aG9kcwoJCSAqCUBwYXJhbQkJYXJyYXkJQXJyeSByZWZlcmVuY2UgZm9yIHRoZSBkZXRhaWxzIG9mIHRoZSBkZWR1Y2VkIG1ldGhvZHMKCQkgKglAcGFyYW0JCWFycmF5CUZsYXQgYXJyYXkgb2YgcmVxdWVzdGVkIChwcmVmZXJyZWQpIHppcCBtZXRob2RzCgkJICoJQHBhcmFtCQlib29sCVRydWUgaWYgb25seSB0aGUgYmVzdCBhdmFpbGFibGUgbWV0aG9kIHdhbnRlZAoJCSAqCUBwYXJhbQkJc3RyaW5nCVdoaWNoIHppcCBtb2RlIGJlaW5nIHRlc3RlZAoJCSAqCUByZXR1cm4JCWJvb2wJVHJ1ZSBpZiBtZXRob2RzIGFyZSBhdmFpbGFibGUsIEZhbHNlIG90aGVyd2lzZQoJCSAqCgkJICovCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGRlZHVjZV96aXBfbWV0aG9kcyggYXJyYXkgJiRtZXRob2RzLCBhcnJheSAmJG1ldGhvZHNfZGV0YWlscywgYXJyYXkgJHJlcXVlc3RlZCwgJGJlc3Rfb25seSApIHsKCQkJCgkJCSRhdmFpbGFibGVfbWV0aG9kcyA9IGFycmF5KCk7CgkJCSRhdmFpbGFibGVfbWV0aG9kc19kZXRhaWxzID0gYXJyYXkoKTsKCQkJJGFnZ3JlZ2F0ZV9hdmFpbGFibGVfbWV0aG9kcyA9IGFycmF5KCk7CgkJCSRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyA9ICIiOwoJCQkkc2VydmVyX3NpZ25hdHVyZSA9ICIiOwoKCQkJLy8gRGVjaWRlIGlmIHdlIHNob3VsZCB0cnkgZm9yIGNhY2hlZCBtZXRob2RzIG9yIG5vdAkJCQoJCQlpZiAoICR0aGlzLT51c2VfY2FjaGVkX21ldGhvZHMoKSApIHsKCgkJCQkkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzID0gZ2V0X3RyYW5zaWVudCggJHRoaXMtPl96aXBfbWV0aG9kc190cmFuc2llbnQgKTsKCQkJCQoJCQkJLy8gRHJvcCB0aHJvdWdoIGlmIHdlIGRpZG4ndCBnZXQgYSB0cmFuc2llbnQgb3RoZXJ3aXNlIHdlJ2xsIHRlc3QgaXQgZm9yIHZhbGlkaXR5CgkJCQlpZiAoIGZhbHNlICE9PSAkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzICkgewoJCQkJCgkJCQkJLy8gR2VuZXJhdGUgc2VydmVyIHNpZ25hdHVyZSBhbmQgY2hlY2sgaXQgbWF0Y2hlcyB0aGUgY2FjaGVkIHNpZ25hdHVyZQoJCQkJCSRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyA9IHBocF91bmFtZSgpIC4gIiA6ICIgLiAoICggJGZpbGVtb2R0aW1lID0gZmlsZW10aW1lKCBfX0ZJTEVfXyApICkgPyAoc3RyaW5nKSAkZmlsZW1vZHRpbWUgOiAnMScgKTsKCQkJCQkkc2VydmVyX3NpZ25hdHVyZSA9IG1kNSggJHNlcnZlcl9zaWduYXR1cmVfc3RyaW5nICk7CgkJCQkJCgkJCQkJaWYgKCAoIGZhbHNlID09PSBpc3NldCggJGFnZ3JlZ2F0ZV9hdmFpbGFibGVfbWV0aG9kc1sgJ2NvbnRyb2wnIF1bICdzaWduYXR1cmUnIF0gKSApIHx8CgkJCQkJCSAoICRzZXJ2ZXJfc2lnbmF0dXJlICE9PSAkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzWyAnY29udHJvbCcgXVsgJ3NpZ25hdHVyZScgXSApICkgewoKCQkJCQkJLy8gRWl0aGVyIG5vIHNpZ25hdHVyZSBwcmV2aW91c2x5IHNldCBvciBpdCBoYXMgY2hhbmdlZCAtIGVpdGhlciB3YXkgd2UgbmVlZCB0byByZWV2YWx1YXRlIGF2YWlsYWJsZSBtZXRob2RzCgkJCQkJCSRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHMgPSBmYWxzZTsKCQkJCQkJIAoJCQkJCX0KCQkJCQoJCQkJfQoKCQkJfSBlbHNlIHsKCQkJCgkJCQkkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzID0gZmFsc2U7CgkJCQkKCQkJfQoJCQkKCQkJLy8gQ3JlYXRlIG5ldyB0cmFuc2llbnQgaWYgd2UgZGlkbid0IGhhdmUgb25lLCBpdCB3YXMgZXhwaXJlZCBvciB3ZSBudWtlZCBpdCBiZWNhdXNlIGludmFsaWQKCQkJaWYgKCBmYWxzZSA9PT0gJGFnZ3JlZ2F0ZV9hdmFpbGFibGVfbWV0aG9kcyApIHsKCgkJCQkvLyBHZXQgYWxsIGF2YWlsYWJsZSBtZXRob2RzIGluICRhdmFpbGFibGVfbWV0aG9kcyAtIG11c3QgcmV0dXJuIHRoZW0gaW4gb3JkZXIgYmVzdCAtPiB3b3JzdAoJCQkJLy8gQWxzbyBnZXR0aW5nIHRoZSBtZXRob2QgZGV0YWlscyBhcnJheSB3aGljaCBpcyBrZXllZCBieSBtZXRob2QgdGFnCgkJCQkkdGhpcy0+Z2V0X2F2YWlsYWJsZV96aXBfbWV0aG9kcyggJHRoaXMtPl9zdXBwb3J0ZWRfemlwX21ldGhvZHMsICRhdmFpbGFibGVfbWV0aG9kcywgJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHMgKTsKCQkJCQoJCQkJLy8gTm93IHdlIGhhdmUgdG8gY29tYmluZSB0aGUgdHdvIGFycmF5cyBpbnRvIGFuIGFnZ3JlZ2F0ZSB0byBzYXZlCgkJCQkkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzWyAnbWV0aG9kcycgXSA9ICRhdmFpbGFibGVfbWV0aG9kczsKCQkJCSRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHNbICdkZXRhaWxzJyBdID0gJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHM7CgkJCQkKCQkJCS8vIE9ubHkgc2F2ZSBpZiB3ZSBhcmUgdXNpbmcgY2FjaGluZwoJCQkJaWYgKCAkdGhpcy0+dXNlX2NhY2hlZF9tZXRob2RzKCkgKSB7CgkJCQkKCQkJCQkvLyBBZGQgdGhlIHNlcnZlciBzaWduYXR1cmUgZm9yIGRldGVjdGluZyBpbnZhbGlkYXRlZCBtZXRob2RzIGRldGFpbHMgb24gYSBtaWdyYXRpb24gb3Igc29tZSBvdGhlciBjaGFuZ2UKCQkJCQkvLyBOb3RlOiBTZWUgZGlzY3Vzc2lvbiBhYm92ZSBvbiBkZXJpdmF0aW9uIG9mIHNpZ25hdHVyZQoJCQkJCS8vIFRPRE86IENoZWNrLCBwcm9iYWJseSBjYW4gdXNlIHRoZSBzZXJ2ZXIgc2lnbmF0dXJlIGNhbGN1bGF0ZWQgYWJvdmUKCQkJCQkkc2VydmVyX3NpZ25hdHVyZV9zdHJpbmcgPSBwaHBfdW5hbWUoKSAuICIgOiAiIC4gKCAoICRmaWxlbW9kdGltZSA9IGZpbGVtdGltZSggX19GSUxFX18gKSApID8gKHN0cmluZykgJGZpbGVtb2R0aW1lIDogJzEnICk7CgkJCQkJJHNlcnZlcl9zaWduYXR1cmUgPSBtZDUoICRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyApOwoJCQkJCSRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHNbICdjb250cm9sJyBdWyAnc2lnbmF0dXJlJyBdID0gJHNlcnZlcl9zaWduYXR1cmU7CgkJCQkJCgkJCQkJc2V0X3RyYW5zaWVudCggJHRoaXMtPl96aXBfbWV0aG9kc190cmFuc2llbnQsICRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHMsIHNlbGY6OlpJUF9NRVRIT0RTX1RSQU5TSUVOVF9MSUZFICk7CgkJCQkJCgkJCQl9CgkJCQkJCQkKCQkJfSBlbHNlIHsKCQkJCgkJCQkvLyBXZSBnb3QgYSB2YWxpZCB0cmFuc2llbnQgdmFsdWUgc28gbm93IHNlcGFyYXRlIHRoZSBhZ2dyZWdhdGUgaW50byB0d28KCQkJCSRhdmFpbGFibGVfbWV0aG9kcyA9ICRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHNbICdtZXRob2RzJyBdOwoJCQkJJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHMgPSAkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzWyAnZGV0YWlscycgXTsKCQkJCgkJCX0KCQkJCgkJCS8vIENoZWNrIHdoZXRoZXIgdGhlc2UgbmVlZCB0byBiZSBmaWx0ZXJlZCBieSByZXF1ZXN0ZWQgbWV0aG9kcwoJCQlpZiAoICFlbXB0eSggJHJlcXVlc3RlZCApICkgewoJCQkKCQkJCS8vIEZpbHRlciB0aGUgYXZhaWxhYmxlIG1ldGhvZHMgLSByZXN1bHQgY291bGQgYmUgZW1wdHkKCQkJCS8vIE9yZGVyIHdpbGwgYmUgcmV0YWluZWQgcmVnYXJkbGVzcyBvZiBvcmRlciBvZiByZXF1ZXN0ZWQgbWV0aG9kcwoJCQkJJGF2YWlsYWJsZV9tZXRob2RzID0gYXJyYXlfaW50ZXJzZWN0KCAkYXZhaWxhYmxlX21ldGhvZHMsICRyZXF1ZXN0ZWQgKTsKCQkJCQoJCQl9CgoJCQkvLyBJZiBqdXN0IHRoZSBiZXN0IGF2YWlsYWJsZSByZXF1ZXN0ZWQgdGhlbiBzbGljZSBpdCBvZmYKCQkJaWYgKCAoIHRydWUgPT09ICRiZXN0X29ubHkgKSAmJiAoICFlbXB0eSggJGF2YWlsYWJsZV9tZXRob2RzICkgKSApIHsKCQkJCgkJCQkkbWV0aG9kcyA9IGFycmF5X3NsaWNlKCAkYXZhaWxhYmxlX21ldGhvZHMsIDAsIDEgKTsKCQkJCSRtZXRob2RzX2RldGFpbHMgPSAkYXZhaWxhYmxlX21ldGhvZHNfZGV0YWlsczsKCQkJCQoJCQl9IGVsc2UgewoJCQkKCQkJCSRtZXRob2RzID0gJGF2YWlsYWJsZV9tZXRob2RzOwoJCQkJJG1ldGhvZHNfZGV0YWlscyA9ICRhdmFpbGFibGVfbWV0aG9kc19kZXRhaWxzOwoJCQkKCQkJfQoJCQkKCQkJaWYgKCAhZW1wdHkoICRtZXRob2RzICkgKSB7CgkJCQoJCQkJcmV0dXJuIHRydWU7CgkJCQkKCQkJfSBlbHNlIHsKCQkJCgkJCQlyZXR1cm4gZmFsc2U7CgkJCQkKCQkJfQoJCQoJCX0KCQkJCQoJCS8qKgoJCSAqCXVzZV9jYWNoZWRfbWV0aG9kcygpCgkJICoJCgkJICoJUmV0dXJucyB3aGV0aGVyIGNvbmRpdGlvbnMvY29uZmlndXJhdGlvbiBpbmRpY2F0ZSBjYWNoZWQgbWV0aG9kcyBzaG91bGQgYmUgdXNlZAoJCSAqCU5vdGU6IFRlbXBvcmFyaWx5IGFkZCB0aGUgY29uZGl0aW9uIGZvciB3aGV0aGVyIGdldF8vc2V0X3RyYW5zaWVudCBmdW5jdGlvbnMKCQkgKglleGlzdCAtIGlmIG5vdCAobWVhbmluZyB3ZSBhcmUgcHJvYmFibHkgcnVubmluZyB1bmRlciBpbXBvcnRidWRkeSkgdGhlbiB3ZSBhbHNvCgkJICoJc2tpcCBjYWNoaW5nLiBUaGlzIGFkZHMgYSBsaXR0bGUgdGltZSB3aGVuIGluc3RhbnRpYXRpbmcgYmVjYXVzZSB3ZSBoYXZlIHRvIHRlc3QKCQkgKglldmVyeSB0aW1lIGJ1dCBpdCdzIGFjY2VwdGFibGUgZm9yIG5vdy4gSW4gdGhlIGxvbmdlciB0ZXJtIHdlIHdpbGwgaGF2ZSBhbgoJCSAqCWFsdGVybmF0aXZlIHdheSB0byBoYW5kbGUgdGhlIHRyYW5zaWVudCBkYXRhIG91dHNpZGUgb2YgV29yZFByZXNzLgoJCSAqCQoJCSAqCUByZXR1cm4JCWJvb2wJdHJ1ZSBpZiB1c2UgY2FjaGVkIG1ldGhvZHMsIGZhbHNlIG90aGVyd2lzZQoJCSAqCgkJICovCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIHVzZV9jYWNoZWRfbWV0aG9kcygpIHsKCQkKCQkJLy8gQnkgZGVmYXVsdCB3ZSdsbCBiZSB1c2luZyBjYWNoaW5nCgkJCSRyZXN1bHQgPSB0cnVlOwoJCQkKCQkJLy8gSGFzIGNhY2hpbmcgYmVlbiBleHBsaWNpdGx5IGRpc2FibGVkCgkJCSRjYWNoaW5nX2Rpc2FibGVkID0gKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkaXNhYmxlX3ppcG1ldGhvZF9jYWNoaW5nJ10gKSAmJgoJCQkJCQkJCSAgKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2Rpc2FibGVfemlwbWV0aG9kX2NhY2hpbmcnXSA9PSAnMScpICk7CgoJCQkvLyBEbyB3ZSBoYXZlIHRoZSBtZWFucyB0byBjYWNoZQoJCQkkY2FjaGluZ191bmF2YWlsYWJsZSA9ICggISggZnVuY3Rpb25fZXhpc3RzKCAnZ2V0X3RyYW5zaWVudCcgKSAmJiBmdW5jdGlvbl9leGlzdHMoICdzZXRfdHJhbnNpZW50JyApICkgKTsJCgoJCQlpZiAoICRjYWNoaW5nX2Rpc2FibGVkIHx8ICRjYWNoaW5nX3VuYXZhaWxhYmxlICkgewoJCQkKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1ppcCBtZXRob2QgY2FjaGluZyBkaXNhYmxlZCBiYXNlZCBvbiBzZXR0aW5ncyBvciB1bmF2YWlsYWJsZS4nICk7CgkJCQkkcmVzdWx0ID0gZmFsc2U7CgkJCQkKCQkJfQoJCQkKCQkJcmV0dXJuICRyZXN1bHQ7CgkJCgkJfQoJCQkJCgkJLyoqCgkJICoJZ2V0X3ppcF9tZXRob2RzKCkKCQkgKgkKCQkgKglSZXR1cm5zIHRoZSBhcnJheSBvZiB6aXAgbWV0aG9kcyBwcmV2aW91c2x5IGRlZHVjZWQKCQkgKgkKCQkgKglAcmV0dXJuCQlhcnJheQlGbGF0IGFycmF5IG9mIHppcCBtZXRob2RzIChjb3VsZCBiZSBlbXB0eSkKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfemlwX21ldGhvZHMoKSB7CgkJCQoJCQlyZXR1cm4gJHRoaXMtPl96aXBfbWV0aG9kczsKCQkKCQl9CgkJCQkKCQkvKioKCQkgKglzZXRfemlwX21ldGhvZHMoKQoJCSAqCQoJCSAqCVJlc2V0cyB0aGUgemlwIG1ldGhvZHMgYmFzZWQgb24gbmV3IGNyaXRlcmlhIGFuZCByZXR1cm5zIHRoZSBhcnJheSBvZiB6aXAgbWV0aG9kcwoJCSAqCQoJCSAqCUBwYXJhbQkJYXJyYXkJJHJlcXVlc3RlZAlGbGF0IGFycmF5IG9mIHJlcXVlc3RlZCAocHJlZmVycmVkKSB6aXAgbWV0aG9kcwoJCSAqCUBwYXJhbQkJYm9vbAkkYmVzdF9vbmx5CU9wdGlvbmFsOiBUcnVlIGlmIG9ubHkgdGhlIGJlc3QgYXZhaWxhYmxlIG1ldGhvZCB3YW50ZWQKCQkgKglAcmV0dXJuCQlvYmplY3QJCQkJVGhpcyBvYmplY3QKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBzZXRfemlwX21ldGhvZHMoIGFycmF5ICRyZXF1ZXN0ZWQsICRiZXN0X29ubHkgPSBmYWxzZSApIHsKCQkJCgkJCS8vIFVwZGF0ZSB0aGUgbWVtb3J5IG9mIHdoYXQgemlwIG1ldGhvZHMgd2VyZSByZXF1ZXN0ZWQgLSBtYWtlIGl0IGNsZWFuCgkJCSR0aGlzLT5fcmVxdWVzdGVkX3ppcF9tZXRob2RzID0gYXJyYXlfbWFwKCAndHJpbScsICRyZXF1ZXN0ZWQgKTsKCQkJCgkJCS8vIFdvcmsgb3V0IHRoZSBsaXN0IG9mIHppcCBtZXRob2RzIGZyb20gdGhlIHJlcXVlc3RlZCBhbmQgYXZhaWxhYmxlCgkJCSR0aGlzLT5kZWR1Y2VfemlwX21ldGhvZHMoICR0aGlzLT5femlwX21ldGhvZHMsICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlscywgJHRoaXMtPl9yZXF1ZXN0ZWRfemlwX21ldGhvZHMsICRiZXN0X29ubHkgKTsKCQkJCgkJCXJldHVybiAkdGhpczsKCQkKCQl9CgkJCQkJCQkJCgkJLyoqCgkJICoJcmVmcmVzaF96aXBfbWV0aG9kcygpCgkJICoKCQkgKglSZWZyZXNoIHRoZSBpbmZvcm1hdGlvbiBvbiB0aGUgYXZhaWxhYmxlIHppcCBtZXRob2RzCgkJICoJVE9ETzogUGVyaGFwcyB0aGUgdHJhbnNpZW50IGNvdWxkIGJlIGRlbGV0ZWQgaGVyZSByYXRoZXIgdGhhbiBieSB0aGUgY2FsbGVyPwoJCSAqCgkJICoJQHBhcmFtCQlhcnJheQkJJHppcF9tZXRob2RzCU9wdGlvbmFsOiBUaGUgc2V0IG9mIHppcCBtZXRob2RzIHJlcXVlc3RlZCB0byB1c2UKCQkgKglAcmV0dXJuCQlvYmplY3QJCQkJCQlUaGlzIG9iamVjdAoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiByZWZyZXNoX3ppcF9tZXRob2RzKCAkemlwX21ldGhvZHMgPSBhcnJheSgpICkgewoJCQoJCQkkdGhpcy0+c2V0X3ppcF9tZXRob2RzKCAkemlwX21ldGhvZHMgKTsKCQkJCgkJCXJldHVybiAkdGhpczsKCQkJCgkJfQoKCQkvKioKCQkgKglzYW5pdGl6ZV9leGNsdWRlcygpCgkJICoKCQkgKglUYWtlIGFuIGV4Y2x1c2lvbiBsaXN0IG9mIGRpcmVjdG9yaWVzIGFuZC9vciBmaWxlcyBhbmQgcHJvZHVjZSBhIHNhbml0aXplZCBleGNsdXNpb24gbGlzdAoJCSAqCURpcmVjdG9yaWVzIHdpbGwgYmUgcmVjb2duaXplZCBieSBoYXZpbmcgYSB0cmFpbGluZyBkaXJlY3Rvcnkgc2VwYXJhdG9yIG90aGVyd2lzZSB3aWxsIGJlCgkJICoJdHJlYXRlZCBhcyBhIGZpbGUgKG5vdGUgdGhhdCBoZXJlIHdlIGFyZSB3b3JraW5nIHdpdGggcGF0dGVybnMgYW5kIG5vdCB0ZXN0aW5nIHRvIHNlZQoJCSAqCXdoZXRoZXIgc29tZXRoaW5nIF9pc18gYSBkaXJlY3Rvcnkgb3Igbm90IGJlY2F1c2Ugd2UgZG9uJ3QgbmVjZXNzYXJpbHkgaGF2ZSB0aGUgZnVsbAoJCSAqCWRpcmVjdG9yeSBwYXRoKS4KCQkgKglOb3RlOiBBbnl0aGluZyB0aGF0IGNvbnRhaW5zIGEgd2lsZGNhcmQgY2hhcmFjdGVyICgqIG9yID8pIGlzIGlnbm9yZWQgYXMgdGhlc2UgYXJlIG5vdAoJCSAqCWN1cnJlbnRseSBzdXBwb3J0ZWQgKGFuZCBtYXliZSBuZXZlciB3aWxsIGFjcm9zcyB0aGUgYm9hcmQpLiBGb3IgY29tbWFuZCB6aXAgemlwIHdlIGNhbgoJCSAqCWNvbnNpZGVyIGFuIG9wdGlvbiB0byBoYXZlIHRoZXNlIGFzIHNlcGFyYXRlIGV4Y2x1c2lvbnMgKGFuZCBjdXJyZW50bHkgd2UgY2FuIGFjY29tb2RhdGUKCQkgKgl0aGVuIHRocm91Z2ggc3BlY2lmeWluZyBlbnZpcm9ubWVudCBaSVBPUFRTLgoJCSAqCgkJICoJQHBhcmFtCWFycmF5CQlMaXN0IG9mIHByaW1hcnkgZXhjbHVzaW9ucyAtIG1heSBiZSBlbXB0eQoJCSAqCUBwYXJhbQlhcnJheQkJTGlzdCBvZiBzZWNvbmRhcnkgZXhjbHVzaW9ucyAtIG1heSBiZSBlbXB0eQoJCSAqCUBwYXJhbQlzdHJpbmcJCVRoZSBiYXNlIGRpcmVjdG9yeSB0byBiZSB1c2VkIGlmIG5vcm1hbGl6aW5nCgkJICoKCQkgKglAcmV0dXJuCW1peGVkCQlhcnJheSBvbiBzdWNjZXNzLCBmYWxzZSBvdGhlcndpc2UKCQkgKi8KCQlwcm90ZWN0ZWQgZnVuY3Rpb24gc2FuaXRpemVfZXhjbHVkZXMoICRwcmltYXJ5LCAkc2Vjb25kYXJ5LCAkYmFzZSA9ICcnICkgewoKCQkJJHNhbml0aXplZCA9IGFycmF5KCk7CgkJCQoJCQkkYmFzZWRpciA9IHRyaW0oICRiYXNlICk7CgkJCSRub3JtYWxpemUgPSAhZW1wdHkoICRiYXNlZGlyICk7CgkJCQoJCQkvLyBOb3JtYWxpemUgdGhlIHRyYWlsaW5nIGRpcmVjdG9yeSBzZXBhcmF0b3Igb24gdGhlIHBhdGgKCQkJJGJhc2VkaXIgPSBydHJpbSggJGJhc2VkaXIsIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICkgLiBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1I7CgkJCQoJCQkvLyBOb3JtYWxpemUgcGxhdGZvcm0gc3BlY2lmaWMgZGlyZWN0b3J5IHNlcGFyYXRvcnMgaW4gcGF0aAoJCQkkYmFzZWRpciA9IHN0cl9yZXBsYWNlKCBESVJFQ1RPUllfU0VQQVJBVE9SLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IsICRiYXNlZGlyICk7CgkJCgkJCS8vICRwcmltYXJ5IGlzIGNvbnNpZGVyZWQgdG8gYmUgdW5jbGVhbgoJCQlmb3JlYWNoICggJHByaW1hcnkgYXMgJGV4Y2x1ZGUgKSB7CgkJCQoJCQkJLy8gUmVzZXQgZmxhZyBmb3Igd2hldGhlciB0aGlzIGV4Y2x1ZGUgaXMgYSBkaXJlY3RvcnktbGlrZSBleGNsdWRlCgkJCQkkaXNfZGlyZWN0b3J5X3BhdGggPSBmYWxzZTsKCQkJCQoJCQkJLy8gR2V0IHJpZCBvZiBzdGFuZGFyZCBwcmVmaXgvc3VmZml4IGRldHJpdHVzCgkJCQkkZXhjbHVkZSA9IHRyaW0oICRleGNsdWRlICk7CgkJCQkKCQkJCS8vIFBvc3NpYmxlIHRoYXQgd2UgY291bGQgZW5kIHVwIHdpdGggYW4gZW1wdHkgZW50cnkKCQkJCS8vIEFsc28gaWdub3JlIGlmIGFueSB3aWxkY2FyZCBjaGFyYWN0ZXJzIHByZXNlbnQKCQkJCWlmICggIWVtcHR5KCAkZXhjbHVkZSApICYmICggIXByZWdfbWF0Y2goICd8Wz8qXXwnLCAkZXhjbHVkZSApICkgKSB7CgkJCQkKCQkJCQkvLyBSZW1lbWJlciBpZiBpdCBoYXMgYSBkaXJlY3Rvcnkgc2VwYXJhdG9yIHN1ZmZpeAoJCQkJCWlmICggcHJlZ19tYXRjaCggJ3xbJyAuIGFkZHNsYXNoZXMoIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICkgLiAnXSR8JywgJGV4Y2x1ZGUgKSApIHsKCQkJCQkKCQkJCQkJJGlzX2RpcmVjdG9yeV9wYXRoID0gdHJ1ZTsKCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQkJLy8gUmVtb3ZlIHdoYXQgY291bGQgYmUgbXVsdGlwbGUgcHJlZml4IG9yIHN1ZmZpeCBkaXJlY3Rvcnkgc2VwYXJhdG9ycwoJCQkJCSRleGNsdWRlID0gdHJpbSggJGV4Y2x1ZGUsIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICk7CgkJCQkJCgkJCQkJLy8gTWFrZSBzdXJlIHBsYXRmb3JtIHNwZWNpZmljIGRpcmVjdG9yeSBzZXBhcmF0b3JzIGluIHBhdGggYmVjb21lIG5vcm1hbGl6ZWQKCQkJCQkkZXhjbHVkZSA9IHN0cl9yZXBsYWNlKCBESVJFQ1RPUllfU0VQQVJBVE9SLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IsICRleGNsdWRlICk7CgkJCQkJCgkJCQkJLy8gQW5kIGFkZCBiYWNrIGEgc2luZ2xlIGluc3RhbmNlIHByZWZpeAoJCQkJCSRleGNsdWRlID0gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SIC4gJGV4Y2x1ZGU7CgkJCQkJCgkJCQkJLy8gQW5kIG9wdGlvbmFsbHkgYSBzaW5nbGUgaW5zdGFuY2Ugc3VmZml4CgkJCQkJaWYgKCAkaXNfZGlyZWN0b3J5X3BhdGggKSB7CgkJCQkJCgkJCQkJCSRleGNsdWRlIC49IHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsKCQkJCQkJCgkJCQkJfQoJCQkJCQkJCQkJCgkJCQkJJHNhbml0aXplZFtdID0gJGV4Y2x1ZGU7CgkJCQkJCgkJCQl9CgkJCQkKCQkJfQoJCQkKCQkJLy8gJHNlY29uZGFyeSBpcyBjb25zaWRlcmVkIHRvIGJlIGNsZWFuCgkJCWlmICggIWVtcHR5KCAkc2Vjb25kYXJ5ICkgKSB7CgkJCQoJCQkJJHNhbml0aXplZCA9IGFycmF5X21lcmdlKCAkc2FuaXRpemVkLCAkc2Vjb25kYXJ5ICk7IAoJCQkKCQkJfQoJCQkKCQkJLy8gR2V0IHVuaXF1ZSBlbnRyaWVzIGFuZCByZW51bWJlciBudW1lcmljIGtleXMKCQkJJHNhbml0aXplZCA9IGFycmF5X21lcmdlKCBhcnJheV91bmlxdWUoICRzYW5pdGl6ZWQgKSApOwoJCQkKCQkJaWYgKCB0cnVlID09ICRub3JtYWxpemUgKSB7CgkJCQoJCQkJLy8gTWFrZSBzdXJlIHRoZSBub3JtYWxpemUgYmFzZSBoYXMgYSB0cmFpbGluZyBkaXJlY3Rvcnkgc2VwYXJhdG9yCgkJCQkkYmFzZWRpciA9ICggcnRyaW0oICRiYXNlZGlyLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgKSApIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SOwoJCQkKCQkJCWZvcmVhY2ggKCAkc2FuaXRpemVkIGFzICYkZXhjbHVzaW9uICkgewoJCQkJCgkJCQkJLy8gTXVzdCByZW1vdmUgYW55IGxlYWRpbmcgRElSRUNUT1JZX1NFUEFSQVRPUiBiZWNhdXNlICRiYXNlZGlyIGFsd2F5cyBoYXMgdHJhaWxpbmcKCQkJCQkkZXhjbHVzaW9uID0gbHRyaW0oICRleGNsdXNpb24sIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiApOwoJCQkJCSRleGNsdXNpb24gPSAoICRiYXNlZGlyIC4gJGV4Y2x1c2lvbiApOwoJCQkJCQoJCQkJfQoJCQkJCQkJCQoJCQl9CgkJCQkJCgkJCXJldHVybiAkc2FuaXRpemVkOwoJCQoJCX0KCgkJLyoqCgkJICoJZ2V0X2F2YWlsYWJsZV96aXBfbWV0aG9kcygpCgkJICoJCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgemlwIG1ldGhvZHMgdGhhdCBhcmUgYXZhaWxhYmxlIGZvciB0aGUgbW9kZSBvZiB0aGlzIG9iamVjdAoJCSAqCUxpYnJhcmllcyBtdXN0IGhhdmUgYmVlbiBsb2FkZWQgYWxyZWFkeQoJCSAqCQoJCSAqCUBwYXJhbQkJYXJyYXkJVGhlIHN1cHBvcnRlZCB6aXAgbWV0aG9kcwoJCSAqCUBwYXJhbQkJYXJyYXkJVGhlIGFycmF5IHdoaWNoIHdpbGwgaG9sZCB0aGUgYXZhaWxhYmxlIG1ldGhvZHMKCQkgKglAcGFyYW0JCWFycmF5CVRoZSBhcnJheSB0aGF0IHdpbGwgaG9sZCB0aGUgYXZhaWxhYmxlIG1ldGhvZHMgYXR0cmlidXRlcyAobWV0aG9kIHRhZyBpcyBrZXkpCgkJICoJQHJldHVybgkJYm9vbAlUcnVlIGlmIG1ldGhvZHMgYXZhaWxhYmxlLCBGYWxzZSBvdGhlcndpc2UKCQkgKgoJCSAqLwoJCXByb3RlY3RlZCBmdW5jdGlvbiBnZXRfYXZhaWxhYmxlX3ppcF9tZXRob2RzKCBhcnJheSAkc3VwcG9ydGVkX3ppcF9tZXRob2RzLCAmJGF2YWlsYWJsZV9tZXRob2RzLCAmJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHMgKSB7CgkJCgkJCS8vIE1ha2Ugc3VyZSB0aGVzZSBhcmUgY2xlYXJlZCBhcyB0aGUgY2FsbGVyIG1pZ2h0IG5vdCBoYXZlIGRvbmUgc28KCQkJJGF2YWlsYWJsZV9tZXRob2RzID0gYXJyYXkoKTsKCQkJJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHMgPSBhcnJheSgpOwoJCQkKCQkJLy8gVHJ5IGVhY2ggc3VwcG9ydGVkIHppcCBtZXRob2QgdG8gc2VlIHdoYXQgaXQgY2FuIGRvIG9uIHRoaXMgc3lzdGVtCQkKCQkJZm9yZWFjaCAoICRzdXBwb3J0ZWRfemlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7CgoJCQkJJGNsYXNzX25hbWUgPSAncGx1Z2luYnVkZHlfemJ6aXAnIC4gJG1ldGhvZF90YWc7CgkKCQkJCSR6aXBwZXIgPSBuZXcgJGNsYXNzX25hbWUoICR0aGlzICk7CgkJCQkKCQkJCWlmICggdHJ1ZSA9PT0gJHppcHBlci0+aXNfYXZhaWxhYmxlKCAkdGhpcy0+X3RlbXBkaXIgKSApIHsKCQkJCQoJCQkJCSRhdmFpbGFibGVfbWV0aG9kc1tdID0gJG1ldGhvZF90YWc7CgkJCQkJJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF0gPSAkemlwcGVyLT5nZXRfbWV0aG9kX2RldGFpbHMoKTsKCQkJCQkKCQkJCX0KCQkJCQoJCQkJdW5zZXQoICR6aXBwZXIgKTsKCQkJfQoJCQkJCQkKCQkJcmV0dXJuICggIWVtcHR5KCAkYXZhaWxhYmxlX21ldGhvZHMgKSApOwoKCQl9CgkJCQkJCQoJCS8qKgoJCSAqCWdldF9jb21wYXRpYmlsaXR5X3ppcF9tZXRob2RzKCkKCQkgKgkKCQkgKglSZXR1cm5zIHRoZSBhcnJheSBvZiB6aXAgbWV0aG9kcyB0aGF0IGFyZSByZWdhcmRlZCBhcyAiY29tcGF0aWJpbGl0eSIgbWV0aG9kcwoJCSAqCUxpYnJhcmllcyBtdXN0IGhhdmUgYmVlbiBsb2FkZWQgYWxyZWFkeQoJCSAqCQoJCSAqCUByZXR1cm4JCWFycmF5CUZsYXQgYXJyYXkgb2YgemlwIG1ldGhvZHMgKGNvdWxkIGJlIGVtcHR5KQoJCSAqCgkJICovCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldF9jb21wYXRpYmlsaXR5X3ppcF9tZXRob2RzKCkgewoJCQoJCQkkY29tcGF0aWJpbGl0eV9tZXRob2RzID0gYXJyYXkoKTsKCQkJCgkJCWZvcmVhY2ggKCAkdGhpcy0+X3ppcF9tZXRob2RzIGFzICRtZXRob2RfdGFnICkgewoKCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOwoJCgkJCQkkemlwcGVyID0gbmV3ICRjbGFzc19uYW1lKCAkdGhpcyApOwoJCQkJCgkJCQlpZiAoICR6aXBwZXItPmdldF9pc19jb21wYXRpYmlsaXR5X21ldGhvZCgpID09PSB0cnVlICkgewoJCQkJCgkJCQkJJGNvbXBhdGliaWxpdHlfbWV0aG9kc1tdID0gJG1ldGhvZF90YWc7CgkJCQkJCgkJCQl9CgkJCQkKCQkJCXVuc2V0KCAkemlwcGVyICk7CgkJCX0KCQkJCgkJCXJldHVybiAkY29tcGF0aWJpbGl0eV9tZXRob2RzOwoJCQkKCQl9CgkJCgkJLyoqCgkJICoJZ2V0X2Jlc3RfemlwX21ldGhvZHMoKQoJCSAqCQoJCSAqCVJldHVybnMgdGhlIGFycmF5IG9mIGJlc3QgemlwIG1ldGhvZChzKQoJCSAqCUZvciBub3cgd2UgYXNzdW1lIG9ubHkgb25lICJiZXN0IiBtZXRob2QgYXMgYmVpbmcgdGhlIGZpcnN0IG1ldGhvZCBpbiB0aGUgbGlzdAoJCSAqCXRoYXQgaGFzIHRoZSByZXF1ZXN0ZWQgYXR0cmlidXRlKHMpLgoJCSAqCUxpYnJhcmllcyBtdXN0IGhhdmUgYmVlbiBsb2FkZWQgYWxyZWFkeQoJCSAqCQoJCSAqCUBwYXJhbQkJYXJyYXkJJGF0dHJpYnV0ZXMJQXJyYXkgb2YgYXR0cmlidXRlcyB0byBjaGVjayBtZXRob2Qgc3VwcG9ydHMKCQkgKglAcmV0dXJuCQlhcnJheQkJCQlGbGF0IGFycmF5IG9mIHppcCBtZXRob2RzIChjb3VsZCBiZSBlbXB0eSkKCQkgKgoJCSAqLwoJCXByb3RlY3RlZCBmdW5jdGlvbiBnZXRfYmVzdF96aXBfbWV0aG9kcyggJGF0dHJpYnV0ZXMgPSBhcnJheSgpICkgewoJCQoJCQkkYmVzdF9tZXRob2RzID0gYXJyYXkoKTsKCQkJCgkJCWlmICggIWVtcHR5KCAkdGhpcy0+X3ppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJaWYgKCBlbXB0eSggJGF0dHJpYnV0ZXMgKSApIHsKCQkJCQoJCQkJCS8vIE5vIGF0dHJpYnV0ZXMgdG8gdGVzdCBmb3Igc28ganVzdCB0YWtlIHRoZSBmaXJzdCBpbiB0aGUgbGlzdAoJCQkJCSRiZXN0X21ldGhvZHNbXSA9ICR0aGlzLT5femlwX21ldGhvZHNbIDAgXTsKCQkJCQkKCQkJCX0gZWxzZSB7CgkJCQoJCQkJCS8vIEhhdmUgc29tZSBhdHRyaWJ1dGVzIHRvIHRlc3Qgc28gd29yayBhbG9uZyB0aGUgbGlzdCB1bnRpbCB3ZSBmaW5kIGEgbWF0Y2ggb3IgZW5kIG9mIGxpc3QKCQkJCQlmb3JlYWNoICggJHRoaXMtPl96aXBfbWV0aG9kcyBhcyAkbWV0aG9kX3RhZyApIHsKCQkJCQoJCQkJCQkvLyBTdGFydCBhZnJlc2ggZWFjaCB0aW1lIC0gYXNzdW1lIHN1Y2Nlc3MKCQkJCQkJJG1hdGNoID0gdHJ1ZTsKCQkJCQkJZm9yZWFjaCAoICRhdHRyaWJ1dGVzIGFzICRhdHRyaWJ1dGUgKSB7CgkJCQkJCQoJCQkJCQkJLy8gQ2hlY2sgZWFjaCBhdHRyaWJ1dGUgaW4gdHVybiAocHJlY29uZGl0aW9uIHRoYXQgYWxsIGF0dHJpYnV0ZXMgc2V0IHRydWUvZmFsc2UpCgkJCQkJCQkkbWF0Y2ggPSAoICRtYXRjaCAmJiAoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXVsgJ2F0dHInIF1bICRhdHRyaWJ1dGUgXSA9PT0gdHJ1ZSApICk7CgkJCQkJCQoJCQkJCQl9CgkJCQkJCQoJCQkJCQlpZiAoIHRydWUgPT09ICRtYXRjaCApIHsKCQkJCQkJCgkJCQkJCQkvLyBGb3VuZCBvdXIgbWF0Y2hpbmcgbWV0aG9kIHNvIGJyZWFrIG91dCBvZiB0aGUgdGVzdCBsb29wIHRvIHJldHVybgoJCQkJCQkJJGJlc3RfbWV0aG9kc1tdID0gJG1ldGhvZF90YWc7CgkJCQkJCQlicmVhazsKCQkJCQkJCgkJCQkJCX0JCQkJCQkKCgkJCQkJfQoJCQkJCgkJCQl9CgkJCQoJCQkKCQkJfQoJCQkJCQkKCQkJcmV0dXJuICRiZXN0X21ldGhvZHM7CgkJCQoJCX0KCQkKCQkvKioKCQkgKglhZGRfZGlyZWN0b3J5X3RvX3ppcCgpCgkJICoKCQkgKglBZGRzIGEgZGlyZWN0b3J5IHRvIGEgbmV3IG9yIGV4aXN0aW5nIChUT0RPOiBub3QgeWV0IGF2YWlsYWJsZSkgWklQIGZpbGUuCgkJICoKCQkgKglAcGFyYW0Jc3RyaW5nCQkJCUZ1bGwgcGF0aCAmIGZpbGVuYW1lIG9mIFpJUCBmaWxlIHRvIGNyZWF0ZS4KCQkgKglAcGFyYW0Jc3RyaW5nCQkJCUZ1bGwgZGlyZWN0b3J5IHRvIGFkZCB0byB6aXAgZmlsZS4KCQkgKglAcGFyYW0JYXJyYXkoIHN0cmluZyApCQlBcnJheSBvZiBzdHJpbmdzIG9mIHBhdGhzL2ZpbGVzIHRvIGV4Y2x1ZGUgZnJvbSB6aXBwaW5nCgkJICoJQHBhcmFtCXN0cmluZwkJCQlGdWxsIGRpcmVjdG9yeSBwYXRoIHRvIGRpcmVjdG9yeSB0byB0ZW1wb3JhcmlseSBwbGFjZSBaSVAKCQkgKglAcGFyYW0JYm9vbGVhbgkJCQlUcnVlOiBvbmx5IHVzZSBQQ0xaaXAuIEZhbHNlOiB0cnkgYWxsIGF2YWlsYWJsZQoJCSAqCgkJICoJQHJldHVybgkJCQkJCXRydWUgb24gc3VjY2VzcywgZmFsc2Ugb3RoZXJ3aXNlCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gYWRkX2RpcmVjdG9yeV90b196aXAoICR6aXBfZmlsZSwgJGFkZF9kaXJlY3RvcnksICRleGNsdWRlcyA9IGFycmF5KCksICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSA9ICcnICkgewoJCQlpZiAoIHRydWUgPT09ICR0aGlzLT5faXNfZXhwZXJpbWVudGFsICkgewoJCQkKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgX18oJ1J1bm5pbmcgYWx0ZXJuYXRpdmUgWklQIHN5c3RlbSAoQkVUQSkgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkKCQkJfSBlbHNlIHsKCQkJCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdSdW5uaW5nIHN0YW5kYXJkIFpJUCBzeXN0ZW0gYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkKCQkJfQoJCQkKCQkJLy8gTGV0J3MganVzdCBsb2cgaWYgdGhpcyBpcyBhIDMyIG9yIDY0IGJpdCBzeXN0ZW0KCQkJJHBocF9zaXplID0gKCBwbHVnaW5idWRkeV9zdGF0Ojppc19waHAoIHBsdWdpbmJ1ZGR5X3N0YXQ6OlRISVJUWV9UV09fQklUICkgKSA/ICIzMiIgOiAiNjQiIDsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXyggJ1J1bm5pbmcgdW5kZXIgJTEkcy1iaXQgUEhQJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICRwaHBfc2l6ZSApICk7CgkJCQoJCQkvLyBNYWtlIHN1cmUgd2UgdGVsbCB3aGF0IHRoZSBzYXBpIGlzCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oICdTZXJ2ZXIgQVBJOiAlMSRzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR0aGlzLT5nZXRfc2FwaV9uYW1lKCkgKSApOwkJCQoJCQkJCQoJCQkkemlwX21ldGhvZHMgPSBhcnJheSgpOwoJCQkkc2FuaXRpemVkX2V4Y2x1ZGVzID0gYXJyYXkoKTsKCQkJJGxpc3RtYWtlciA9IE5VTEw7CgkJCQoJCQkvLyBTZXQgc29tZSBhZGRpdGlvbmFsIHN5c3RlbSBleGNsdWRlcyBoZXJlIGZvciBub3cgLSB0aGVzZSBhcmUgYWxsIGZyb20gdGhlIHNpdGUgaW5zdGFsbCByb290CgkJCSRhZGRpdGlvbmFsX2V4Y2x1ZGVzID0gYXJyYXkoIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiAuICdpbXBvcnRidWRkeScgLiBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IsCgkJCQkJCQkJCQkgIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiAuICdpbXBvcnRidWRkeS5waHAnLAoJCQkJCQkJCQkJICBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgLiAnd3AtY29udGVudCcgLiBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgLiAndXBsb2FkcycgLiBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgLiAncGJfYmFja3VwYnVkZHknIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SLAoJCQkJCQkJCQkJKTsKCQkJCgkJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgdmFsaWQgemlwIG1ldGhvZCBzdHJhdGVneSBzZXR0aW5nIHRvIHVzZSBvdGhlcndpc2UgZmFsbCBiYWNrIHRvIGVtZXJnZW5jeSBjb21wYXRpYmlsaXR5CgkJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sgJ3ppcF9tZXRob2Rfc3RyYXRlZ3knIF0gKSAmJiAJKCAnMCcgIT09IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sgJ3ppcF9tZXRob2Rfc3RyYXRlZ3knIF0gKSApIHsKCQkJCgkJCQkkemlwX21ldGhvZF9zdHJhdGVneSA9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sgJ3ppcF9tZXRob2Rfc3RyYXRlZ3knIF07CgkJCQlzd2l0Y2ggKCAkemlwX21ldGhvZF9zdHJhdGVneSApIHsKCQkJCQljYXNlICIxIjoKCQkJCQkJLy8gQmVzdCBBdmFpbGFibGUKCQkJCQkJJHppcF9tZXRob2RzID0gJHRoaXMtPmdldF9iZXN0X3ppcF9tZXRob2RzKCBhcnJheSggJ2lzX2FyY2hpdmVyJyApICk7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1VzaW5nIEJlc3QgQXZhaWxhYmxlIHppcCBtZXRob2QgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQlicmVhazsKCQkJCQljYXNlICIyIjoKCQkJCQkJLy8gQWxsIEF2YWlsYWJsZQoJCQkJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdVc2luZyBBbGwgQXZhaWxhYmxlIHppcCBtZXRob2RzIGluIHByZWZlcnJlZCBvcmRlciBiYXNlZCBvbiBzZXR0aW5ncy4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkJCWJyZWFrOwoJCQkJCWNhc2UgIjMiOgoJCQkJCQkvLyBGb3JjZSBDb21wYXRpYmlsaXR5CgkJCQkJCSR6aXBfbWV0aG9kcyA9ICR0aGlzLT5nZXRfY29tcGF0aWJpbGl0eV96aXBfbWV0aG9kcygpOwkJCQkKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBfXygnVXNpbmcgRm9yY2VkIENvbXBhdGliaWxpdHkgemlwIG1ldGhvZCBiYXNlZCBvbiBzZXR0aW5ncy4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQkJCWJyZWFrOwoJCQkJCWRlZmF1bHQ6CgkJCQkJCS8vIEhtbS4uLnVucmVjb2duaXplZCB2YWx1ZSAtIGVtZXJnZW5jeSBjb21wYXRpYmlsaXR5CgkJCQkJCSR6aXBfbWV0aG9kcyA9ICR0aGlzLT5nZXRfY29tcGF0aWJpbGl0eV96aXBfbWV0aG9kcygpOwkJCQkKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBzcHJpbnRmKCBfXygnRm9yY2VkIENvbXBhdGliaWxpdHkgTW9kZSBhcyBaaXAgTWV0aG9kIFN0cmF0ZWd5IHNldHRpbmcgbm90IHJlY29nbml6ZWQ6ICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX21ldGhvZF9zdHJhdGVneSApICk7CgkJCQl9CgkJCQkKCQkJfSBlbHNlIHsKCQkJCgkJCQkvLyBXZSBnb3Qgbm8gb3IgYW4gaW52YWxpZCB6aXAgbWV0aG9kIHN0cmF0ZWd5IHdoaWNoIGlzIGEgYmFkIHNpdHVhdGlvbiAtIGVtZXJnZW5jeSBjb21wYXRpYmlsaXR5IGlzIHRoZSBvcmRlciBvZiB0aGUgZGF5CgkJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+Z2V0X2NvbXBhdGliaWxpdHlfemlwX21ldGhvZHMoKTsJCQkJCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdGb3JjZWQgQ29tcGF0aWJpbGl0eSBNb2RlIGFzIFppcCBNZXRob2QgU3RyYXRlZ3kgbm90IHNldCBvciBzZXR0aW5nIG5vdCByZWNvZ25pemVkLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCgkJCX0KCQkJCgkJCS8vIEJldHRlciBtYWtlIHN1cmUgd2UgaGF2ZSBzb21lIGF2YWlsYWJsZSBtZXRob2RzCgkJCWlmICggZW1wdHkoICR6aXBfbWV0aG9kcyApICkgewoJCQkKCQkJCS8vIEhtbSwgd2UgZG9uJ3Qgc2VlbSB0byBoYXZlIGFueSBhdmFpbGFibGUgbWV0aG9kcywgb29wcywgYmVzdCBnbyBubyBmdXJ0aGVyCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGYWlsZWQgdG8gY3JlYXRlIGEgWmlwIEFyY2hpdmUgZmlsZSAtIG5vIGF2YWlsYWJsZSBtZXRob2RzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQoJCQkJLy8gV2Ugc2hvdWxkIGhhdmUgYSB0ZW1wb3JhcnkgZGlyZWN0b3J5LCBtdXN0IGdldCByaWQgb2YgaXQsIGNhbiBzaW1wbHkgcm1kaXIgaXQgYXMgaXQgd2lsbCAoc2hvdWxkKSBiZSBlbXB0eQoJCQkJaWYgKCAhZW1wdHkoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSApICYmIGZpbGVfZXhpc3RzKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsKCQkJCQkKCQkJCQlpZiAoICFybWRpciggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICkgKSB7CgkJCQkJCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1RlbXBvcmFyeSBkaXJlY3RvcnkgY291bGQgbm90IGJlIGRlbGV0ZWQ6ICcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKTsKCQkJCQkKCQkJCQl9CgkJCQkJCQoJCQkJfQoKCQkJCXJldHVybiBmYWxzZTsKCQkJCQoJCQl9CgkJCQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdDcmVhdGluZyBaSVAgZmlsZScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIGAnIC4gJHppcF9maWxlIC4gJ2AuICcgLiBfXygnQWRkaW5nIGRpcmVjdG9yeScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIGAnIC4gJGFkZF9kaXJlY3RvcnkgLiAnYC4gJyAuIF9fKCdFeGNsdWRlcycsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gaW1wbG9kZSggJywnLCAkZXhjbHVkZXMgKSApOwoJCQkKCQkJLy8gV2UnbGwgdHJ5IGFuZCBhbGxvdyBleGNsdXNpb25zIGZvciBwY2x6aXAgaWYgd2UgY2FuCgkJCWluY2x1ZGVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi8nIC4gJHRoaXMtPl93aGVyZWFtaSAuICcvemJkaXIucGhwJyApOwoJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ3BsdWdpbmJ1ZGR5X3piZGlyJyApICkgewoJCQkKCQkJCS8vIEdlbmVyYXRlIG91ciBzYW5pdGl6ZWQgbGlzdCBvZiBkaXJlY3Rvcmllcy9maWxlcyB0byBleGNsdWRlIGFzIGFic29sdXRlIHBhdGhzIChub3JtYWxpemVkKSBmb3IgemJkaXIKCQkJCSRzYW5pdGl6ZWRfZXhjbHVkZXMgPSAkdGhpcy0+c2FuaXRpemVfZXhjbHVkZXMoICRleGNsdWRlcywgJGFkZGl0aW9uYWxfZXhjbHVkZXMsICRhZGRfZGlyZWN0b3J5ICk7CgoJCQkJLy8gTm93IGxldCdzIGNyZWF0ZSB0aGUgbGlzdCBvZiBpdGVtcyB0byBhZGQgdG8gdGhlIHppcCAtIGZpcnN0IGJ1aWxkIHRoZSB0cmVlCgkJCQkkbGlzdG1ha2VyID0gbmV3IHBsdWdpbmJ1ZGR5X3piZGlyKCAkYWRkX2RpcmVjdG9yeSwgJHNhbml0aXplZF9leGNsdWRlcyApOwoJCQkJCgkJCQkvLyBSZS1nZW5lcmF0ZSBvdXIgc2FuaXRpemVkIGxpc3Qgb2YgZGlyZWN0b3JpZXMvZmlsZXMgdG8gZXhjbHVkZSBhcyByZWxhdGl2ZSBwYXRocwoJCQkJLy8gU2xpZ2h0IGtsdWRnZSB0byBkZWFsIHdpdGggYmVpbmcgYWJsZSB0byBlbmFibGUvZGlzYWJsZSB0aGUgaW5jbHVzaW9uIHByb2Nlc3NpbmcKCQkJCS8vIChjdXJyZW50bHkgY29uZmlndXJlZCBpbiB3cC1jb25maWcucGhwKSBzbyBhbHdheXMgbmVlZCB0byBwcm92aWRlIHRoZSBleGNsdWRlcyBhcwoJCQkJLy8gcmVsYXRpdmUgcGF0aCBmb3Igbm93LiBUaGlzIG5lZWRzIHRvIGJlIHRpZGllZCB1cCBpbiBmdXR1cmUgaWYvd2hlbiB0aGUgY2FwYWJpbGl0eQoJCQkJLy8gaXMgZXN0YWJsaXNoZWQgYXMgc3RhbmRhcmQKCQkJCSRzYW5pdGl6ZWRfZXhjbHVkZXMgPSAkdGhpcy0+c2FuaXRpemVfZXhjbHVkZXMoICRleGNsdWRlcywgJGFkZGl0aW9uYWxfZXhjbHVkZXMgKTsJCQkJCgoJCQl9IGVsc2UgewoJCQkKCQkJCS8vIEdlbmVyYXRlIG91ciBzYW5pdGl6ZWQgbGlzdCBvZiBkaXJlY3Rvcmllcy9maWxlcyB0byBleGNsdWRlIGFzIHJlbGF0aXZlIHBhdGhzCgkJCQkkc2FuaXRpemVkX2V4Y2x1ZGVzID0gJHRoaXMtPnNhbml0aXplX2V4Y2x1ZGVzKCAkZXhjbHVkZXMsICRhZGRpdGlvbmFsX2V4Y2x1ZGVzICk7CgkJCQoJCQl9CgkJCQoJCQkvLyBJdGVyYXRlIG92ZXIgdGhlIG1ldGhvZHMgLSBvbmNlIHdlIHN1Y2NlZWQganVzdCByZXR1cm4gZGlyZWN0bHkgb3RoZXJ3aXNlIGRyb3AgdGhyb3VnaAoJCQlmb3JlYWNoICggJHppcF9tZXRob2RzIGFzICRtZXRob2RfdGFnICkgewoJCQkKCQkJCS8vIEZpcnN0IG1ha2Ugc3VyZSB3ZSBjYW4gYXJjaGl2ZSB3aXRoIHRoaXMgbWV0aG9kCgkJCQlpZiAoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXVsgJ2F0dHInIF1bICdpc19hcmNoaXZlcicgXSA9PT0gdHJ1ZSApIHsKCgkJCQkJJGNsYXNzX25hbWUgPSAncGx1Z2luYnVkZHlfemJ6aXAnIC4gJG1ldGhvZF90YWc7CgkJCgkJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsKCQkJCQkkemlwcGVyLT5zZXRfc3RhdHVzX2NhbGxiYWNrKCBhcnJheSggJiR0aGlzLCAnc3RhdHVzJyApICk7CgkJCQkJCgkJCQkJLy8gV2UgbmVlZCB0byB0ZWxsIHRoZSBtZXRob2Qgd2hhdCBkZXRhaWxzIGJlbG9uZyB0byBpdAoJCQkJCSR6aXBwZXItPnNldF9tZXRob2RfZGV0YWlscyggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdICk7CgkJCQkJCgkJCQkJLy8gVGVsbCB0aGUgbWV0aG9kIHRoZSBzZXJ2ZXIgYXBpIGluIHVzZQoJCQkJCSR6aXBwZXItPnNldF9zYXBpX25hbWUoICR0aGlzLT5nZXRfc2FwaV9uYW1lKCkgKTsKCQkJCQkKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdUcnlpbmcgJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkbWV0aG9kX3RhZyAuIF9fKCcgbWV0aG9kIGZvciBaSVAuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCQoJCQkJCS8vIEFzIHdlIGFyZSBsb29waW5nIG1ha2Ugc3VyZSB3ZSBoYXZlIG5vIHN0YWxlIGZpbGUgaW5mb3JtYXRpb24KCQkJCQljbGVhcnN0YXRjYWNoZSgpOwoJCQkJCQoJCQkJCS8vIFRoZSB0ZW1wb3JhcnkgemlwIGRpcmVjdG9yeSBfbXVzdF8gZXhpc3QKCQkJCQlpZiAoICFlbXB0eSggJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICkgKSB7CgkJCQkJCgkJCQkJCWlmICggIWZpbGVfZXhpc3RzKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsgLy8gQ3JlYXRlIHRlbXAgZGlyIGlmIGl0IGRvZXMgbm90IGV4aXN0LgoJCQkJCQkKCQkJCQkJCW1rZGlyKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKTsKCQkJCQkJCQoJCQkJCQl9CgkJCQkJCQoJCQkJCX0KCQkJCQkKCQkJCQkvLyBOb3cgd2UgYXJlIHJlYWR5IHRvIHRyeSBhbmQgcHJvZHVjZSB0aGUgYmFja3VwCgkJCQkJaWYgKCAkemlwcGVyLT5jcmVhdGUoICR6aXBfZmlsZSwgJGFkZF9kaXJlY3RvcnksICRzYW5pdGl6ZWRfZXhjbHVkZXMsICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSwgJGxpc3RtYWtlciApID09PSB0cnVlICkgewoJCQkJCQoJCQkJCQkvLyBHb3QgYSB2YWxpZCB6aXAgZmlsZSBzbyB3ZSBjYW4ganVzdCByZXR1cm4gLSBtZXRob2Qgd2lsbCBoYXZlIGNsZWFuZWQgdXAgdGhlIHRlbXBvcmFyeSBkaXJlY3RvcnkKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVGhlICcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJG1ldGhvZF90YWcgLiBfXygnIG1ldGhvZCBmb3IgWklQIHdhcyBzdWNjZXNzZnVsLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsKCQkJCQkJCgkJCQkJCS8vIFdlIGhhdmUgdG8gcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3QgYnJlYWsgb3V0IG9mIGZvcmVhY2gKCQkJCQkJcmV0dXJuIHRydWU7CgkKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBNZXRob2Qgd2lsbCBoYXZlIGNsZWFuZWQgdXAgdGhlIHRlbXBvcmFyeSBkaXJlY3RvcnkJCQkJCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1RoZSAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICRtZXRob2RfdGFnIC4gX18oJyBtZXRob2QgZm9yIFpJUCB3YXMgdW5zdWNjZXNzZnVsLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQkJCQkJCQkJCQkJCQoJCQkJCQl1bnNldCggJHppcHBlciApOwoJCQkJCQkKCQkJCQl9CgkJCQkKCQkJCX0gZWxzZSB7CgkJCQkKCQkJCQkvLyBUaGlzIG1ldGhvZCBpcyBub3QgY29uc2lkZXJlZCBzdWl0YWJsZSAocmVsaWFibGUgZW5vdWdoKSBmb3IgY3JlYXRpbmcgYXJjaGl2ZXMgb3IgbGFja2VkIHppcCBjYXBhYmlsaXR5CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVGhlICcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkbWV0aG9kX3RhZyAuIF9fKCcgbWV0aG9kIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGZvciBiYWNrdXAuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwkJCQkJCgkJCQkKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIGhhdmUgZmFpbGVkIGluIGFsbCBhdHRlbXB0cwoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGYWlsZWQgdG8gY3JlYXRlIGEgWmlwIEFyY2hpdmUgZmlsZSB3aXRoIGFueSBub21pbmF0ZWQgbWV0aG9kLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCgkJCXJldHVybiBmYWxzZTsKCQoJCX0KCgkJLyoqCgkJICoJdW56aXAoKQoJCSAqCgkJICoJRXh0cmFjdHMgdGhlIGNvbnRlbnRzIG9mIGEgemlwIGZpbGUgdG8gdGhlIHNwZWNpZmllZCBkaXJlY3RvcnkgdXNpbmcgdGhlIGJlc3QgdW56aXAgbWV0aG9kcyBwb3NzaWJsZS4KCQkgKgoJCSAqCUBwYXJhbQlzdHJpbmcJCSR6aXBfZmlsZQkJCQkJRnVsbCBwYXRoICYgZmlsZW5hbWUgb2YgWklQIGZpbGUgdG8gZXh0cmFjdCBmcm9tLgoJCSAqCUBwYXJhbQlzdHJpbmcJCSRkZXN0aW5hdGlvbl9kaXJlY3RvcnkJCUZ1bGwgZGlyZWN0b3J5IHBhdGggdG8gZXh0cmFjdCBpbnRvLgoJCSAqCUBwYXJhbQlib29sfHN0cmluZyAkZm9yY2VfY29tcGF0aWJpbGl0eV9tb2RlCUZhbHNlOiB1c2UgYWxsIGF2YWlsYWJsZSwgU3RyaW5nOiB1c2UgdGhhdCBtZXRob2QKCQkgKgoJCSAqCUByZXR1cm4JYm9vbAkJCQkJCQkJCXRydWUgb24gc3VjY2VzcywgZmFsc2Ugb3RoZXJ3aXNlCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIHVuemlwKCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnksICRmb3JjZV9jb21wYXRpYmlsaXR5X21vZGUgPSBmYWxzZSApIHsKCgkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCk7CgkJCQoJCQkvLyBUaGUgZm9sbG93aW5nIGlzIGp1c3QgdG8gbWF0Y2ggY3VycmVudCBmdW5jdGlvbmFsaXR5IGZvciBpbXBvcnRidWRkeSAtIGlkZWFsbHkgd291bGQgcmF0aGVyCgkJCS8vIGRvIGl0IGJ5IHNlbGVjdGluZyBhdmFpbGFibGUgY29tcGF0aWJpbGl0eSBtZXRob2RzIGJhc2VkIG9uIG1ldGhvZCBhdHRyaWJ1dGVzIC0gbWF5IGRvIHRoYXQgbGF0ZXIKCQkJLy8gKHdvdWxkIGFsc28gbmVlZCBnZXRfY29tcGF0aWJpbGl0eV96aXBfbWV0aG9kcygpIHRvIGJlIHVwZGF0ZWQgdG8gdGFrZSBwYXJhbWV0ZXIgdG8gY2hlY2sKCQkJLy8gd2hldGhlciBjb21wYXRpYmlsaXR5IG1ldGhvZCBmb3IgdGhhdCBwYXJ0aWN1bGFyIGZ1bmN0aW9uLgoJCQkJCQkKCQkJLy8gRGVjaWRlIHdoaWNoIG1ldGhvZHMgd2UgYXJlIGdvaW5nIHRvIHRyeQoJCQlpZiAoICRmb3JjZV9jb21wYXRpYmlsaXR5X21vZGUgPT0gJ3ppcGFyY2hpdmUnICkgewoKCQkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCAnemlwYXJjaGl2ZScgKTsJCQkJCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdGb3JjZWQgY29tcGF0aWJpbGl0eSB1bnppcCBtZXRob2QgKFppcEFyY2hpdmU7IG1lZGl1bSBzcGVlZCkgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJCgkJCX0gZWxzZWlmICggJGZvcmNlX2NvbXBhdGliaWxpdHlfbW9kZSA9PSAncGNsemlwJyApIHsKCQkJCgkJCQkkemlwX21ldGhvZHMgPSBhcnJheSggJ3BjbHppcCcgKTsJCQkJCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdGb3JjZWQgY29tcGF0aWJpbGl0eSB1bnppcCBtZXRob2QgKFBDTFppcDsgc2xvdyBzcGVlZCkgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwkJCQoJCQkKCQkJfSBlbHNlIHsKCQkJCgkJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVXNpbmcgYWxsIGF2YWlsYWJsZSB1bnppcCBtZXRob2RzIGluIHByZWZlcnJlZCBvcmRlci4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCX0KCQkJCQkJCgkJCS8vIEJldHRlciBtYWtlIHN1cmUgd2UgaGF2ZSBzb21lIGF2YWlsYWJsZSBtZXRob2RzCgkJCWlmICggZW1wdHkoICR6aXBfbWV0aG9kcyApICkgewoJCQkKCQkJCS8vIEhtbSwgd2UgZG9uJ3Qgc2VlbSB0byBoYXZlIGFueSBhdmFpbGFibGUgbWV0aG9kcywgb29wcywgYmVzdCBnbyBubyBmdXJ0aGVyCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdVbmFibGUgdG8gZXh0cmFjdCBiYWNrdXAgZmlsZSBjb250ZW50cyAoJTEkcyB0byAlMiRzKTogTm8gYXZhaWxhYmxlIHVuemlwIG1ldGhvZHMgZm91bmQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlLCAkZGVzdGluYXRpb25fZGlyZWN0b3J5ICkgKTsKCQkJCQoJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCgkJCX0KCgkJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgbm9ybWFsaXplZCBkaXJlY3Rvcnkgc2VwYXJhdG9yIHN1ZmZpeAkKCQkJJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSA9IHJ0cmltKCAkZGVzdGluYXRpb25fZGlyZWN0b3J5LCBzZWxmOjpESVJFQ1RPUllfU0VQQVJBVE9SUyApIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SOwkJCgoJCQkvLyBJdGVyYXRlIG92ZXIgdGhlIG1ldGhvZHMgLSBvbmNlIHdlIHN1Y2NlZWQganVzdCByZXR1cm4gZGlyZWN0bHkgb3RoZXJ3aXNlIGRyb3AgdGhyb3VnaAoJCQlmb3JlYWNoICggJHppcF9tZXRob2RzIGFzICRtZXRob2RfdGFnICkgewoJCQkKCQkJCS8vIEZpcnN0IG1ha2Ugc3VyZSB3ZSBjYW4gY2hlY2sgZmlsZSBleGlzdGVuY2Ugd2l0aCB0aGlzIG1ldGhvZCAoaWdub3JlIHNpbGVudGx5IGlmIG5vdCkKCQkJCS8vIE5vdGU6IGhhcyB0byBiZSBhYmxlIHRvIHVuemlwIGFzIHdlbGwgYnV0IGlmIHRoYXQgZnVuY3Rpb25hbGl0eSB3YXNuJ3QgYXZhaWxhYmxlIGluCgkJCQkvLyB0aGUgbWV0aG9kIHRoZSBpc19jaGVja2VyIGF0dHJpYnV0ZSB3aWxsIGhhdmUgYmVlbiBzZXQgZmFsc2UKCQkJCWlmICggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdWyAnYXR0cicgXVsgJ2lzX3VuYXJjaGl2ZXInIF0gPT09IHRydWUgKSB7CgoJCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOwoJCQoJCQkJCSR6aXBwZXIgPSBuZXcgJGNsYXNzX25hbWUoICR0aGlzICk7CgkJCQkJJHppcHBlci0+c2V0X3N0YXR1c19jYWxsYmFjayggYXJyYXkoICYkdGhpcywgJ3N0YXR1cycgKSApOwoJCQkJCQoJCQkJCS8vIFdlIG5lZWQgdG8gdGVsbCB0aGUgbWV0aG9kIHdoYXQgZGV0YWlscyBiZWxvbmcgdG8gaXQKCQkJCQkkemlwcGVyLT5zZXRfbWV0aG9kX2RldGFpbHMoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXSApOwoJCQkJCQkJCQkJCgkJCQkJLy8gTm93IHdlIGFyZSByZWFkeSB0byB0cnkgYW5kIGV4dHJhY3QgdGhlIGJhY2t1cAoJCQkJCSRyZXN1bHQgPSAkemlwcGVyLT5leHRyYWN0KCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKTsKCQkJCQkKCQkJCQkvLyBXaWxsIGJlIGZhbHNlIGlmIHdlIGNvdWxkbid0IGV4dHJhY3QgdGhlIGJhY2t1cAoJCQkJCWlmICggJHJlc3VsdCA9PT0gdHJ1ZSApIHsKCQkJCQkKCQkJCQkJLy8gTXVzdCBhc3N1bWUgdGhhdCB3ZSBleHRyYWN0ZWQgb2sKCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsKCQkJCQkJCgkJCQkJCS8vIFdlIGhhdmUgdG8gcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3QgYnJlYWsgb3V0IG9mIGZvcmVhY2gKCQkJCQkJcmV0dXJuIHRydWU7CgkKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBUaGUgemlwcGVyIGVuY291bnRlcmVkIGFuIGVycm9yIHNvIHdlIG5lZWQgdG8gZHJvcCB0aHJvdWdoIGFuZCBsb29wIHJvdW5kIHRvIHRyeSBhbm90aGVyCgkJCQkJCS8vIFdlJ2xsIG5vdCBwcm9jZXNzIHRoZSByZXN1bHQgaGVyZSwganVzdCBkcm9wIHRocm91Z2ggc2lsZW50bHkgKHRoZSBtZXRob2Qgd2lsbCBoYXZlIGxvZ2dlZCBpdCkJCQkKCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsKCQkJCQkJCgkJCQkJfQoJCQkJCgkJCQl9CgkJCQkKCQkJfQoJCQkKCQkJLy8gSWYgd2UgZ290IHRoaXMgZmFyIHRoZW4gbm8gbWV0aG9kIHRvIGV4dHJhY3QgYmFja3VwIGNvbnRlbnQgd2FzIGF2YWlsYWJsZSBvciB3b3JrZWQKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnVW5hYmxlIHRvIGV4dHJhY3QgYmFja3VwIGZpbGUgY29udGVudHMgKCUxJHMgdG8gJTIkcyk6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSApOwoJCQlyZXR1cm4gZmFsc2U7CgkJCQoJCX0KCQkKCQkvKioKCQkgKglleHRyYWN0KCkKCQkgKgoJCSAqCUV4dHJhY3RzIHRoZSBzcGVjaWZpZWQgY29udGVudHMgb2YgYSB6aXAgZmlsZSB0byB0aGUgc3BlY2lmaWVkIGRlc3RpbmF0aW9uIHVzaW5nIHRoZSBiZXN0IHVuemlwIG1ldGhvZHMgcG9zc2libGUuCgkJICoJVGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeSBfbXVzdF8gYWxyZWFkeSBleGlzdCBhbmQgYmUgd3JpdGFibGUgLSB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNyZWF0ZSBpdAoJCSAqCVRoZSBpdGVtcyBhcmUgYW4gYXJyYXkgb2YgbWFwcGluZyBvZiB3aGF0ID0+IHdoZXJlLCBlLmcuCgkJICoJYXJyYXkoICJkaXIvbXlmaWxlLnR4dCIgPT4gIiIsICJkaXIvbXlmaWxlLnR4dCIgPT4gInRtcGZpbGVuYW1lIiwgImRpci9teWZpbGUudHh0IiA9PiAiZGlyL215ZmlsZS50eHQiICkKCQkgKglJbiB0aGUgZmlyc3QgY2FzZSB0aGUgZmlsZSBpcyBleHRyYWN0ZWQgdG8gJGRlc3RpbmF0aW9uX2RpcmVjdG9yeS9teWZpbGUudHh0CgkJICoJSW4gdGhlIHNlY29uZCBjYXNlIHRoZSBmaWxlIGlzIGV4dHJhY3RlZCB0byAkZGVzdGluYXRpb25fZGlyZWN0b3J5L3RtcGZpbGVuYW1lCgkJICoJSW4gdGhlIHRoaXJkIGNhc2UgdGhlIGZpbGUgaXMgZXh0cmFjdGVkIHRvICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkvZGlyL215ZmlsZS50eHQKCQkgKglOb3RlOiBpbiB0aGUgc2Vjb25kIGNhc2UgdGhlIGZpbGUgaXMgaW5pdGlhbGx5IGV4dHJjYXRlZCBhcyBteWZpbGUudHh0IGFuZCB0aGVuIHJlbmFtZSB0byB0bXBmaWxlbmFtZQoJCSAqCUFub3RoZXIgZXhhbXBsZSBpcyBmb3IgZGlyZWN0b3J5IGV4dHJhY3Rpb246CgkJICoJYXJyYXkoICJkaXIvKiIgPT4gImRpci8qIiApCgkJICoJV2hlcmVieSB0aGUgZGlyZWN0b3J5IGRpciBhbmQgYWxsIGl0J3MgY29udGVudCAocmVjdXJzaXZlbHkpIGlzIGV4dHJhY3RlZCB0byAkZGVzdGluYXRpb24vZGlyCgkJICoJTm90ZTogdGhlICogaXMgcmVxdWlyZWQgb3RoZXJ3aXNlIHlvdSBqdXN0IGdldCBhbiBlbXB0eSBkaXJlY3RvcnkKCQkgKgoJCSAqCUBwYXJhbQlzdHJpbmcJJHppcF9maWxlCQkJCUZ1bGwgcGF0aCAmIGZpbGVuYW1lIG9mIFpJUCBmaWxlIHRvIGV4dHJhY3QgZnJvbS4KCQkgKglAcGFyYW0Jc3RyaW5nCSRkZXN0aW5hdGlvbl9kaXJlY3RvcnkJRnVsbCBkaXJlY3RvcnkgcGF0aCB0byBleHRyYWN0IHRvCgkJICoJQHBhcmFtCWFycmF5CSRpdGVtcwkJCQkJTWFwcGluZyBvZiB3aGF0IHRvIGV4dHJhY3QgYW5kIHRvIHdoYXQKCQkgKgoJCSAqCUByZXR1cm4JYm9vbAkJCQkJCQl0cnVlIG9uIHN1Y2Nlc3MgKGFsbCBleHRyYWN0aW9ucyBzdWNjZXNzZnVsKSwgZmFsc2Ugb3RoZXJ3aXNlCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIGV4dHJhY3QoICR6aXBfZmlsZSwgJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSwgJGl0ZW1zICkgewoKCQkJJHppcF9tZXRob2RzID0gYXJyYXkoKTsKCQkJCgkJCS8vIFRoZSBmb2xsb3dpbmcgaXMganVzdCB0byBtYXRjaCBjdXJyZW50IGZ1bmN0aW9uYWxpdHkgZm9yIGltcG9ydGJ1ZGR5IC0gaWRlYWxseSB3b3VsZCByYXRoZXIKCQkJLy8gZG8gaXQgYnkgc2VsZWN0aW5nIGF2YWlsYWJsZSBjb21wYXRpYmlsaXR5IG1ldGhvZHMgYmFzZWQgb24gbWV0aG9kIGF0dHJpYnV0ZXMgLSBtYXkgZG8gdGhhdCBsYXRlcgoJCQkvLyAod291bGQgYWxzbyBuZWVkIGdldF9jb21wYXRpYmlsaXR5X3ppcF9tZXRob2RzKCkgdG8gYmUgdXBkYXRlZCB0byB0YWtlIHBhcmFtZXRlciB0byBjaGVjawoJCQkvLyB3aGV0aGVyIGNvbXBhdGliaWxpdHkgbWV0aG9kIGZvciB0aGF0IHBhcnRpY3VsYXIgZnVuY3Rpb24uCgkJCQkJCQoJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOwoJCQkJCQkKCQkJLy8gQmV0dGVyIG1ha2Ugc3VyZSB3ZSBoYXZlIHNvbWUgYXZhaWxhYmxlIG1ldGhvZHMKCQkJaWYgKCBlbXB0eSggJHppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJLy8gSG1tLCB3ZSBkb24ndCBzZWVtIHRvIGhhdmUgYW55IGF2YWlsYWJsZSBtZXRob2RzLCBvb3BzLCBiZXN0IGdvIG5vIGZ1cnRoZXIKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1VuYWJsZSB0byBleHRyYWN0IGZyb20gYmFja3VwIGZpbGUgKCUxJHMgdG8gJTIkcyk6IE5vIGF2YWlsYWJsZSB1bnppcCBtZXRob2RzIGZvdW5kLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSwgJGRlc3RpbmF0aW9uICkgKTsKCQkJCQoJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCgkJCX0KCQkJCgkJCWlmICggISggZmlsZV9leGlzdHMoICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSAmJiBpc19kaXIoICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSAmJiBpc193cml0YWJsZSggJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSApICkgKSB7CgkJCQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnVW5hYmxlIHRvIGV4dHJhY3QgZnJvbSBiYWNrdXAgZmlsZSAoJTEkcyB0byAlMiRzKTogJTIkcyBkb2VzIG5vdCBleGlzdCwgaXMgbm90IGEgZGlyZWN0b3J5IG9yIGlzIG5vdCB3cml0ZWFibGUnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSApOwoJCQkKCQkJCXJldHVybiBmYWxzZTsKCQkJCQoJCQl9CgkJCQoJCQkvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIG5vcm1hbGl6ZWQgZGlyZWN0b3J5IHNlcGFyYXRvciBzdWZmaXgJCgkJCSRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgPSBydHJpbSggJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsJCQoKCQkJLy8gSXRlcmF0ZSBvdmVyIHRoZSBtZXRob2RzIC0gb25jZSB3ZSBzdWNjZWVkIGp1c3QgcmV0dXJuIGRpcmVjdGx5IG90aGVyd2lzZSBkcm9wIHRocm91Z2gKCQkJZm9yZWFjaCAoICR6aXBfbWV0aG9kcyBhcyAkbWV0aG9kX3RhZyApIHsKCQkJCgkJCQkvLyBGaXJzdCBtYWtlIHN1cmUgd2UgY2FuIGNoZWNrIGZpbGUgZXhpc3RlbmNlIHdpdGggdGhpcyBtZXRob2QgKGlnbm9yZSBzaWxlbnRseSBpZiBub3QpCgkJCQkvLyBOb3RlOiBoYXMgdG8gYmUgYWJsZSB0byB1bnppcCBhcyB3ZWxsIGJ1dCBpZiB0aGF0IGZ1bmN0aW9uYWxpdHkgd2Fzbid0IGF2YWlsYWJsZSBpbgoJCQkJLy8gdGhlIG1ldGhvZCB0aGUgaXNfY2hlY2tlciBhdHRyaWJ1dGUgd2lsbCBoYXZlIGJlZW4gc2V0IGZhbHNlCgkJCQlpZiAoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXVsgJ2F0dHInIF1bICdpc19leHRyYWN0b3InIF0gPT09IHRydWUgKSB7CgoJCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOwoJCQoJCQkJCSR6aXBwZXIgPSBuZXcgJGNsYXNzX25hbWUoICR0aGlzICk7CgkJCQkJJHppcHBlci0+c2V0X3N0YXR1c19jYWxsYmFjayggYXJyYXkoICYkdGhpcywgJ3N0YXR1cycgKSApOwoJCQkJCQoJCQkJCS8vIFdlIG5lZWQgdG8gdGVsbCB0aGUgbWV0aG9kIHdoYXQgZGV0YWlscyBiZWxvbmcgdG8gaXQKCQkJCQkkemlwcGVyLT5zZXRfbWV0aG9kX2RldGFpbHMoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXSApOwoJCQkJCQkJCQkJCgkJCQkJLy8gTm93IHdlIGFyZSByZWFkeSB0byB0cnkgYW5kIGV4dHJhY3QgZnJvbSB0aGUgYmFja3VwCgkJCQkJJHJlc3VsdCA9ICR6aXBwZXItPmV4dHJhY3QoICR6aXBfZmlsZSwgJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSwgJGl0ZW1zICk7CgkJCQkJCgkJCQkJLy8gV2lsbCBiZSBmYWxzZSBpZiB3ZSBjb3VsZG4ndCBleHRyYWN0IGZyb20gdGhlIGJhY2t1cAoJCQkJCWlmICggJHJlc3VsdCA9PT0gdHJ1ZSApIHsKCQkJCQkKCQkJCQkJLy8gTXVzdCBhc3N1bWUgdGhhdCB3ZSBleHRyYWN0ZWQgb2sKCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsKCQkJCQkJCgkJCQkJCS8vIFdlIGhhdmUgdG8gcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3QgYnJlYWsgb3V0IG9mIGZvcmVhY2gKCQkJCQkJcmV0dXJuIHRydWU7CgkKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBUaGUgemlwcGVyIGVuY291bnRlcmVkIGFuIGVycm9yIHNvIHdlIG5lZWQgdG8gZHJvcCB0aHJvdWdoIGFuZCBsb29wIHJvdW5kIHRvIHRyeSBhbm90aGVyCgkJCQkJCS8vIFdlJ2xsIG5vdCBwcm9jZXNzIHRoZSByZXN1bHQgaGVyZSwganVzdCBkcm9wIHRocm91Z2ggc2lsZW50bHkgKHRoZSBtZXRob2Qgd2lsbCBoYXZlIGxvZ2dlZCBpdCkJCQkKCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsKCQkJCQkJCgkJCQkJfQoJCQkJCgkJCQl9CgkJCQkKCQkJfQoJCQkKCQkJLy8gSWYgd2UgZ290IHRoaXMgZmFyIHRoZW4gbm8gbWV0aG9kIHRvIGV4dHJhY3QgZnJvbSBiYWNrdXAgY29udGVudCB3YXMgYXZhaWxhYmxlIG9yIHdvcmtlZAoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdVbmFibGUgdG8gZXh0cmFjdCBmcm9tIGJhY2t1cCBmaWxlICglMSRzIHRvICUyJHMpOiBObyBjb21wYXRpYmxlIHppcCBtZXRob2QgZm91bmQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlLCAkZGVzdGluYXRpb25fZGlyZWN0b3J5ICkgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCQkKCQl9CgkJCgkJLyoqCgkJICoJZmlsZV9leGlzdHMoKQoJCSAqCQoJCSAqCVRlc3RzIHdoZXRoZXIgYSBmaWxlICh3aXRoIHBhdGgpIGV4aXN0cyBpbiB0aGUgZ2l2ZW4gemlwIGZpbGUKCQkgKglJZiBsZWF2ZV9vcGVuIGlzIHRydWUgdGhlbiB0aGUgemlwIG9iamVjdCB3aWxsIGJlIGxlZnQgb3BlbiBmb3IgZmFzdGVyIGNoZWNraW5nIGZvciBzdWJzZXF1ZW50IGZpbGVzIHdpdGhpbiB0aGlzIHppcAoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCSR6aXBfZmlsZQkJVGhlIHppcCBmaWxlIHRvIGNoZWNrCgkJICoJQHBhcmFtCQlzdHJpbmcJJGxvY2F0ZV9maWxlCVRoZSBmaWxlIHRvIHRlc3QgZm9yCgkJICoJQHBhcmFtCQlib29sCSRsZWF2ZV9vcGVuCQlPcHRpb25hbDogVHJ1ZSBpZiB0aGUgemlwIGZpbGUgc2hvdWxkIGJlIGxlZnQgb3BlbgoJCSAqCUByZXR1cm4JCWJvb2wJCQkJCVRydWUgaWYgdGhlIGZpbGUgaXMgZm91bmQgaW4gdGhlIHppcCBvdGhlcndpc2UgZmFsc2UKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBmaWxlX2V4aXN0cyggJHppcF9maWxlLCAkbG9jYXRlX2ZpbGUsICRsZWF2ZV9vcGVuID0gZmFsc2UgKSB7CgkJCQkJCgkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCk7CgkJCQkJCQoJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOwoJCQkKCQkJLy8gQmV0dGVyIG1ha2Ugc3VyZSB3ZSBoYXZlIHNvbWUgYXZhaWxhYmxlIG1ldGhvZHMKCQkJaWYgKCBlbXB0eSggJHppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJLy8gSG1tLCB3ZSBkb24ndCBzZWVtIHRvIGhhdmUgYW55IGF2YWlsYWJsZSBtZXRob2RzLCBvb3BzLCBiZXN0IGdvIG5vIGZ1cnRoZXIKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0ZhaWxlZCB0byBjaGVjayBmaWxlIGV4aXN0cyAtIG5vIGF2YWlsYWJsZSBtZXRob2RzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQoJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCgkJCX0KCQkJCQkJCgkJCS8vIEl0ZXJhdGUgb3ZlciB0aGUgbWV0aG9kcyAtIG9uY2Ugd2Ugc3VjY2VlZCBqdXN0IHJldHVybiBkaXJlY3RseSBvdGhlcndpc2UgZHJvcCB0aHJvdWdoCgkJCWZvcmVhY2ggKCAkemlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7CgkJCQoJCQkJLy8gRmlyc3QgbWFrZSBzdXJlIHdlIGNhbiBjaGVjayBmaWxlIGV4aXN0ZW5jZSB3aXRoIHRoaXMgbWV0aG9kIChpZ25vcmUgc2lsZW50bHkgaWYgbm90KQoJCQkJLy8gTm90ZTogaGFzIHRvIGJlIGFibGUgdG8gdW56aXAgYXMgd2VsbCBidXQgaWYgdGhhdCBmdW5jdGlvbmFsaXR5IHdhc24ndCBhdmFpbGFibGUgaW4KCQkJCS8vIHRoZSBtZXRob2QgdGhlIGlzX2NoZWNrZXIgYXR0cmlidXRlIHdpbGwgaGF2ZSBiZWVuIHNldCBmYWxzZQoJCQkJaWYgKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF1bICdhdHRyJyBdWyAnaXNfY2hlY2tlcicgXSA9PT0gdHJ1ZSApIHsKCgkJCQkJJGNsYXNzX25hbWUgPSAncGx1Z2luYnVkZHlfemJ6aXAnIC4gJG1ldGhvZF90YWc7CgkJCgkJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsKCQkJCQkkemlwcGVyLT5zZXRfc3RhdHVzX2NhbGxiYWNrKCBhcnJheSggJiR0aGlzLCAnc3RhdHVzJyApICk7CgkJCQkJCgkJCQkJLy8gV2UgbmVlZCB0byB0ZWxsIHRoZSBtZXRob2Qgd2hhdCBkZXRhaWxzIGJlbG9uZyB0byBpdAoJCQkJCSR6aXBwZXItPnNldF9tZXRob2RfZGV0YWlscyggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdICk7CgkJCQkJCQkJCQkKCQkJCQkvLyBOb3cgd2UgYXJlIHJlYWR5IHRvIHRyeSBhbmQgdGVzdCBmb3IgdGhlIGZpbGUgZXhpc3RlbmNlCgkJCQkJJHJlc3VsdCA9ICR6aXBwZXItPmZpbGVfZXhpc3RzKCAkemlwX2ZpbGUsICRsb2NhdGVfZmlsZSwgJGxlYXZlX29wZW4gKTsKCQkJCQkKCQkJCQkvLyBXaWxsIGJlIHRydWUvZmFsc2UgaWYgZmlsZSBmb3VuZC9ub3QtZm91bmQgb3RoZXJ3aXNlIGVycm9yIGluZm9ybWF0aW9uIGFycmF5CgkJCQkJaWYgKCAhaXNfYXJyYXkoICRyZXN1bHQgKSApIHsKCQkJCQkKCQkJCQkJLy8gRWl0aGVyIHdlIGZvdW5kIHRoZSBmaWxlIG9yIHdlIGRpZG4ndCBidXQgd2UgaGF2ZSBhIHZhbGlkIHJlc3VsdAoJCQkJCQl1bnNldCggJHppcHBlciApOwoJCQkJCQkKCQkJCQkJLy8gV2UgaGF2ZSB0byByZXR1cm4gaGVyZSBiZWNhdXNlIHdlIGNhbm5vdCBicmVhayBvdXQgb2YgZm9yZWFjaAoJCQkJCQlyZXR1cm4gJHJlc3VsdDsKCQoJCQkJCX0gZWxzZSB7CgkJCQkJCgkJCQkJCS8vIFRoZSB6aXBwZXIgZW5jb3VudGVyZWQgYW4gZXJyb3Igc28gd2UgbmVlZCB0byBkcm9wIHRocm91Z2ggYW5kIGxvb3Agcm91bmQgdG8gdHJ5IGFub3RoZXIKCQkJCQkJLy8gV2UnbGwgbm90IHByb2Nlc3MgdGhlIHJlc3VsdCBoZXJlLCBqdXN0IGRyb3AgdGhyb3VnaCBzaWxlbnRseSAodGhlIG1ldGhvZCB3aWxsIGhhdmUgbG9nZ2VkIGl0KQkJCQoJCQkJCQl1bnNldCggJHppcHBlciApOwoJCQkJCQkKCQkJCQl9CgkJCQkKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiBubyBtZXRob2QgdG8gY2hlY2sgYmFja3VwIGNvbnRlbnQgd2FzIGF2YWlsYWJsZSBvciB3b3JrZWQKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnVW5hYmxlIHRvIGNoZWNrIGlmIGZpbGUgZXhpc3RzIChsb29raW5nIGZvciAlMSRzIGluICUyJHMpOiBObyBjb21wYXRpYmxlIHppcCBtZXRob2QgZm91bmQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJGxvY2F0ZV9maWxlLCAkemlwX2ZpbGUgKSApOwoJCQlyZXR1cm4gZmFsc2U7CgkJCQoJCX0KCQkJCQoJCS8qCWdldF9maWxlX2xpc3QoKQoJCSAqCQoJCSAqCUdldCBhbiBhcnJheSBvZiBhbGwgZmlsZXMgaW4gYSB6aXAgZmlsZSB3aXRoIHNvbWUgZmlsZSBwcm9wZXJ0aWVzLgoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkkemlwX2ZpbGUJVGhlIGZpbGUgdG8gbGlzdCB0aGUgY29udGVudCBvZgoJCSAqCUByZXR1cm4JCWJvb2x8YXJyYXkJCQkJZmFsc2Ugb24gZmFpbHVyZSwgb3RoZXJ3aXNlIGFycmF5IG9mIGZpbGUgcHJvcGVydGllcyAobWF5IGJlIGVtcHR5KQoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfZmlsZV9saXN0KCAkemlwX2ZpbGUgKSB7CgoJCQkkemlwX21ldGhvZHMgPSBhcnJheSgpOwoJCQkJCQkKCQkJJHppcF9tZXRob2RzID0gJHRoaXMtPl96aXBfbWV0aG9kczsKCQkJCgkJCS8vIEJldHRlciBtYWtlIHN1cmUgd2UgaGF2ZSBzb21lIGF2YWlsYWJsZSBtZXRob2RzCgkJCWlmICggZW1wdHkoICR6aXBfbWV0aG9kcyApICkgewoJCQkKCQkJCS8vIEhtbSwgd2UgZG9uJ3Qgc2VlbSB0byBoYXZlIGFueSBhdmFpbGFibGUgbWV0aG9kcywgb29wcywgYmVzdCBnbyBubyBmdXJ0aGVyCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGYWlsZWQgdG8gbGlzdCBiYWNrdXAgZmlsZSBjb250ZW50cyAtIG5vIGF2YWlsYWJsZSBtZXRob2RzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQoJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCgkJCX0KCQkJCQkJCgkJCS8vIEl0ZXJhdGUgb3ZlciB0aGUgbWV0aG9kcyAtIG9uY2Ugd2Ugc3VjY2VlZCBqdXN0IHJldHVybiBkaXJlY3RseSBvdGhlcndpc2UgZHJvcCB0aHJvdWdoCgkJCWZvcmVhY2ggKCAkemlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7CgkJCQoJCQkJLy8gRmlyc3QgbWFrZSBzdXJlIHdlIGNhbiBsaXN0IGJhY2t1cCBmaWxlIGNvbnRlbnQgd2l0aCB0aGlzIG1ldGhvZCAoaWdub3JlIHNpbGVudGx5IGlmIG5vdCkKCQkJCS8vIE5vdGU6IGhhcyB0byBiZSBhYmxlIHRvIHVuemlwIGFzIHdlbGwgYnV0IGlmIHRoYXQgZnVuY3Rpb25hbGl0eSB3YXNuJ3QgYXZhaWxhYmxlIGluCgkJCQkvLyB0aGUgbWV0aG9kIHRoZSBpc19saXN0ZXIgYXR0cmlidXRlIHdpbGwgaGF2ZSBiZWVuIHNldCBmYWxzZQoJCQkJaWYgKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF1bICdhdHRyJyBdWyAnaXNfbGlzdGVyJyBdID09PSB0cnVlICkgewoKCQkJCQkkY2xhc3NfbmFtZSA9ICdwbHVnaW5idWRkeV96YnppcCcgLiAkbWV0aG9kX3RhZzsKCQkKCQkJCQkkemlwcGVyID0gbmV3ICRjbGFzc19uYW1lKCAkdGhpcyApOwoJCQkJCSR6aXBwZXItPnNldF9zdGF0dXNfY2FsbGJhY2soIGFycmF5KCAmJHRoaXMsICdzdGF0dXMnICkgKTsKCQkJCQkKCQkJCQkvLyBXZSBuZWVkIHRvIHRlbGwgdGhlIG1ldGhvZCB3aGF0IGRldGFpbHMgYmVsb25nIHRvIGl0CgkJCQkJJHppcHBlci0+c2V0X21ldGhvZF9kZXRhaWxzKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF0gKTsKCQkJCQkJCQkJCQoJCQkJCS8vIE5vdyB3ZSBhcmUgcmVhZHkgdG8gdHJ5IGFuZCB0ZXN0IGZvciB0aGUgZmlsZSBleGlzdGVuY2UKCQkJCQkkcmVzdWx0ID0gJHppcHBlci0+Z2V0X2ZpbGVfbGlzdCggJHppcF9maWxlICk7CgkJCQkJCgkJCQkJLy8gV2lsbCBiZSBmYWxzZSBpZiB3ZSBjb3VsZG4ndCBsaXN0IGNvbnRlbnRzIG9yIGZpbGUgbGlzdCBhcnJheSBvdGhlcndpc2UKCQkJCQlpZiAoIGlzX2FycmF5KCAkcmVzdWx0ICkgKSB7CgkJCQkJCgkJCQkJCS8vIFdlIGdvdCBhIGxpc3Qgc28gYmV0dGVyIGFzc3VtZSBpdCBpcyBvawoJCQkJCQl1bnNldCggJHppcHBlciApOwoJCQkJCQkKCQkJCQkJLy8gV2UgaGF2ZSB0byByZXR1cm4gaGVyZSBiZWNhdXNlIHdlIGNhbm5vdCBicmVhayBvdXQgb2YgZm9yZWFjaAoJCQkJCQlyZXR1cm4gJHJlc3VsdDsKCQoJCQkJCX0gZWxzZSB7CgkJCQkJCgkJCQkJCS8vIFRoZSB6aXBwZXIgZW5jb3VudGVyZWQgYW4gZXJyb3Igc28gd2UgbmVlZCB0byBkcm9wIHRocm91Z2ggYW5kIGxvb3Agcm91bmQgdG8gdHJ5IGFub3RoZXIKCQkJCQkJLy8gV2UnbGwgbm90IHByb2Nlc3MgdGhlIHJlc3VsdCBoZXJlLCBqdXN0IGRyb3AgdGhyb3VnaCBzaWxlbnRseSAodGhlIG1ldGhvZCB3aWxsIGhhdmUgbG9nZ2VkIGl0KQkJCQoJCQkJCQl1bnNldCggJHppcHBlciApOwoJCQkJCQkKCQkJCQl9CgkJCQkKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiBubyBtZXRob2QgdG8gbGlzdCBiYWNrdXAgZmlsZSBjb250ZW50IHdhcyBhdmFpbGFibGUgb3Igd29ya2VkCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1VuYWJsZSB0byBjaGVjayBmaWxlIGNvbnRlbnQgb2YgYmFja3VwICglMSRzKTogTm8gY29tcGF0aWJsZSB6aXAgbWV0aG9kIGZvdW5kLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSApICk7CgkJCXJldHVybiBmYWxzZTsKCQkJCgkJfQoJCQoJCS8qCXNldF9jb21tZW50KCkKCQkgKgkKCQkgKglSZXRyaWV2ZSBhcmNoaXZlIGNvbW1lbnQuCgkJICoJCgkJICoJQHBhcmFtCQlzdHJpbmcJCQkkemlwX2ZpbGUJCUZpbGVuYW1lIG9mIGFyY2hpdmUgdG8gc2V0IGNvbW1lbnQgb24uCgkJICoJQHBhcmFtCQlzdHJpbmd8YXJyYXkJJGNvbW1lbnQJCUNvbW1lbnQgdG8gYXBwbHkgdG8gYXJjaGl2ZS4gSWYgYXJyYXksIGpzb24gZW5jb2RlZC4gRGVsaW1pbmF0ZWQgd2l0aCBNZXRhRGF0YTogYW5kIE1ldGFEYXRhLUVuZDouCgkJICoJQHJldHVybgkJYm9vbHxzdHJpbmcJCQkJCQl0cnVlIG9uIHN1Y2Nlc3MsIGVycm9yIG1lc3NhZ2Ugb3RoZXJ3aXNlLgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBzZXRfY29tbWVudCggJHppcF9maWxlLCAkY29tbWVudCApIHsKCQkJCgkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCk7CgkJCQkJCQoJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOwoJCQkKCQkJLy8gQmV0dGVyIG1ha2Ugc3VyZSB3ZSBoYXZlIHNvbWUgYXZhaWxhYmxlIG1ldGhvZHMKCQkJaWYgKCBlbXB0eSggJHppcF9tZXRob2RzICkgKSB7CgkJCQoJCQkJLy8gSG1tLCB3ZSBkb24ndCBzZWVtIHRvIGhhdmUgYW55IGF2YWlsYWJsZSBtZXRob2RzLCBvb3BzLCBiZXN0IGdvIG5vIGZ1cnRoZXIKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0ZhaWxlZCB0byBzZXQgY29tbWVudCBpbiBiYWNrdXAgZmlsZSAtIG5vIGF2YWlsYWJsZSBtZXRob2RzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQoJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCgkJCX0KCQkJCgkJCS8vIEVuY29kZSAkY29tbWVudCBpZiBhbiBhcnJheS4gSGFuZGxlIGRlbGltaW5hdGlvbi4KCQkJaWYgKCBpc19hcnJheSggJGNvbW1lbnQgKSApIHsKCQkJCSRjb21tZW50ID0ganNvbl9lbmNvZGUoICRjb21tZW50ICk7CgkJCX0KCQkJJGNvbW1lbnQgPSAnTWV0YURhdGE6JyAuICRjb21tZW50IC4gJ01ldGFEYXRhLUVuZDonOwoJCQkKCQkJLy8gSXRlcmF0ZSBvdmVyIHRoZSBtZXRob2RzIC0gb25jZSB3ZSBzdWNjZWVkIGp1c3QgcmV0dXJuIGRpcmVjdGx5IG90aGVyd2lzZSBkcm9wIHRocm91Z2gKCQkJZm9yZWFjaCAoICR6aXBfbWV0aG9kcyBhcyAkbWV0aG9kX3RhZyApIHsKCQkJCQkKCQkJCS8vIEZpcnN0IG1ha2Ugc3VyZSB3ZSBjYW4gbWFuYWdlIGNvbW1lbnRzIHdpdGggdGhpcyBtZXRob2QgKGlnbm9yZSBzaWxlbnRseSBpZiBub3QpCgkJCQlpZiAoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXVsgJ2F0dHInIF1bICdpc19jb21tZW50ZXInIF0gPT09IHRydWUgKSB7CgkJCQkJCgkJCQkJJGNsYXNzX25hbWUgPSAncGx1Z2luYnVkZHlfemJ6aXAnIC4gJG1ldGhvZF90YWc7CgkJCQkJCgkJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsKCQkJCQkkemlwcGVyLT5zZXRfc3RhdHVzX2NhbGxiYWNrKCBhcnJheSggJiR0aGlzLCAnc3RhdHVzJyApICk7CgkJCQkJCgkJCQkJLy8gV2UgbmVlZCB0byB0ZWxsIHRoZSBtZXRob2Qgd2hhdCBkZXRhaWxzIGJlbG9uZyB0byBpdAoJCQkJCSR6aXBwZXItPnNldF9tZXRob2RfZGV0YWlscyggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdICk7CgkJCQkJCQkJCQkKCQkJCQkvLyBOb3cgd2UgYXJlIHJlYWR5IHRvIHRyeSBhbmQgdGVzdCBmb3IgdGhlIGZpbGUgZXhpc3RlbmNlCgkJCQkJJHJlc3VsdCA9ICR6aXBwZXItPnNldF9jb21tZW50KCAkemlwX2ZpbGUsICRjb21tZW50ICk7CgkJCQkJCgkJCQkJLy8gV2lsbCBiZSBmYWxzZSBpZiB3ZSBjb3VsZG4ndCBzZXQgdGhlIGNvbW1lbnQKCQkJCQlpZiAoICRyZXN1bHQgPT09IHRydWUgKSB7CgkJCQkJCgkJCQkJCS8vIE11c3QgYXNzdW1lIHRoYXQgY29tbWVudCB3YXMgc2V0IG9rCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7CgkJCQkJCQoJCQkJCQkvLyBXZSBoYXZlIHRvIHJldHVybiBoZXJlIGJlY2F1c2Ugd2UgY2Fubm90IGJyZWFrIG91dCBvZiBmb3JlYWNoCgkJCQkJCXJldHVybiB0cnVlOwoJCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJLy8gVGhlIHppcHBlciBlbmNvdW50ZXJlZCBhbiBlcnJvciBzbyB3ZSBuZWVkIHRvIGRyb3AgdGhyb3VnaCBhbmQgbG9vcCByb3VuZCB0byB0cnkgYW5vdGhlcgoJCQkJCQkvLyBXZSdsbCBub3QgcHJvY2VzcyB0aGUgcmVzdWx0IGhlcmUsIGp1c3QgZHJvcCB0aHJvdWdoIHNpbGVudGx5ICh0aGUgbWV0aG9kIHdpbGwgaGF2ZSBsb2dnZWQgaXQpCQkJCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7CgkJCQkJCQoJCQkJCX0KCQkJCQoJCQkJfQoJCQkJCgkJCX0KCQkJCgkJCS8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIGNvdWxkbid0IHNldCBhIGNvbW1lbnQgYXQgYWxsIC0gZWl0aGVyIG5vIGF2YWlsYWJsZSBtZXRob2Qgb3IgYWxsIG1ldGhvZCBmYWlsZWQKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnVW5hYmxlIHRvIHNldCBjb21tZW50IGluIGZpbGUgJTEkczogTm8gY29tcGF0aWJsZSB6aXAgbWV0aG9kIGZvdW5kIG9yIGFsbCBtZXRob2RzIGZhaWxlZCAtIG5vdGUgc3RvcmVkIGludGVybmFsbHkgb25seS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUgKSApOwoKCQkJLy8gUmV0dXJuIG1lc3NhZ2UgZm9yIGRpc3BsYXkgLSBtYXliZSBzaG91bGQgcmV0dXJuIGZhbHNlIGFuZCBoYXZlIGNhbGxlciBkaXNwbGF5IGl0J3Mgb3duIG1lc3NhZ2U/CgkJCSRtZXNzYWdlID0gIlxuXG5VbmFibGUgdG8gc2V0IG5vdGUgaW4gZmlsZS5cblRoZSBub3RlIHdpbGwgb25seSBiZSBzdG9yZWQgaW50ZXJuYWxseSBpbiB5b3VyIHNldHRpbmdzIGFuZCBub3QgaW4gdGhlIHppcCBmaWxlIGl0c2VsZi4iOwoJCQlyZXR1cm4gJG1lc3NhZ2U7CgkJCQoJCX0KCQkKCQkvKglnZXRfY29tbWVudCgpCgkJICoJCgkJICoJUmV0cmlldmUgYXJjaGl2ZSBjb21tZW50LgoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkJCSR6aXBfZmlsZQkJRmlsZW5hbWUgb2YgYXJjaGl2ZSB0byByZXRyaWV2ZSBjb21tZW50IGZyb20uCgkJICoJQHBhcmFtCQlib29sCQkJCSRyYXdfY29tbWVudAlJZiB0cnVlIHRoZW4gcmF3IGNvbW1lbnQgZmllbGQgZGF0YSByZXR1cm5lZCB3aXRob3V0IHByb2Nlc3NpbmcgZGVsaW1pbmF0b3JzIG5vciBqc29uLiBEZWZhdWx0cyBmYWxzZS4KCQkgKglAcmV0dXJuCQlib29sfHN0cmluZ3xhcnJheQkJCQkJZmFsc2Ugb24gZmFpbHVyZSwgWmlwIGNvbW1lbnQgb3RoZXJ3aXNlLiBJZiBjb21tZW50IGlzIGpzb24gZW5jb2RlZCBhcnJheSByZXR1cm5zIGFycmF5LgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfY29tbWVudCggJHppcF9maWxlLCAkcmF3X2NvbW1lbnQgPSBmYWxzZSApIHsKCQkJCgkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCk7CgkJCQkJCQoJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOwoJCQkKCQkJLy8gQmV0dGVyIG1ha2Ugc3VyZSB3ZSBoYXZlIHNvbWUgYXZhaWxhYmxlIG1ldGhvZHMKCQkJaWYgKCBlbXB0eSggJHppcF9tZXRob2RzICkgKSB7CgkJCQkKCQkJCS8vIEhtbSwgd2UgZG9uJ3Qgc2VlbSB0byBoYXZlIGFueSBhdmFpbGFibGUgbWV0aG9kcywgb29wcywgYmVzdCBnbyBubyBmdXJ0aGVyCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGYWlsZWQgdG8gZ2V0IGNvbW1lbnQgZnJvbSBiYWNrdXAgZmlsZSAtIG5vIGF2YWlsYWJsZSBtZXRob2RzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQoJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCgkJCX0KCQkJCgkJCS8vIEl0ZXJhdGUgb3ZlciB0aGUgbWV0aG9kcyAtIG9uY2Ugd2Ugc3VjY2VlZCBqdXN0IHJldHVybiBkaXJlY3RseSBvdGhlcndpc2UgZHJvcCB0aHJvdWdoCgkJCWZvcmVhY2ggKCAkemlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7CgkJCQoJCQkJLy8gRmlyc3QgbWFrZSBzdXJlIHdlIGNhbiBtYW5hZ2UgY29tbWVudHMgd2l0aCB0aGlzIG1ldGhvZCAoaWdub3JlIHNpbGVudGx5IGlmIG5vdCkKCQkJCWlmICggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdWyAnYXR0cicgXVsgJ2lzX2NvbW1lbnRlcicgXSA9PT0gdHJ1ZSApIHsKCQkJCQkKCQkJCQkkY2xhc3NfbmFtZSA9ICdwbHVnaW5idWRkeV96YnppcCcgLiAkbWV0aG9kX3RhZzsKCQkJCQkKCQkJCQkkemlwcGVyID0gbmV3ICRjbGFzc19uYW1lKCAkdGhpcyApOwoJCQkJCSR6aXBwZXItPnNldF9zdGF0dXNfY2FsbGJhY2soIGFycmF5KCAmJHRoaXMsICdzdGF0dXMnICkgKTsKCQkJCQkKCQkJCQkvLyBXZSBuZWVkIHRvIHRlbGwgdGhlIG1ldGhvZCB3aGF0IGRldGFpbHMgYmVsb25nIHRvIGl0CgkJCQkJJHppcHBlci0+c2V0X21ldGhvZF9kZXRhaWxzKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF0gKTsKCQkJCQkJCQkJCQoJCQkJCS8vIE5vdyB3ZSBhcmUgcmVhZHkgdG8gdHJ5IGFuZCB0ZXN0IGZvciB0aGUgZmlsZSBleGlzdGVuY2UKCQkJCQkkcmVzdWx0ID0gJHppcHBlci0+Z2V0X2NvbW1lbnQoICR6aXBfZmlsZSApOwoJCQkJCQoJCQkJCS8vIFdpbGwgYmUgZmFsc2UgaWYgd2UgY291bGRuJ3Qgc2V0IHRoZSBjb21tZW50CgkJCQkJaWYgKCBpc19zdHJpbmcgKCAkcmVzdWx0ICkgKSB7CgkJCQkJCgkJCQkJCS8vIEZvcm1hdCBoYXMgY2hhbmdlZCBhbmQgbm8gbG9uZ2VyIGVuY29kaW5nIGFzIGh0bWxlbXRpdGllcyB3aGVuIHNldHRpbmcgY29tbWVudAoJCQkJCQkvLyBGb3Igb2xkZXIgYmFja3VwcyBtYXkgbmVlZCB0byByZW1vdmUgZW5jb2RpbmcgLSBhY3Rpb24gX3Nob3VsZF8gYmUgbnVsbCBpZiBOL0EKCQkJCQkJLy8gT25seSBzcGFubmVyIHdvdWxkIGJlIGlmIHNvbWVvbmUgaGFkIHB1dCBhbiBlbnRpdHkgaW4gdGhlaXIgY29tbWVudCBidXQgdGhhdCBpcwoJCQkJCQkvLyByZWFsbHkgYW4gb3V0c2lkZXIgYW5kIGluIGFueSBjYXNlIHRoZSBjb3JyZWN0aW9uIGlzIHNpbXBseSB0byBlZGl0IGFuZCByZXNhdmUKCQkJCQkJLy8gVE9ETzogUmVtb3ZlIHRoaXMgd2hlbiBuZXcgZm9ybWF0IGhhcyBiZWVuIGluIHVzZSBmb3Igc29tZSB0aW1lCgkJCQkJCSRyZXN1bHQgPSBodG1sX2VudGl0eV9kZWNvZGUoICRyZXN1bHQgKTsKCQkJCQkKCQkJCQkJLy8gTXVzdCBhc3N1bWUgdGhhdCBjb21tZW50IHdhcyByZXRyaWV2ZWQgb2sKCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsKCQkJCQkJCgkJCQkJCS8vIFJldHVybiByYXcgY29tbWVudCBhcy1pcyB3aXRoIG5vIHByb2Nlc3NpbmcgaWYgc3BlY2lmaWVkLgoJCQkJCQlpZiAoIHRydWUgPT09ICRyYXdfY29tbWVudCApIHsKCQkJCQkJCXJldHVybiAkcmVzdWx0OwoJCQkJCQl9CgkJCQkJCQoJCQkJCQkvLyBIYW5kbGUgZGVsaW1pbmF0aW9uLiBEZWNvZGUgJHJlc3VsdCBpZiBqc29uIGRlY29kZWQgKGFzc29jaWF0aXZlIGFycmF5IG1vZGUpLgoJCQkJCQkkc3RhcnRfZGVsaW1pbmF0b3IgPSBzdHJwb3MoICRyZXN1bHQsICdNZXRhRGF0YTonICk7CgkJCQkJCSRlbmRfZGVsaW1pbmF0b3IgPSBzdHJwb3MoICRyZXN1bHQsICdNZXRhRGF0YS1FbmQ6JyApOwoJCQkJCQlpZiAoICggZmFsc2UgIT09ICRzdGFydF9kZWxpbWluYXRvciApICYmICggZmFsc2UgIT09ICRlbmRfZGVsaW1pbmF0b3IgKSApIHsgLy8gRm91bmQgYm90aCBkZWxpbWluYXRvcnMuCgkJCQkJCQkkcmVzdWx0ID0gc3Vic3RyKCAkcmVzdWx0LCAkc3RhcnRfZGVsaW1pbmF0b3IrOSwgJGVuZF9kZWxpbWluYXRvci05ICk7CgkJCQkJCQlpZiAoIE5VTEwgPT09ICggJGRlY29kZWRfcmVzdWx0ID0ganNvbl9kZWNvZGUoICRyZXN1bHQsIHRydWUgKSApICkgeyAvLyBKc29uIGRlY29kZSBmYWlsZWQgc28gcmV0dXJuIHN0cmluZy4KCQkJCQkJCQlyZXR1cm4gJHJlc3VsdDsKCQkJCQkJCX0gZWxzZSB7IC8vIEpzb24gZGVjb2RlIHN1Y2Nlc3Mgc28gcmV0dXJuaW5nIHZhcmlhYmxlIChzaG91bGQgYmUgYW4gYXJyYXkgbW9zdCBsaWtlbHkpLgoJCQkJCQkJCXJldHVybiAkZGVjb2RlZF9yZXN1bHQ7CgkJCQkJCQl9CgkJCQkJCQkKCQkJCQkJfQoJCQkJCQkKCQkJCQkJLy8gTm8gZGVsaW1pbmF0b3JzIGZvdW5kIGlmIG1hZGUgaXQgdG8gdGhpcyBwb2ludCBzbyBhc3N1bWluZyBwbGFpbiB0ZXh0IGxlZ2FjeSBjb21tZW50IChvciBkZWxpbWluYXRvcnMgbWlzc2luZy9jb3JydXB0KS4KCQkJCQkJCgkJCQkJCS8vIFdlIGhhdmUgdG8gcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3QgYnJlYWsgb3V0IG9mIGZvcmVhY2gKCQkJCQkJcmV0dXJuICRyZXN1bHQ7CgkJCQkJCQoJCQkJCX0gZWxzZSB7CgkJCQkJCgkJCQkJCS8vIFRoZSB6aXBwZXIgZW5jb3VudGVyZWQgYW4gZXJyb3Igc28gd2UgbmVlZCB0byBkcm9wIHRocm91Z2ggYW5kIGxvb3Agcm91bmQgdG8gdHJ5IGFub3RoZXIKCQkJCQkJLy8gV2UnbGwgbm90IHByb2Nlc3MgdGhlIHJlc3VsdCBoZXJlLCBqdXN0IGRyb3AgdGhyb3VnaCBzaWxlbnRseSAodGhlIG1ldGhvZCB3aWxsIGhhdmUgbG9nZ2VkIGl0KQkJCQoJCQkJCQl1bnNldCggJHppcHBlciApOwoJCQkJCQkKCQkJCQl9CgkJCQkKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiBjb3VsZG4ndCBnZXQgYSBjb21tZW50IGF0IGFsbCAtIGVpdGhlciBubyBhdmFpbGFibGUgbWV0aG9kIG9yIGFsbCBtZXRob2QgZmFpbGVkCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1VuYWJsZSB0byBnZXQgY29tbWVudCBpbiBmaWxlICUxJHM6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZCBvciBhbGwgbWV0aG9kcyBmYWlsZWQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlICkgKTsKCgkJCXJldHVybiBmYWxzZTsKCQkJCgkJfQoJCQkJCgkJLy8gRk9SIEZVVFVSRSBVU0U7IE5PVCBZRVQgSU1QTEVNRU5URUQuIFVzZSB0byBjaGVjayAuc3FsIGZpbGUgaXMgbm9uLWVtcHR5LgoJCWZ1bmN0aW9uIGZpbGVfc3RhdHMoICR6aXBfZmlsZSwgJGxvY2F0ZV9maWxlLCAkbGVhdmVfb3BlbiA9IGZhbHNlICkgewoJCQlpZiAoIGluX2FycmF5KCAnemlwYXJjaGl2ZScsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCSR0aGlzLT5femlwID0gbmV3IFppcEFyY2hpdmU7CgkJCQlpZiAoICR0aGlzLT5femlwLT5vcGVuKCAkemlwX2ZpbGUgKSA9PT0gdHJ1ZSApIHsKCQkJCQlpZiAoICggJHN0YXRzID0gJHRoaXMtPl96aXAtPnN0YXROYW1lKCAkbG9jYXRlX2ZpbGUgKSApID09PSBmYWxzZSApIHsgLy8gRmlsZSBub3QgZm91bmQgaW4gemlwLgoJCQkJCQkkdGhpcy0+X3ppcC0+Y2xvc2UoKTsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRmlsZSBub3QgZm91bmQgKHppcGFyY2hpdmUpIGZvciBzdGF0cycsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gJGxvY2F0ZV9maWxlICk7CgkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQl9CgkJCQkJJHRoaXMtPl96aXAtPmNsb3NlKCk7CgkJCQkJcmV0dXJuICRzdGF0czsKCQkJCX0gZWxzZSB7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnWmlwQXJjaGl2ZSBmYWlsZWQgdG8gb3BlbiBmaWxlIHRvIGNoZWNrIHN0YXRzIChsb29raW5nIGluICUxJHMpLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSApICk7CgkJCQkJCgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9CgkJCQoJCQkvLyBJZiB3ZSBtYWRlIGl0IHRoaXMgZmFyIHRoZW4gemlwYXJjaGl2ZSBub3QgYXZhaWxhYmxlL2ZhaWxlZC4KCQkJaWYgKCBpbl9hcnJheSggJ3BjbHppcCcsICR0aGlzLT5femlwX21ldGhvZHMgKSApIHsKCQkJCXJlcXVpcmVfb25jZSggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApOwoJCQkJJHRoaXMtPl96aXAgPSBuZXcgUGNsWmlwKCAkemlwX2ZpbGUgKTsKCQkJCWlmICggKCAkZmlsZV9saXN0ID0gJHRoaXMtPl96aXAtPmxpc3RDb250ZW50KCkgKSA9PSAwICkgeyAvLyBJZiB6ZXJvLCB6aXAgaXMgY29ycnVwdCBvciBlbXB0eS4KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICR0aGlzLT5femlwLT5lcnJvckluZm8oIHRydWUgKSApOwoJCQkJfSBlbHNlIHsKCQkJCQlmb3JlYWNoKCAkZmlsZV9saXN0IGFzICRmaWxlICkgewoJCQkJCQlpZiAoICRmaWxlWydmaWxlbmFtZSddID09ICRsb2NhdGVfZmlsZSApIHsgLy8gRm91bmQgZmlsZS4KCQkJCQkJCXJldHVybiB0cnVlOwoJCQkJCQl9CgkJCQkJfQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0ZpbGUgbm90IGZvdW5kIChwY2x6aXApJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc6ICcgLiAkbG9jYXRlX2ZpbGUgKTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdVbmFibGUgdG8gY2hlY2sgaWYgZmlsZSBleGlzdHM6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9CgkJCQoJCS8qKgoJCSAqCXNldF9zdGF0dXNfY2FsbGJhY2soKQoJCSAqCgkJICoJU2V0cyBhIHJlZmVyZW5jZSB0byB0aGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBzdGF0dXMgdXBkYXRlLgoJCSAqICBBcmd1bWVudCBtdXN0IGF0IGxlYXN0IGJlIGEgbm9uLWVtcHR5IGFycmF5IHdpdGggMiBlbGVtZW50cwoJCSAqCgkJICoJQHBhcmFtCQlhcnJheSAJJGNhbGxiYWNrCU9iamVjdC0+bWV0aG9kIHRvIGNhbGwgZm9yIHN0YXR1cyB1cGRhdGVzLgoJCSAqCUByZXR1cm4JCW51bGwKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBzZXRfc3RhdHVzX2NhbGxiYWNrKCAkY2FsbGJhY2sgPSBhcnJheSgpICkgewoJCQoJCQlpZiAoIGlzX2FycmF5KCAkY2FsbGJhY2sgKSAmJiAhZW1wdHkoICRjYWxsYmFjayApICYmICggMiA9PSBjb3VudCggJGNhbGxiYWNrICkgKSApIHsKCQkJCgkJCQkkdGhpcy0+X3N0YXR1c19jYWxsYmFjayA9ICRjYWxsYmFjazsKCQkJCSR0aGlzLT5faGF2ZV9zdGF0dXNfY2FsbGJhY2sgPSB0cnVlOwoKCQkJfQoJCQkKCQl9CgkJCgkJLyoqCgkJICoJc3RhdHVzKCkKCQkgKgkKCQkgKglJbnZva2Ugc3RhdHVzIG1ldGhvZCBvZiBwYXJlbnQgaWYgaXQgZXhpc3RzCgkJICogIE11c3QgYmUgYXQgbGVhc3Qgb25lIHBhcmFtZXRlciBvdGhlcndpc2UgaWdub3JlIHRoZSBjYWxsCgkJICoJCgkJICoJQHBhcmFtCQlzdHJpbmcJCShFeHBlY3RlZCkgU3RhdHVzIG1lc3NhZ2UgdHlwZS4KCQkgKglAcGFyYW0JCXN0cmluZwkJKEV4cGVjdGVkKSBTdGF0dXMgbWVzc2FnZS4KCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gc3RhdHVzKCkgewoJCQoJCQlpZiAoICR0aGlzLT5faGF2ZV9zdGF0dXNfY2FsbGJhY2sgJiYgKCBmdW5jX251bV9hcmdzKCkgPiAwICkgKSB7CgoJCQkJJGFyZ3MgPSBmdW5jX2dldF9hcmdzKCk7CgkJCQljYWxsX3VzZXJfZnVuY19hcnJheSggJHRoaXMtPl9zdGF0dXNfY2FsbGJhY2ssICRhcmdzICk7CgkJCQkKCQkJfQoJCQkKCQl9CgkKCX0gLy8gRW5kIGNsYXNzCgkKCS8vJHBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5ID0gbmV3IHBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5KCAkdGhpcy0+X29wdGlvbnNbJ2JhY2t1cF9kaXJlY3RvcnknXSApOwoKfQo=
###PACKDATA,FILE_END,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php

###PACKDATA,FILE_END,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php

###PACKDATA,FILE_END,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php
###PACKDATA,FILE_START,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php
PD9waHAKLyoKRVhBTVBMRToKCnJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9jcGFuZWwvY3BhbmVsLnBocCcgKTsKIAokY3BhbmVsX3VzZXIgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3VzZXInICk7CiRjcGFuZWxfcGFzc3dvcmQgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Bhc3MnICk7CiRjcGFuZWxfaG9zdCA9ICJmb28uY29tIjsKJGRiX25hbWUgPSAnYXBwbGVzJzsKJGRiX3VzZXIgPSAnb3Jhbmdlcyc7CiRkYl9wYXNzID0gJ2JhbmFuYXMnOwokY3JlYXRlX2RiX3Jlc3VsdCA9IHBiX2JhY2t1cGJ1ZGR5X2NwYW5lbDo6Y3JlYXRlX2RiKCAkY3BhbmVsX3VzZXIsICRjcGFuZWxfcGFzc3dvcmQsICRjcGFuZWxfaG9zdCwgJGRiX25hbWUsICRkYl91c2VyLCAkZGJfcGFzcyApOwoKaWYgKCAkY3JlYXRlX2RiX3Jlc3VsdCA9PT0gdHJ1ZSApIHsKCWVjaG8gJ1N1Y2Nlc3MhIENyZWF0ZWQgZGF0YWJhc2UsIHVzZXIsIGFuZCBhc3NpZ25lZCB1c2VkIHRvIGRhdGFiYXNlLic7Cn0gZWxzZSB7CgllY2hvICdFcnJvcihzKTo8YnI+PHByZT4nIC4gcHJpbnRfciggJGNyZWF0ZV9kYl9yZXN1bHQsIHRydWUgKSAuICc8L3ByZT4nOwp9CgoqLwoKCgovKglwYl9iYWNrdXBidWRkeV9jcGFuZWwgQ2xhc3MKICoJCiAqCU1hbmFnZSBzb21lIGNwYW5lbCBzZXR0aW5ncy4KICoJCiAqCUBhdXRob3IJCUR1c3RpbiBCb2x0b24gPGh0dHA6Ly9kdXN0aW5ib2x0b24uY29tPiBTZXB0IDIwMTIuCiAqLwpjbGFzcyBwYl9iYWNrdXBidWRkeV9jcGFuZWwgewoKCgkvLyBUT0RPOiBVc2UgbW9yZSByb2J1c3QgdGhhbiBmaWxlX2dldF9jb250ZW50cygpLgoKCQoJLyoJY3JlYXRlX2RiKCkKCSAqCQoJICoJQ3JlYXRlIGEgZGF0YWJhc2UgYW5kIGFzc2lnbiBhIHVzZXIgdG8gaXQgd2l0aCBhbGwgcHJpdmlsYWdlcy4KCSAqCQoJICoJQHBhcmFtCQkKCSAqCUByZXR1cm4JCXRydWV8YXJyYXkJCUJvb2xlYW4gdHJ1ZSBvbiBzdWNjZXNzLCBlbHNlIGFuIGFycmF5IG9mIGVycm9ycy4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcmVhdGVfZGIoICRjcGFuZWxfdXNlciwgJGNwYW5lbF9wYXNzd29yZCwgJGNwYW5lbF9ob3N0LCAkZGJfbmFtZSwgJGRiX3VzZXIsICRkYl91c2VycGFzcywgJGNwYW5lbF9wb3J0ID0gJzIwODInICkgewoJCSRjcGFuZWxfc2tpbiA9ICJ4MyI7CgkJJGVycm9ycyA9IGFycmF5KCk7CgkJCgkJJGNwYW5lbF9wYXNzd29yZCA9IHVybGVuY29kZSggJGNwYW5lbF9wYXNzd29yZCApOyAvLyBQYXNzIG9mdGVuIGhhcyBzcGVjaWFsIGNoYXJzIHNvIGVuY29kZS4KCQkKCQkvLyBDYWxjdWxhdGUgYmFzZSBVUkwuCgkJJGJhc2VfdXJsID0gImh0dHA6Ly97JGNwYW5lbF91c2VyfTp7JGNwYW5lbF9wYXNzd29yZH1AeyRjcGFuZWxfaG9zdH06eyRjcGFuZWxfcG9ydH0vZnJvbnRlbmQveyRjcGFuZWxfc2tpbn0iOwoJCQoJCS8vIEdlbmVyYXRlIGNyZWF0ZSBkYXRhYmFzZSBVUkwuCgkJJGNyZWF0ZV9kYXRhYmFzZV91cmwgPSAkYmFzZV91cmwgLiAiL3NxbC9hZGRiLmh0bWw/ZGI9eyRkYl9uYW1lfSI7CgkJLy9lY2hvICRjcmVhdGVfZGF0YWJhc2VfdXJsIC4gJzxicj4nOwoJCQoJCQoJCS8vIENyZWF0ZSByZXF1ZXN0IGNvcmUgb2JqIGZvciBjb25uZWN0aW5nIHRvIEhUVFAuCgkJJHJlcXVlc3QgPSBuZXcgUmVxdWVzdENvcmUoICRjcmVhdGVfZGF0YWJhc2VfdXJsICk7CgkJdHJ5IHsKCQkJJHJlc3VsdCA9ICRyZXF1ZXN0LT5zZW5kX3JlcXVlc3QoIGZhbHNlICk7CgkJfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7CgkJCWlmICggc3RyaXN0ciggJGUtPmdldE1lc3NhZ2UoKSwgJ2NvdWxkblwndCBjb25uZWN0IHRvIGhvc3QnICkgIT09IGZhbHNlICkgewoJCQkJJGVycm9yc1tdID0gJ1VuYWJsZSB0byBjb25uZWN0IHRvIGhvc3QgYCcgLiAkY3BhbmVsX2hvc3QgLiAnYCBvbiBwb3J0IGAnIC4gJGNwYW5lbF9wb3J0IC4gJ2AuIFZlcmlmeSB0aGUgY1BhbmVsIGRvbWFpbi9VUkwgYW5kIG1ha2Ugc3VyZSB0aGUgc2VydmVyIGlzIGFibGUgdG8gaW5pdGlhdGUgb3V0Z29pbmcgaHR0cCBjb25uZWN0aW9ucyBvbiBwb3J0ICcgLiAkY3BhbmVsX3BvcnQgLiAnLiBTb21lIGhvc3RzIGJsb2NrIHRoaXMuJzsKCQkJCXJldHVybiAkZXJyb3JzOwoJCQl9CgkJCSRlcnJvcnNbXSA9ICdDYXVnaHQgZXhjZXB0aW9uOiAnIC4gJGUtPmdldE1lc3NhZ2UoKTsKCQkJcmV0dXJuICRlcnJvcnM7CgkJfQoJCQoJCQoJCS8vIEdlbmVyYXRlIGNyZWF0ZSBkYXRhYmFzZSB1c2VyIFVSTC4KCQkkY3JlYXRlX3VzZXJfdXJsID0gJGJhc2VfdXJsIC4gIi9zcWwvYWRkdXNlci5odG1sP3VzZXI9eyRkYl91c2VyfSZwYXNzPXskZGJfdXNlcnBhc3N9IjsKCQkvL2VjaG8gJGNyZWF0ZV91c2VyX3VybCAuICc8YnI+JzsKCQkKCQkvLyBHZW5lcmF0ZSBhc3NpZ24gdXNlciBkYXRhYmFzZSBhY2Nlc3MgVVJMLgoJCSRhc3NpZ25fdXNlcl91cmwgPSAkYmFzZV91cmwgLiAiL3NxbC9hZGR1c2VydG9kYi5odG1sP3VzZXI9eyRjcGFuZWxfdXNlcn1feyRkYl91c2VyfSZkYj17JGNwYW5lbF91c2VyfV97JGRiX25hbWV9JkFMTD1BTEwiOwoJCS8vZWNobyAkYXNzaWduX3VzZXJfdXJsIC4gJzxicj4nOwoJCQoJCQoJCQoJCWlmICggc3RyaXN0ciggJHJlc3VsdCwgJ0xvZyBpbicgKSAhPT0gZmFsc2UgKSB7IC8vIE5vIHN1Y2VzcyBhZGRpbmcgREIuCgkJCSRlcnJvcnNbXSA9ICdVbmFibGUgdG8gbG9nIGludG8gY1BhbmVsIHdpdGggZ2l2ZW4gdXNlcm5hbWUvcGFzc3dvcmQuIFZlcmlmeSB0aGUgY3JlZGVudGlhbHMgYXJlIGNvcnJlY3QgZm9yIHRoaXMgY1BhbmVsIGRvbWFpbi4nOwoJCX0KCQlpZiAoIHN0cmlzdHIoICRyZXN1bHQsICdBZGRlZCB0aGUgRGF0YWJhc2UnICkgPT09IGZhbHNlICkgeyAvLyBObyBzdWNlc3MgYWRkaW5nIERCLgoJCQkkZXJyb3JzW10gPSAnRXJyb3IgZW5jb3VudGVyZWQgYWRkaW5nIGRhdGFiYXNlLic7CgkJfQoJCWlmICggc3RyaXN0ciggJHJlc3VsdCwgJ3Byb2JsZW0gY3JlYXRpbmcgdGhlIGRhdGFiYXNlJyApICE9PSBmYWxzZSApIHsgLy8gU29tZXRoaW5nIGZhaWxlZC4KCQkJJGVycm9yc1tdID0gJ1VuYWJsZSB0byBjcmVhdGUgZGF0YWJhc2UuJzsKCQl9CgkJaWYgKCBzdHJpc3RyKCAkcmVzdWx0LCAnZGF0YWJhc2UgbmFtZSBhbHJlYWR5IGV4aXN0cycgKSAhPT0gZmFsc2UgKSB7IC8vIERCIGFscmVhZHkgZXhpc3RzLgoJCQkkZXJyb3JzW10gPSAnVGhlIGRhdGFiYXNlIG5hbWUgYWxyZWFkeSBleGlzdHMuJzsKCQl9CgkJCgkJCgkJLy8gUnVuIGNyZWF0ZSBkYXRhYmFzZSB1c2VyLgoJCWlmICggY291bnQoICRlcnJvcnMgKSA9PT0gMCApIHsKCQkJJHJlcXVlc3QgPSBuZXcgUmVxdWVzdENvcmUoICRjcmVhdGVfdXNlcl91cmwgKTsKCQkJdHJ5IHsKCQkJCSRyZXN1bHQgPSAkcmVxdWVzdC0+c2VuZF9yZXF1ZXN0KCBmYWxzZSApOwoJCQl9IGNhdGNoIChFeGNlcHRpb24gJGUpIHsKCQkJCSRlcnJvcnNbXSA9ICdDYXVnaHQgZXhjZXB0aW9uOiAnIC4gJGUtPmdldE1lc3NhZ2UoKTsKCQkJCXJldHVybiAkZXJyb3JzOwoJCQl9CgkJCQoJCQlpZiAoIHN0cmlzdHIoICRyZXN1bHQsICdBZGRlZCB1c2VyJyApID09PSBmYWxzZSApIHsgLy8gTm8gc3VjY2VzcyBhZGRpbmcgdXNlci4KCQkJCSRlcnJvcnNbXSA9ICdFcnJvciBlbmNvdW50ZXJlZCBhZGRpbmcgdXNlci4nOwoJCQl9CgkJCWlmICggc3RyaXN0ciggJHJlc3VsdCwgJ2V4aXN0cyBpbiB0aGUgZGF0YWJhc2UnICkgIT09IGZhbHNlICkgeyAvLyBBbHJlYWR5IGV4aXN0cy4KCQkJCSRlcnJvcnNbXSA9ICdVc2VybmFtZSBhbHJlYWR5IGV4aXN0cy4nOwoJCQl9CgkJfQoJCQoJCS8vIFJ1biBhc3NpZ24gdXNlciB0byBkYXRhYmFzZS4KCQlpZiAoIGNvdW50KCAkZXJyb3JzICkgPT09IDAgKSB7CgkJCSRyZXF1ZXN0ID0gbmV3IFJlcXVlc3RDb3JlKCAkYXNzaWduX3VzZXJfdXJsICk7CgkJCXRyeSB7CgkJCQkkcmVzdWx0ID0gJHJlcXVlc3QtPnNlbmRfcmVxdWVzdCggZmFsc2UgKTsKCQkJfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7CgkJCQkkZXJyb3JzW10gPSAnQ2F1Z2h0IGV4Y2VwdGlvbjogJyAuICRlLT5nZXRNZXNzYWdlKCk7CgkJCQlyZXR1cm4gJGVycm9yczsKCQkJfQoJCQkKCQkJaWYgKCBzdHJpc3RyKCAkcmVzdWx0LCAnd2FzIGFkZGVkIHRvIHRoZSBkYXRhYmFzZScgKSA9PT0gZmFsc2UgKSB7IC8vIE5vIHN1Y2Nlc3MgYWRkaW5nIHVzZXIuCgkJCQkkZXJyb3JzW10gPSAnRXJyb3IgZW5jb3VudGVyZWQgYXNzaWduaW5nIHVzZXIgdG8gZGF0YWJhc2UuJzsKCQkJfQoJCX0KCQkKCQlpZiAoIGNvdW50KCAkZXJyb3JzICkgPiAwICkgeyAvLyBPbmUgb3IgbW9yZSBlcnJvcnMuCgkJCXJldHVybiAkZXJyb3JzOwoJCX0gZWxzZSB7CgkJCXJldHVybiB0cnVlOyAvLyBTdWNjZXNzIQoJCX0KCQkKCX0KCn0gLy8gZW5kIGNsYXNzLg==
###PACKDATA,FILE_END,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php
###PACKDATA,FILE_START,/pluginbuddy/_getting_started.php,importbuddy/pluginbuddy/_getting_started.php
PD9waHAKCgovLyBUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBsb2FkZWQgZm9yIHRoZSBnZXR0aW5nIHN0YXJ0ZWQgcGFnZSBhcyBhIGB0ZW1wbGF0ZWAgb2Ygc29ydHMuCi8vIFRoZSBpbmRpdmlkdWFsIHBsdWdpbiBnZXR0aW5nIHN0YXJ0ZWQgcGFnZSBpcyBpbmNsdWRlZCBmcm9tIHRoaXMuCgoKLy8gU2V0IHVwIHN1cHBvcnRpbmcgc2NyaXB0cyBhbmQgc3R5bGVzLgpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdkYXNoYm9hcmQnICk7CnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnZGFzaGJvYXJkJyApOwpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdqcXVlcnktdWktdGFicycgKTsKCgovL2VjaG8gJzxkaXYgc3R5bGU9ImZsb2F0OiByaWdodDsgd2lkdGg6IDIwJTsgbWFyZ2luLXJpZ2h0OiAzMHB4OyBtYXJnaW4tbGVmdDogMTBweDsgbWFyZ2luLXRvcDogNjBweDsiPjxicj48YnI+JzsKZWNobyAnPHRhYmxlIHdpZHRoPSIxMDAlIj48dHI+PHRkIHZhbGlnbj0idG9wIiBzdHlsZT0id2lkdGg6IDgwJTsiPic7CgoKaWYgKCBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdzZXJpZXMnICkgIT0gJycgKSB7IC8vIFNFUklFUwoJcGJfYmFja3VwYnVkZHk6OiR1aS0+dGl0bGUoICdHZXR0aW5nIFN0YXJ0ZWQgd2l0aCAnIC4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnc2VyaWVzJyApICk7Cgk/PgoJPGRpdiBpZD0icGx1Z2luYnVkZHktdGFicyIgc3R5bGU9IndpZHRoOiA3MCU7Ij4KCQk8dWw+CgkJCTw/cGhwCgkJCWdsb2JhbCAkcGx1Z2luYnVkZHlfc2VyaWVzOwoJCQkKCQkJJGkgPSAwOwoJCQlmb3JlYWNoKCAkcGx1Z2luYnVkZHlfc2VyaWVzWyBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdzZXJpZXMnICkgXSBhcyAkc2x1ZyA9PiAkZGF0YSApIHsKCQkJCSRpKys7CgkJCQllY2hvICc8bGkgdHlwZT0iZGlzYyI+PGEgaHJlZj0iI3BsdWdpbmJ1ZGR5LXRhYnMtJyAuICRpIC4gJyI+PHNwYW4+JyAuICRkYXRhWyduYW1lJ10gLiAnPC9zcGFuPjwvYT48L2xpPic7CgkJCX0KCQkJPz4KCQk8L3VsPgoJCTxkaXYgY2xhc3M9InRhYnMtYm9yZGVyd3JhcCI+CgkJCTw/cGhwCgkJCSRpID0gMDsKCQkJZm9yZWFjaCggJHBsdWdpbmJ1ZGR5X3Nlcmllc1sgcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnc2VyaWVzJyApIF0gYXMgJHNsdWcgPT4gJGRhdGEgKSB7CgkJCQkkaSsrOwoJCQkJZWNobyAnPGRpdiBpZD0icGx1Z2luYnVkZHktdGFicy0nIC4gJGkgLiAnIj4nOwoJCQkJCgkJCQlpZiAoIGZpbGVfZXhpc3RzKCAkZGF0YVsncGF0aCddIC4gJy92aWV3cy9nZXR0aW5nX3N0YXJ0ZWQucGhwJyApICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3ZpZXcoICdnZXR0aW5nX3N0YXJ0ZWQnICk7CgkJCQl9IGVsc2UgewoJCQkJCWVjaG8gJ3t2aWV3cy9nZXR0aW5nX3N0YXJ0ZWQucGhwIG5vdCBmb3VuZC59JzsKCQkJCX0KCQkJCQoJCQkJZWNobyAnPC9kaXY+JzsKCQkJCQoJCQkJcGx1Z2luX2luZm9ybWF0aW9uKCAkc2x1ZywgJGRhdGEgKTsKCQkJfQoJCQk/PgoJCTwvZGl2PgoJPC9kaXY+Cgk8P3BocAp9IGVsc2UgeyAvLyBTVEFOREFMT05FCglwYl9iYWNrdXBidWRkeTo6JHVpLT50aXRsZSggJ0dldHRpbmcgU3RhcnRlZCB3aXRoICcgLiBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICduYW1lJyApIC4gJyB2JyAuIHBiX2JhY2t1cGJ1ZGR5OjpzZXR0aW5ncyggJ3ZlcnNpb24nICkgKTsKCQoJaWYgKCBmaWxlX2V4aXN0cyggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL3ZpZXdzL2dldHRpbmdfc3RhcnRlZC5waHAnICkgKSB7CgkJcGJfYmFja3VwYnVkZHk6OmxvYWRfdmlldyggJ2dldHRpbmdfc3RhcnRlZCcsIGFycmF5KCAncGx1Z2luX3NsdWcnID0+IHBiX2JhY2t1cGJ1ZGR5OjpzZXR0aW5ncyggJ3NsdWcnICkgKSApOwoJfSBlbHNlIHsKCQllY2hvICd7dmlld3MvZ2V0dGluZ19zdGFydGVkLnBocCBub3QgZm91bmQufSc7Cgl9CgkKCS8vcGx1Z2luX2luZm9ybWF0aW9uKCBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdzbHVnJyApLCBhcnJheSggJ25hbWUnID0+IHBiX2JhY2t1cGJ1ZGR5OjpzZXR0aW5ncyggJ25hbWUnICksICdwYXRoJyA9PiBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSApICk7Cn0KCgoKZWNobyAnPC90ZD48dGQ+Jm5ic3A7Jm5ic3A7PC90ZD48dGQgdmFsaWduPSJ0b3AiIHN0eWxlPSJwYWRkaW5nLXRvcDogNDBweDsiPic7CgoKCnBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X21ldGFib3goICdUdXRvcmlhbHMgJiBTdXBwb3J0JywgdHJ1ZSwgdHJ1ZSApOwo/PgotIDxhIGhyZWY9Imh0dHA6Ly9pdGhlbWVzLmNvbS9wdWJsaXNoaW5nL2dldHRpbmctc3RhcnRlZC13aXRoLWJhY2t1cGJ1ZGR5LyIgdGFyZ2V0PSJfbmV3IiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiBub25lOyI+R2V0dGluZyBTdGFydGVkIGVCb29rPC9hPjxicj4KLSA8YSBocmVmPSJodHRwOi8vaXRoZW1lcy5jb20vYmFja3VwYnVkZHktdHJhaW5pbmcvIiB0YXJnZXQ9Il9uZXciIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246IG5vbmU7Ij5UdXRvcmlhbCAmIFdhbGt0aHJvdWdoIFZpZGVvczwvYT48YnI+Ci0gPGEgaHJlZj0iaHR0cDovL2l0aGVtZXMudHYvY2F0ZWdvcnkvYmFja3VwYnVkZHkvIiB0YXJnZXQ9Il9uZXciIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246IG5vbmU7Ij5HZXR0aW5nIFN0YXJ0ZWQgVmlkZW9zPC9hPjxicj4KLSA8YSBocmVmPSJodHRwOi8vaXRoZW1lcy5jb20vY29kZXgvIiB0YXJnZXQ9Il9uZXciIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246IG5vbmU7Ij5Lbm93bGVkZ2UgQmFzZSBDb2RleDwvYT48YnI+Ci0gPGEgaHJlZj0iaHR0cDovL2l0aGVtZXMuY29tL3N1cHBvcnQvIiB0YXJnZXQ9Il9uZXciIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246IG5vbmU7Ij5TdXBwb3J0IEZvcnVtPC9hPgo8P3BocApwYl9iYWNrdXBidWRkeTo6JHVpLT5lbmRfbWV0YWJveCgpOwoKcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfbWV0YWJveCggJ2lUaGVtZXMnLCB0cnVlLCB0cnVlICk7CgplY2hvICc8cCBzdHlsZT0iZm9udC13ZWlnaHQ6IGJvbGQ7IGxlZnQ6IC0xMHB4OyI+PGEgaHJlZj0iaHR0cDovL2l0aGVtZXMuY29tLyIgc3R5bGU9InRleHQtZGVjb3JhdGlvbjogbm9uZTsiPjxpbWcgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL3BsdWdpbmJ1ZGR5LnBuZyIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtM3B4OyI+IFRoaW5ncyB0byBkbyAuIC4gLjwvYT48L3A+JzsKZWNobyAnPG9sIGNsYXNzPSJwbHVnaW5idWRkeS1ub2RlY29yIiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDEwcHg7Ij4nOwplY2hvICcJPGxpIHN0eWxlPSJsaXN0LXN0eWxlLXR5cGU6IG5vbmU7Ij48YSBocmVmPSJodHRwOi8vdHdpdHRlci5jb20vaG9tZT9zdGF0dXM9JyAuIHVybGVuY29kZSgnQ2hlY2sgb3V0IHRoaXMgYXdlc29tZSBwbHVnaW4sICcgLiBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICduYW1lJyApIC4gJyEgaHR0cDovL2dldGJhY2t1cGJ1ZGR5LmNvbSBAYmFja3VwX2J1ZGR5JykgLiAnIiB0aXRsZT0iU2hhcmUgb24gVHdpdHRlciIgb25DbGljaz0id2luZG93Lm9wZW4oalF1ZXJ5KHRoaXMpLmF0dHIoXCdocmVmXCcpLFwnaXRoZW1lc19wb3B1cFwnLFwndG9vbGJhcj0wLHN0YXR1cz0wLHdpZHRoPTgyMCxoZWlnaHQ9NTAwLHNjcm9sbGJhcnM9MVwnKTsgcmV0dXJuIGZhbHNlOyI+VHdlZXQgYWJvdXQgdGhpcyBwbHVnaW48L2E+PC9saT4nOwplY2hvICcJPGxpIHN0eWxlPSJsaXN0LXN0eWxlLXR5cGU6IG5vbmU7Ij48YSBocmVmPSJodHRwOi8vaXRoZW1lcy5jb20vZmluZC9wbHVnaW5zLyIgdGFyZ2V0PSJfbmV3Ij5QbHVnaW5zIGJ5IGlUaGVtZXM8L2E+PC9saT4nOwplY2hvICcJPGxpIHN0eWxlPSJsaXN0LXN0eWxlLXR5cGU6IG5vbmU7Ij48YSBocmVmPSJodHRwOi8vaXRoZW1lcy5jb20vZmluZC90aGVtZXMvIiB0YXJnZXQ9Il9uZXciPlRoZW1lcyBieSBpVGhlbWVzPC9hPjwvbGk+JzsKZWNobyAnCTxsaSBzdHlsZT0ibGlzdC1zdHlsZS10eXBlOiBub25lOyI+PGEgaHJlZj0iaHR0cDovL3BsdWdpbmJ1ZGR5LmNvbS9zdWJzY3JpYmUvIiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiBub25lOyI+U3Vic2NyaWJlIHRvIEVtYWlsIE5ld3NsZXR0ZXI8L2E+PC9saT4nOwplY2hvICc8L29sPic7CgplY2hvICc8cCBzdHlsZT0iZm9udC13ZWlnaHQ6IGJvbGQ7IGxlZnQ6IC0xMHB4OyI+PGEgaHJlZj0iaHR0cDovL3R3aXR0ZXIuY29tL2l0aGVtZXMvIiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiBub25lOyI+PGltZyBzcmM9IicgLiBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpIC4gJy9wbHVnaW5idWRkeS9pbWFnZXMvcGx1Z2luYnVkZHkucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246IC0zcHg7Ij4gaVRoZW1lcy5jb20gTmV3czwvYT48L3A+JzsKZWNobyBwYl9iYWNrdXBidWRkeTo6JHVpLT5nZXRfZmVlZCggJ2h0dHA6Ly9pdGhlbWVzLmNvbS9mZWVkLycsIDUgKTsKCnBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF9tZXRhYm94KCk7CgoKCmVjaG8gJzwvdGQ+PC90cj48L3RhYmxlPic7CgoKZnVuY3Rpb24gcGx1Z2luX2luZm9ybWF0aW9uKCAkcGx1Z2luX3NsdWcsICRkYXRhICkgewoJJHBsdWdpbl9wYXRoID0gJGRhdGFbJ3BhdGgnXTsKCT8+CgkKCTw/cGhwIHBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X21ldGFib3goICdWZXJzaW9uIEhpc3RvcnknLCB0cnVlLCAnd2lkdGg6IDEwMCU7JyApOyA/PgoJCTx0ZXh0YXJlYSByZWFkb25seT0icmVhZG9ubHkiIHJvd3M9IjciIGNvbHM9IjY1IiB3cmFwPSJvZmYiIHN0eWxlPSJ3aWR0aDogMTAwJTsiPjw/cGhwCgkJCS8vZWNobyAiVmVyc2lvbiBIaXN0b3J5OlxuXG4iOwoJCQlyZWFkZmlsZSggJHBsdWdpbl9wYXRoIC4gJy9oaXN0b3J5LnR4dCcgKTsKCQk/PjwvdGV4dGFyZWE+CgkJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJCQlqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJCQkJalF1ZXJ5KCIjcGx1Z2luYnVkZHlfPD9waHAgZWNobyAkcGx1Z2luX3NsdWc7ID8+X2RlYnVndG9nZ2xlIikuY2xpY2soZnVuY3Rpb24oKSB7CgkJCQkJalF1ZXJ5KCIjcGx1Z2luYnVkZHlfPD9waHAgZWNobyAkcGx1Z2luX3NsdWc7ID8+X2RlYnVndG9nZ2xlX2RpdiIpLnNsaWRlVG9nZ2xlKCk7CgkJCQl9KTsKCQkJfSk7CgkJPC9zY3JpcHQ+CgkJPD9waHAKCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Jlc2V0X2RlZmF1bHRzJyApID09ICRwbHVnaW5fc2x1ZyApIHsKCQkJaWYgKCBjYWxsX3VzZXJfZnVuYyggICdwYl8nIC4gJHBsdWdpbl9zbHVnIC4gJzo6cmVzZXRfb3B0aW9ucycsIHRydWUgKSA9PT0gdHJ1ZSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ1BsdWdpbiBzZXR0aW5ncyBoYXZlIGJlZW4gcmVzZXQgdG8gZGVmYXVsdHMgZm9yIHBsdWdpbiBgJyAuICRkYXRhWyduYW1lJ10gLiAnYC4nICk7CgkJCX0gZWxzZSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdVbmFibGUgdG8gcmVzZXQgcGx1Z2luIHNldHRpbmdzLiBWZXJpZnkgeW91IGFyZSBydW5uaW5nIHRoZSBsYXRlc3QgdmVyc2lvbi4nICk7CgkJCX0KCQl9CgkJPz4KCTw/cGhwIHBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF9tZXRhYm94KCk7ID8+CgkKCTw/cGhwCn0=
###PACKDATA,FILE_END,/pluginbuddy/_getting_started.php,importbuddy/pluginbuddy/_getting_started.php
###PACKDATA,FILE_START,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php

###PACKDATA,FILE_END,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php
###PACKDATA,FILE_START,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
MS4wLjAgLSAyMDExLTEyLTEzIC0gRHVzdGluIEJvbHRvbgoJSW5pdGlhbCBwdXNoLgoxLjAuMSAtIDIwMTEtMTItMTMgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBVSSB0aXRsZSgpIG5vdCBzaG93aW5nIGltYWdlLgoJRml4ZWQgbm9uLXNlcmllcyBHZXR0aW5nIFN0YXJ0ZWQgcGFnZSB1bmRlZmluZWQgaW5kZXguCglwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoKSByZXR1cm5zIGJsYW5rIGZvciBzZXJpZXMgdGFnIGlmIG5vdCBmb3VuZC4KMS4wLjIgLSAyMDExLTAyLTEyIC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgdXBkYXRlci4KMS4wLjMgLSAyMDEyLTAxLTA0IC0gRHVzdGluIEJvbHRvbgoJRml4ZWQgdmFyaW91cyB3aWRnZXQgdGhpbmdzLgoJVXNpbmcgVUkgZWxlbWVudHMgb24gcGFnZXMgdGhhdCBhcmVuJ3Qgb3VyIG93bi4KMS4wLjQgLSAyMDEyLTAxLTA1IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgb3B0aW9uYWwgYWJpbGl0eSB0byBzcGVjaWZpYyB0aGUgZmlyc3QgcGFyYW1ldGVyICgkdGFnKSBmb3IgYWRkX3Nob3J0Y3V0LCBhZGRfZmlsdGVyLCBhZGRfYWN0aW9uLCBldGMgdGhhdCBhbGxvd3MgcGFzc2luZyBhIGN1c3RvbSBtZXRob2QgY2FsbGJhY2sgbmFtZSB0aGF0IGRpZmZlcnMgZnJvbSB0aGUgdGFnLiBTb21lIGFjdGlvbnMgaGF2ZSBjaGFyYWN0ZXJzIGRpc2FsbG93ZWQgaW4gUEhQIG1ldGhvZCBuYW1lcyBzbyB0aGV5IG5lZWQgdG8gZGlmZmVyLgoxLjAuNSAtIDIwMTItMDEtMDUgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBmb3JtIHZhbGlkYXRpb24gZm9yIGVtcHR5IGZvcm0gZWxlbWVudHMuCglGaXhlZCBtaXNzaW5nIHRvb2x0aXBzIGluIHNldHRpbmdzIGZvcm1zLgoxLjAuNiAtIDIwMTItMDEtMDUgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBiZXR0ZXIgZXJyb3IgcmVwb3J0aW5nIG9uIGZvcm0gdmFsaWRhdGlvbiBmYWlsdXJlLgoJTm93IGFsbG93aW5nIHBhcnRpYWwgZm9ybSBzYXZpbmcgb24gdmFsaWR0aW9uIGZhaWx1cmUuCglBZGRlZCByZWQgYm9yZGVyIGFyb3VuZCBmb3JtIGl0ZW1zIHRoYXQgZmFpbCB2YWxpZGF0aW9uIGZvciBlYXNpZXIgcmVjb2duaXRpb24uCjEuMC43IC0gMjAxMi0wMS0wNiAtIER1c3RpbiBCb2x0b24KCUZvcm0gdmFsaWRhdGlvbiBmdW5jdGlvbiBudW1iZXIgcnVsZSB3YXMgaW5wcm9wZXJseSBuYW1lZCBudW0uCjEuMC44IC0gMjAxMi0wMS0xMyAtIER1c3RpbiBCb2x0b24KCUFkZGVkIGVycm9yIG1lc3NhZ2UgaWYgdXBkYXRlciBzZXR0aW5ncyBwYXJhbWV0ZXIgbWlzc2luZy4KCUZpeGVkIHZlcnNpb24gbnVtYmVyLgoxLjAuOSAtIDIwMTItMDEtMTMgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBwbHVnaW5idWRkeV9zZXR0aW5ncyBmb3JtIHNldHRpbmcgZm9ybSBuYW1lIHN0YXRpY2FsbHkuCglDdXN0b20gcHJvY2Vzc2luZyBhZGRlZCBpbnRvIHBsdWdpbmJ1ZGR5X3NldHRpbmdzIGNsYXNzIHZpYSBwcm9jZXNzKCk7IGp1c3Qgc2V0IHNhdmVwb2ludCBpbiBjb25zdHJ1Y3RvciB0byBmYWxzZSB0byBhY3RpdmF0ZSB0aGlzIG1vZGUuCjEuMC4xMSAtIDIwMTItMDEtMTggLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBpbml0aWFsIHN0YXJ0aW5ncyBmb3IgbmV3IG1lZGlhIGxpYnJhcnkgc3lzdGVtLgoJVHdlYWtlZCBkb3duc2l6ZXIgbG9hZGVyIHN5c3RlbS4KCVJlbmFtZWQgcGx1Z2luYnVkZHkgY2xhc3MgdG8gcGIgY2xhc3MuIEFsbCByZWZlcmVuY2VzIHRvIHBiX2JhY2t1cGJ1ZGR5Ojogc2hvdWxkIGNoYW5nZSB0byBwYl9iYWNrdXBidWRkeTo6CjEuMC4xMiAtIDIwMTItMDEtMTggLSBEdXN0aW4gQm9sdG9uCQoJX2luaXRfY29yZV9jb250cm9sbGVyKCkgY2xlYW51cC4KMS4wLjEzIC0gMjAxMi0wMS0xOSAtIER1c3RpbiBCb2x0b24JCglGaXhlZCBsYWNrIG9mIHJldHVybiBpbiBwYl9iYWNrdXBidWRkeTo6dGlwKCkgYW5kIHBiX2JhY2t1cGJ1ZGR5Ojp2aWRlbygpLgoxLjAuMTQgLSAyMDEyLTAxLTE5IC0gRHVzdGluIEJvbHRvbgoJTW92ZWQgYWxsIGZyYW1ld29yay1yZXF1aXJlZCBKUyBhbmQgQ1NTIGludG8gcGx1Z2luYnVkZHkgZGlyZWN0b3J5LgoxLjAuMTUgLSAyMDEyLTAxLTI1IC0gRHVzdGluIEJvbHRvbgoJRml4ZWQgY29yZSBjb250cm9sbGVyIGZvciBkYXNoYm9hcmQgd2lkZ2V0IGJlaW5nIGFibGUgdG8gYWNjZXNzIHByaXZhdGUgc3RhdGljIHZhci4KCUFkZGVkIHBiX2JhY2t1cGJ1ZGR5OjphbnRpX2RpcmVjdG9yeV9icm93c2luZygpLgoJQWRkZWQgcGJfYmFja3VwYnVkZHk6Om1rZGlyKCkuCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCkuCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6Z2V0X3N0YXR1cygpLgoJQWRkZWQgcGJfYmFja3VwYnVkZHk6OmRlYnVnKCkuCjEuMC4xNiAtIDIwMTItMDEtMjYgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0gY2xhc3MgY29udHJvbGxlciBmb3IgaW50ZXJmYWNpbmcgd2l0aCBmaWxlIHN5c3RlbS4KCUFkZGVkIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0IGNsYXNzIGNvbnRyb2xsZXIgZm9yIGZvcm1hdHRpbmcgZGF0YSAvIHRleHQgaW4gaHVtYW4gcmVhZGFibGUgZm9ybWF0cy4KCWRvd25zaXplciwgdXBkYXRlciwgZmlsZXN5c3RlbSwgYW5kIGZvcm1hdCAnbW9kdWxlcycgbm93IGNvbnRyb2xsZWQgdmlhIG1vZHVsZXMga2V5IGluIHRoZSAkc2V0dGluZ3MgYXJyYXkuICBTZWUgbmV3IGluaXQucGhwLgoxLjAuMTkgLSAyMDEyLTAxLTMxIC0gRHVzdGluIEJvbHRvbgoJRm9ybSBmaXguCglTZXR0aW5ncyBmaXguCglBZGRlZCBDU1Mgb3B0aW9ucyBmb3IgZ3JvdXAgbGlzdCBpbiBVSSBjbGFzcy4KCUFkZGVkIHRpdGxlIHR5cGUgZm9yIGZvcm0vc2V0dGluZ3MgY2xhc3Nlcy4KCVVwZGF0ZWQgYWRtaW4uY3NzIGZvciB0aXRsZSBzZXR0aW5ncyBmb3JtIHR5cGUuCjEuMC4yMCAtIDIwMTItMDEtMDEgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBlcnJvciBjb2RlIGxvb2t1cCBmdW5jdGlvbiB0byBmaWxlc3lzdGVtIGNsYXNzLiBGb3IgZXhpdCBjb2RlcyBmcm9tIGV4ZWMoKSBhbmQgc3VjaC4KCUZpeGVkIHN0YXR1cygpIGJ1Z3Mgd2l0aCBuZXdsaW5lcywgYXJyYXlzIChjaGFuZ2VkIGRlbGltaXRlcikuCjEuMC4yMSAtIDIwMTItMDEtMDEgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCB3eXNpd3lnIG9iamVjdCB5b3UgZm9ybSAmIHNldHRpbmdzIHN5c3RlbS4KCVRvdWNodXAgdG8gZmlsZXN5c3RlbSBjbGFzcy4KCUFkZGVkIGhpZGRlbiBmb3JtIG9iamVjdC4KCVNldHRpbmcgdGhlIHRpdGxlIG9mIGFueSBmb3JtL3NldHRpbmdzIG9iamVjdCB0byAnJyB3aWxsIGhpZGUgaXRzIGxlZnQgY29sdW1uIChjb2xsYXBzZXMgbGVmdCkuCglBZGRlZCB0aXRsZSBmb3JtIG9iamVjdCB0eXBlIGZvciBmb3JtYXR0aW5nLgoxLjAuMjIgLSAyMDEyLTAxLTAzIC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgcGI6OiRzdGFydF90aW1lIHRvIHVzZSB0byBjb21wYXJlIHBhc3NhZ2Ugb2YgdGltZS4KMS4wLjIzIC0gMjAxMi0wMi0wOCAtIER1c3RpbiBCb2x0b24KCVVwZGF0ZWQgdXBkYXRlci4KMS4wLjI0IC0gMjAxMi0wMi0wOCAtIER1c3RpbiBCb2x0b24KCUZpeGVkIGNoZWNrYm94ICJZRVMhIiBkZWJ1ZyBvdXRwdXQuCglGaXhlZCByYWRpbyBpbnB1dCBkZWZhdWx0IGNoZWNrZWQgc2VsZWN0aW9uIG5vdCBiZWluZyBhcHBsaWVkLgoxLjAuMjUgLSAyMDEyLTAyLTA5IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgb3JpZW50YXRpb24gb3B0aW9uIHRvIHJhZGlvIGJ1dHRvbnMuICBQb3NzaWJsZSB2YWxzOiBob3Jpem9udGFsLCB2ZXJ0aWNhbAoxLjAuMjYgLSAyMDEyLTAyLTA5IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgdGFiYmVkIGludGVyZmFjZXMgaW50byAkdWkgY2xhc3MuCjEuMC4yNyAtIDIwMTItMDItMTAgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBHZXR0aW5nIFN0YXJ0ZWQgcGFnZSB3aXRoIG9sZGVyIHNlcmllcyBjb25mbGljdGluZy4KMS4wLjI4IC0gMjAxMi0wMi0xNyAtIER1c3RpbiBCb2x0b24KCXN0cnN0cigpIHVzZWQgM3JkIHBhcmFtIHdoaWNoIHJlcXVpcmVkIFBIUCA+PSA1LjMgaW4gZm9ybTo6dGVzdF9ydWxlKCkuCglDbGVhbmVkIHVwIGluaXQucGhwIGEgYml0LgoJQ29sb3IgcGlja2VyOiBBZGRlZCBjb2xvciB0eXBlIHRvIGZvcm0vc2V0dGluZ3MuCgkKCUFkZGVkIHNldHRpbmdzIGNsYXNzIG1ldGhvZDogc2V0X3ZhbHVlKCkgdG8gb3ZlcndyaXRlIHZhbHVlcy4=
###PACKDATA,FILE_END,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
###PACKDATA,FILE_START,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
###PACKDATA,FILE_START,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php
PD9waHAKJHBiX3N0eWxlcyA9IGFycmF5KCk7CiRwYl9zY3JpcHRzID0gYXJyYXkoKTsKJHBiX2FjdGlvbnMgPSBhcnJheSgpOwokd3Bfc2NyaXB0cyA9IGFycmF5KCk7CgovLyBOT1RFOiBNb2RpZmllZCBmcm9tIFdQIHRvIHJ0cmltIG9uIGRpcm5hbWUoKSBkdWUgdG8gV2luZG93cyBpc3N1ZXMuCmZ1bmN0aW9uIHNpdGVfdXJsKCkgewoJJHBhZ2VVUkwgPSAnaHR0cCc7CglpZiAoIGlzc2V0KCAkX1NFUlZFUlsiSFRUUFMiXSApICYmICggJF9TRVJWRVJbIkhUVFBTIl0gPT0gIm9uIiApICkgeyRwYWdlVVJMIC49ICJzIjt9CgkkcGFnZVVSTCAuPSAiOi8vIjsKCWlmICgkX1NFUlZFUlsiU0VSVkVSX1BPUlQiXSAhPSAiODAiKSB7CgkJJHBhZ2VVUkwgLj0gJF9TRVJWRVJbIlNFUlZFUl9OQU1FIl0uIjoiLiRfU0VSVkVSWyJTRVJWRVJfUE9SVCJdIC4gcnRyaW0oIGRpcm5hbWUoJF9TRVJWRVJbJ1BIUF9TRUxGJ10pLCAnL1xcJyApOwoJfSBlbHNlIHsKCQkkcGFnZVVSTCAuPSAkX1NFUlZFUlsiU0VSVkVSX05BTUUiXSAuIHJ0cmltKCBkaXJuYW1lKCRfU0VSVkVSWydQSFBfU0VMRiddKSwgJy9cXCcgKTsKCX0KCQoJcmV0dXJuICRwYWdlVVJMOwp9CgovKioKICogTmF2aWdhdGVzIHRocm91Z2ggYW4gYXJyYXkgYW5kIHJlbW92ZXMgc2xhc2hlcyBmcm9tIHRoZSB2YWx1ZXMuCiAqCiAqIElmIGFuIGFycmF5IGlzIHBhc3NlZCwgdGhlIGFycmF5X21hcCgpIGZ1bmN0aW9uIGNhdXNlcyBhIGNhbGxiYWNrIHRvIHBhc3MgdGhlCiAqIHZhbHVlIGJhY2sgdG8gdGhlIGZ1bmN0aW9uLiBUaGUgc2xhc2hlcyBmcm9tIHRoaXMgdmFsdWUgd2lsbCByZW1vdmVkLgogKgogKiBAc2luY2UgMi4wLjAKICoKICogQHBhcmFtIGFycmF5fHN0cmluZyAkdmFsdWUgVGhlIGFycmF5IG9yIHN0cmluZyB0byBiZSBzdHJpcHBlZC4KICogQHJldHVybiBhcnJheXxzdHJpbmcgU3RyaXBwZWQgYXJyYXkgKG9yIHN0cmluZyBpbiB0aGUgY2FsbGJhY2spLgogKi8KZnVuY3Rpb24gc3RyaXBzbGFzaGVzX2RlZXAoJHZhbHVlKSB7CglpZiAoIGlzX2FycmF5KCR2YWx1ZSkgKSB7CgkJJHZhbHVlID0gYXJyYXlfbWFwKCdzdHJpcHNsYXNoZXNfZGVlcCcsICR2YWx1ZSk7Cgl9IGVsc2VpZiAoIGlzX29iamVjdCgkdmFsdWUpICkgewoJCSR2YXJzID0gZ2V0X29iamVjdF92YXJzKCAkdmFsdWUgKTsKCQlmb3JlYWNoICgkdmFycyBhcyAka2V5PT4kZGF0YSkgewoJCQkkdmFsdWUtPnska2V5fSA9IHN0cmlwc2xhc2hlc19kZWVwKCAkZGF0YSApOwoJCX0KCX0gZWxzZSB7CgkJJHZhbHVlID0gc3RyaXBzbGFzaGVzKCR2YWx1ZSk7Cgl9CgoJcmV0dXJuICR2YWx1ZTsKfQoKCi8qKgogKiBDaGVjayB2YWx1ZSB0byBmaW5kIGlmIGl0IHdhcyBzZXJpYWxpemVkLgogKgogKiBJZiAkZGF0YSBpcyBub3QgYW4gc3RyaW5nLCB0aGVuIHJldHVybmVkIHZhbHVlIHdpbGwgYWx3YXlzIGJlIGZhbHNlLgogKiBTZXJpYWxpemVkIGRhdGEgaXMgYWx3YXlzIGEgc3RyaW5nLgogKiBDb3VydGVzeSBXb3JkUHJlc3M7IHNpbmNlIFdvcmRQcmVzcyAyLjAuNS4KICoKICogQHBhcmFtIG1peGVkICRkYXRhIFZhbHVlIHRvIGNoZWNrIHRvIHNlZSBpZiB3YXMgc2VyaWFsaXplZC4KICogQHJldHVybiBib29sIEZhbHNlIGlmIG5vdCBzZXJpYWxpemVkIGFuZCB0cnVlIGlmIGl0IHdhcy4KICovCmZ1bmN0aW9uIGlzX3NlcmlhbGl6ZWQoICRkYXRhICkgewoJLy8gaWYgaXQgaXNuJ3QgYSBzdHJpbmcsIGl0IGlzbid0IHNlcmlhbGl6ZWQKCWlmICggISBpc19zdHJpbmcoICRkYXRhICkgKQoJCXJldHVybiBmYWxzZTsKCSRkYXRhID0gdHJpbSggJGRhdGEgKTsKIAlpZiAoICdOOycgPT0gJGRhdGEgKQoJCXJldHVybiB0cnVlOwoJJGxlbmd0aCA9IHN0cmxlbiggJGRhdGEgKTsKCWlmICggJGxlbmd0aCA8IDQgKQoJCXJldHVybiBmYWxzZTsKCWlmICggJzonICE9PSAkZGF0YVsxXSApCgkJcmV0dXJuIGZhbHNlOwoJJGxhc3RjID0gJGRhdGFbJGxlbmd0aC0xXTsKCWlmICggJzsnICE9PSAkbGFzdGMgJiYgJ30nICE9PSAkbGFzdGMgKQoJCXJldHVybiBmYWxzZTsKCSR0b2tlbiA9ICRkYXRhWzBdOwoJc3dpdGNoICggJHRva2VuICkgewoJCWNhc2UgJ3MnIDoKCQkJaWYgKCAnIicgIT09ICRkYXRhWyRsZW5ndGgtMl0gKQoJCQkJcmV0dXJuIGZhbHNlOwoJCWNhc2UgJ2EnIDoKCQljYXNlICdPJyA6CgkJCXJldHVybiAoYm9vbCkgcHJlZ19tYXRjaCggIi9eeyR0b2tlbn06WzAtOV0rOi9zIiwgJGRhdGEgKTsKCQljYXNlICdiJyA6CgkJY2FzZSAnaScgOgoJCWNhc2UgJ2QnIDoKCQkJcmV0dXJuIChib29sKSBwcmVnX21hdGNoKCAiL157JHRva2VufTpbMC05LkUtXSs7XCQvIiwgJGRhdGEgKTsKCX0KCXJldHVybiBmYWxzZTsKfSAvLyBFbmQgaXNfc2VyaWFsaXplZCgpLgoKZnVuY3Rpb24gX18oICR0ZXh0LCAkZG9tYWluID0gJycgKSB7CglyZXR1cm4gJHRleHQ7Cn0KZnVuY3Rpb24gX2UoICR0ZXh0LCAkZG9tYWluID0gJycgKSB7CgllY2hvICR0ZXh0Owp9CgpmdW5jdGlvbiB3cF9zdHlsZV9pcyggJG5hbWUgKSB7CglnbG9iYWwgJHBiX3N0eWxlczsKCXJldHVybiBhcnJheV9rZXlfZXhpc3RzKCAkbmFtZSwgJHBiX3N0eWxlcyApOwp9CmZ1bmN0aW9uIHdwX2VucXVldWVfc3R5bGUoICRuYW1lLCAkZmlsZSwgJGRlcHMgPSBhcnJheSgpLCAkdmVyID0gJycgKSB7CglnbG9iYWwgJHBiX3N0eWxlczsKCSRwYl9zdHlsZXNbJG5hbWVdWydmaWxlJ10gPSAkZmlsZTsKCSRwYl9zdHlsZXNbJG5hbWVdWyd2ZXJzaW9uJ10gPSAkdmVyOwoJJHBiX3N0eWxlc1skbmFtZV1bJ3ByaW50ZWQnXSA9IGZhbHNlOwp9CmZ1bmN0aW9uIHdwX3ByaW50X3N0eWxlcyggJG5hbWUgKSB7CglnbG9iYWwgJHBiX3N0eWxlczsKCWlmICggJHBiX3N0eWxlc1skbmFtZV1bJ3ByaW50ZWQnXSA9PT0gZmFsc2UgKSB7CgkJJHBiX3N0eWxlc1skbmFtZV1bJ3ByaW50ZWQnXSA9IHRydWU7CgkJCgkJZWNobyAnPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iJyAuICRwYl9zdHlsZXNbJG5hbWVdWydmaWxlJ10gLiAnP3Zlcj0nIC4gJHBiX3N0eWxlc1skbmFtZV1bJ3ZlcnNpb24nXSAuICciPic7Cgl9Cn0KCmZ1bmN0aW9uIHdwX3NjcmlwdF9pcyggJG5hbWUgKSB7CglnbG9iYWwgJHBiX3NjcmlwdHM7CglyZXR1cm4gYXJyYXlfa2V5X2V4aXN0cyggJG5hbWUsICRwYl9zY3JpcHRzICk7Cn0KZnVuY3Rpb24gd3BfZW5xdWV1ZV9zY3JpcHQoICRuYW1lLCAkZmlsZSwgJGRlcHMgPSBhcnJheSgpLCAkdmVyID0gJycgKSB7CglnbG9iYWwgJHBiX3NjcmlwdHM7CgkkcGJfc2NyaXB0c1skbmFtZV1bJ2ZpbGUnXSA9ICRmaWxlOwoJJHBiX3NjcmlwdHNbJG5hbWVdWyd2ZXJzaW9uJ10gPSAkdmVyOwoJJHBiX3NjcmlwdHNbJG5hbWVdWydwcmludGVkJ10gPSBmYWxzZTsKfQpmdW5jdGlvbiB3cF9wcmludF9zY3JpcHRzKCAkbmFtZSApIHsKCWdsb2JhbCAkcGJfc2NyaXB0czsKCWlmICggJHBiX3NjcmlwdHNbJG5hbWVdWydwcmludGVkJ10gPT09IGZhbHNlICkgewoJCSRwYl9zY3JpcHRzWyRuYW1lXVsncHJpbnRlZCddID0gdHJ1ZTsKCQkKCQllY2hvICc8c2NyaXB0IHNyYz0iJyAuICRwYl9zY3JpcHRzWyRuYW1lXVsnZmlsZSddIC4gJz92ZXI9JyAuICRwYl9zY3JpcHRzWyRuYW1lXVsndmVyc2lvbiddIC4gJyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4nOwoJfQp9CgpmdW5jdGlvbiBhZGRfYWN0aW9uKCAkdGFnLCAkY2FsbGJhY2sgKSB7CglnbG9iYWwgJHBiX2FjdGlvbnM7CgkkcGJfYWN0aW9uc1skdGFnXVsnY2FsbGJhY2snXSA9ICRjYWxsYmFjazsKfQoKCmZ1bmN0aW9uIGlzX2FkbWluKCkgewoJcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIGFwcGx5X2ZpbHRlcnMoICRmaWx0ZXIsICR2YWx1ZSApIHsKCXJldHVybiAkdmFsdWU7Cn0KCmZ1bmN0aW9uIF9jbGVhbnVwX2hlYWRlcl9jb21tZW50KCRzdHIpIHsKCXJldHVybiB0cmltKHByZWdfcmVwbGFjZSgiL1xzKig/OlwqXC98XD8+KS4qLyIsICcnLCAkc3RyKSk7Cn0KCmZ1bmN0aW9uIGdldF9wbHVnaW5fZGF0YSggJHBsdWdpbl9maWxlLCAkbWFya3VwID0gdHJ1ZSwgJHRyYW5zbGF0ZSA9IHRydWUgKSB7CgoJJGRlZmF1bHRfaGVhZGVycyA9IGFycmF5KAoJCSdOYW1lJyA9PiAnUGx1Z2luIE5hbWUnLAoJCSdQbHVnaW5VUkknID0+ICdQbHVnaW4gVVJJJywKCQknVmVyc2lvbicgPT4gJ1ZlcnNpb24nLAoJCSdEZXNjcmlwdGlvbicgPT4gJ0Rlc2NyaXB0aW9uJywKCQknQXV0aG9yJyA9PiAnQXV0aG9yJywKCQknQXV0aG9yVVJJJyA9PiAnQXV0aG9yIFVSSScsCgkJJ1RleHREb21haW4nID0+ICdUZXh0IERvbWFpbicsCgkJJ0RvbWFpblBhdGgnID0+ICdEb21haW4gUGF0aCcsCgkJJ05ldHdvcmsnID0+ICdOZXR3b3JrJywKCQkvLyBTaXRlIFdpZGUgT25seSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIE5ldHdvcmsuCgkJJ19zaXRld2lkZScgPT4gJ1NpdGUgV2lkZSBPbmx5JywKCSk7CgoJJHBsdWdpbl9kYXRhID0gZ2V0X2ZpbGVfZGF0YSggJHBsdWdpbl9maWxlLCAkZGVmYXVsdF9oZWFkZXJzLCAncGx1Z2luJyApOwoKCS8vIFNpdGUgV2lkZSBPbmx5IGlzIHRoZSBvbGQgaGVhZGVyIGZvciBOZXR3b3JrCglpZiAoIGVtcHR5KCAkcGx1Z2luX2RhdGFbJ05ldHdvcmsnXSApICYmICEgZW1wdHkoICRwbHVnaW5fZGF0YVsnX3NpdGV3aWRlJ10gKSApIHsKCQlfZGVwcmVjYXRlZF9hcmd1bWVudCggX19GVU5DVElPTl9fLCAnMy4wJywgc3ByaW50ZiggX18oICdUaGUgPGNvZGU+JTEkczwvY29kZT4gcGx1Z2luIGhlYWRlciBpcyBkZXByZWNhdGVkLiBVc2UgPGNvZGU+JTIkczwvY29kZT4gaW5zdGVhZC4nICksICdTaXRlIFdpZGUgT25seTogdHJ1ZScsICdOZXR3b3JrOiB0cnVlJyApICk7CgkJJHBsdWdpbl9kYXRhWydOZXR3b3JrJ10gPSAkcGx1Z2luX2RhdGFbJ19zaXRld2lkZSddOwoJfQoJJHBsdWdpbl9kYXRhWydOZXR3b3JrJ10gPSAoICd0cnVlJyA9PSBzdHJ0b2xvd2VyKCAkcGx1Z2luX2RhdGFbJ05ldHdvcmsnXSApICk7Cgl1bnNldCggJHBsdWdpbl9kYXRhWydfc2l0ZXdpZGUnXSApOwoKCS8vRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgYnkgZGVmYXVsdCBUaXRsZSBpcyB0aGUgc2FtZSBhcyBOYW1lLgoJJHBsdWdpbl9kYXRhWydUaXRsZSddID0gJHBsdWdpbl9kYXRhWydOYW1lJ107CgoJaWYgKCAkbWFya3VwIHx8ICR0cmFuc2xhdGUgKQoJCSRwbHVnaW5fZGF0YSA9IF9nZXRfcGx1Z2luX2RhdGFfbWFya3VwX3RyYW5zbGF0ZSggJHBsdWdpbl9maWxlLCAkcGx1Z2luX2RhdGEsICRtYXJrdXAsICR0cmFuc2xhdGUgKTsKCWVsc2UKCQkkcGx1Z2luX2RhdGFbJ0F1dGhvck5hbWUnXSA9ICRwbHVnaW5fZGF0YVsnQXV0aG9yJ107CgoJcmV0dXJuICRwbHVnaW5fZGF0YTsKfQoKCmZ1bmN0aW9uIGdldF9maWxlX2RhdGEoICRmaWxlLCAkZGVmYXVsdF9oZWFkZXJzLCAkY29udGV4dCA9ICcnICkgewoJLy8gV2UgZG9uJ3QgbmVlZCB0byB3cml0ZSB0byB0aGUgZmlsZSwgc28ganVzdCBvcGVuIGZvciByZWFkaW5nLgoJJGZwID0gZm9wZW4oICRmaWxlLCAncicgKTsKCgkvLyBQdWxsIG9ubHkgdGhlIGZpcnN0IDhraUIgb2YgdGhlIGZpbGUgaW4uCgkkZmlsZV9kYXRhID0gZnJlYWQoICRmcCwgODE5MiApOwoKCS8vIFBIUCB3aWxsIGNsb3NlIGZpbGUgaGFuZGxlLCBidXQgd2UgYXJlIGdvb2QgY2l0aXplbnMuCglmY2xvc2UoICRmcCApOwoKCWlmICggJGNvbnRleHQgIT0gJycgKSB7CgkJJGV4dHJhX2hlYWRlcnMgPSBhcHBseV9maWx0ZXJzKCAiZXh0cmFfeyRjb250ZXh0fV9oZWFkZXJzIiwgYXJyYXkoKSApOwoKCQkkZXh0cmFfaGVhZGVycyA9IGFycmF5X2ZsaXAoICRleHRyYV9oZWFkZXJzICk7CgkJZm9yZWFjaCggJGV4dHJhX2hlYWRlcnMgYXMgJGtleT0+JHZhbHVlICkgewoJCQkkZXh0cmFfaGVhZGVyc1ska2V5XSA9ICRrZXk7CgkJfQoJCSRhbGxfaGVhZGVycyA9IGFycmF5X21lcmdlKCAkZXh0cmFfaGVhZGVycywgKGFycmF5KSAkZGVmYXVsdF9oZWFkZXJzICk7Cgl9IGVsc2UgewoJCSRhbGxfaGVhZGVycyA9ICRkZWZhdWx0X2hlYWRlcnM7Cgl9CgoJZm9yZWFjaCAoICRhbGxfaGVhZGVycyBhcyAkZmllbGQgPT4gJHJlZ2V4ICkgewoJCXByZWdfbWF0Y2goICcvXlsgXHRcLyojQF0qJyAuIHByZWdfcXVvdGUoICRyZWdleCwgJy8nICkgLiAnOiguKikkL21pJywgJGZpbGVfZGF0YSwgJHskZmllbGR9KTsKCQlpZiAoICFlbXB0eSggJHskZmllbGR9ICkgKQoJCQkkeyRmaWVsZH0gPSBfY2xlYW51cF9oZWFkZXJfY29tbWVudCggJHskZmllbGR9WzFdICk7CgkJZWxzZQoJCQkkeyRmaWVsZH0gPSAnJzsKCX0KCgkkZmlsZV9kYXRhID0gY29tcGFjdCggYXJyYXlfa2V5cyggJGFsbF9oZWFkZXJzICkgKTsKCglyZXR1cm4gJGZpbGVfZGF0YTsKfQoKCmZ1bmN0aW9uIHdwX25vbmNlX2ZpZWxkKCkgewoJcmV0dXJuOwp9CgoKCi8vIFNvbWUgUEhQIGluc3RhbGxzIGRvbid0IGhhdmUgbmdldHRleHQuIE5lZWRlZCBieSBodW1hbl90aW1lX2RpZmYoKS4KaWYgKCAhIGZ1bmN0aW9uX2V4aXN0cyggJ25nZXR0ZXh0JyApICkgewoJZnVuY3Rpb24gbmdldHRleHQoICRzaW5ndWxhciwgJHBsdXJhbCwgJG51bSApIHsKCQlpZiAoICRudW0gPiAxICkgewoJCQlyZXR1cm4gJHBsdXJhbDsKCQl9IGVsc2UgewoJCQlyZXR1cm4gJHNpbmd1bGFyOwoJCX0KCX0KfSAvLyBFbmQgbmdldHRleHQoKS4KCgoKLyoqCiAqIERldGVybWluZXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gdGltZXN0YW1wcy4KICoKICogVGhlIGRpZmZlcmVuY2UgaXMgcmV0dXJuZWQgaW4gYSBodW1hbiByZWFkYWJsZSBmb3JtYXQgc3VjaCBhcyAiMSBob3VyIiwKICogIjUgbWlucyIsICIyIGRheXMiLgogKgogKiBAc2luY2UgMS41LjAKICoKICogQHBhcmFtIGludCAkZnJvbSBVbml4IHRpbWVzdGFtcCBmcm9tIHdoaWNoIHRoZSBkaWZmZXJlbmNlIGJlZ2lucy4KICogQHBhcmFtIGludCAkdG8gT3B0aW9uYWwuIFVuaXggdGltZXN0YW1wIHRvIGVuZCB0aGUgdGltZSBkaWZmZXJlbmNlLiBEZWZhdWx0IGJlY29tZXMgdGltZSgpIGlmIG5vdCBzZXQuCiAqIEByZXR1cm4gc3RyaW5nIEh1bWFuIHJlYWRhYmxlIHRpbWUgZGlmZmVyZW5jZS4KICovCmZ1bmN0aW9uIGh1bWFuX3RpbWVfZGlmZiggJGZyb20sICR0byA9ICcnICkgewoJaWYgKCBlbXB0eSgkdG8pICkKCQkkdG8gPSB0aW1lKCk7CgkkZGlmZiA9IChpbnQpIGFicygkdG8gLSAkZnJvbSk7CglpZiAoJGRpZmYgPD0gMzYwMCkgewoJCSRtaW5zID0gcm91bmQoJGRpZmYgLyA2MCk7CgkJaWYgKCRtaW5zIDw9IDEpIHsKCQkJJG1pbnMgPSAxOwoJCX0KCQkvKiB0cmFuc2xhdG9yczogbWluPW1pbnV0ZSAqLwoJCSRzaW5jZSA9IHNwcmludGYoIG5nZXR0ZXh0KCAnJXMgbWluJywgJyVzIG1pbnMnLCAkbWlucyApLCAkbWlucyk7Cgl9IGVsc2UgaWYgKCgkZGlmZiA8PSA4NjQwMCkgJiYgKCRkaWZmID4gMzYwMCkpIHsKCQkkaG91cnMgPSByb3VuZCgkZGlmZiAvIDM2MDApOwoJCWlmICgkaG91cnMgPD0gMSkgewoJCQkkaG91cnMgPSAxOwoJCX0KCQkkc2luY2UgPSBzcHJpbnRmKCBuZ2V0dGV4dCgnJXMgaG91cicsICclcyBob3VycycsICRob3VycyApLCAkaG91cnMpOwoJfSBlbHNlaWYgKCRkaWZmID49IDg2NDAwKSB7CgkJJGRheXMgPSByb3VuZCgkZGlmZiAvIDg2NDAwKTsKCQlpZiAoJGRheXMgPD0gMSkgewoJCQkkZGF5cyA9IDE7CgkJfQoJCSRzaW5jZSA9IHNwcmludGYoIG5nZXR0ZXh0KCclcyBkYXknLCAnJXMgZGF5cycsICRkYXlzICksICRkYXlzKTsKCX0KCXJldHVybiAkc2luY2U7Cn0KCgoKLyoqCiAqIFVuc2VyaWFsaXplIHZhbHVlIG9ubHkgaWYgaXQgd2FzIHNlcmlhbGl6ZWQuCiAqCiAqIEBzaW5jZSAyLjAuMAogKgogKiBAcGFyYW0gc3RyaW5nICRvcmlnaW5hbCBNYXliZSB1bnNlcmlhbGl6ZWQgb3JpZ2luYWwsIGlmIGlzIG5lZWRlZC4KICogQHJldHVybiBtaXhlZCBVbnNlcmlhbGl6ZWQgZGF0YSBjYW4gYmUgYW55IHR5cGUuCiAqLwpmdW5jdGlvbiBtYXliZV91bnNlcmlhbGl6ZSggJG9yaWdpbmFsICkgewoJaWYgKCBpc19zZXJpYWxpemVkKCAkb3JpZ2luYWwgKSApIC8vIGRvbid0IGF0dGVtcHQgdG8gdW5zZXJpYWxpemUgZGF0YSB0aGF0IHdhc24ndCBzZXJpYWxpemVkIGdvaW5nIGluCgkJcmV0dXJuIEB1bnNlcmlhbGl6ZSggJG9yaWdpbmFsICk7CglyZXR1cm4gJG9yaWdpbmFsOwp9CgoKCgoKCi8vIE5PVCBJTVBMRU1FTlRFRCBCVVQgTk9OLUJMT0NLSU5HLgoKZnVuY3Rpb24gcmVnaXN0ZXJfYWN0aXZhdGlvbl9ob29rKCkgewp9CmZ1bmN0aW9uIGxvYWRfcGx1Z2luX3RleHRkb21haW4oKSB7Cn0KCgoKCmZ1bmN0aW9uIHdwX2RpZSggJG1lc3NhZ2UgKSB7CglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnd3BfZGllKCkgY2FsbGVkIHdpdGggbWVzc2FnZTogJyAuICRtZXNzYWdlICk7CgllY2hvICRtZXNzYWdlOwoJZGllKCk7Cn0KCmZ1bmN0aW9uIHdwX2xvYWRfdHJhbnNsYXRpb25zX2Vhcmx5KCkgewp9CgpmdW5jdGlvbiB3cF9kZWJ1Z19iYWNrdHJhY2Vfc3VtbWFyeSgpIHsKfQoKaWYgKCAhZGVmaW5lZCgnV1BfREVCVUcnKSApCglkZWZpbmUoICdXUF9ERUJVRycsIGZhbHNlICk7CmlmICggIWRlZmluZWQoJ1dQX0RFQlVHX0RJU1BMQVknKSApCglkZWZpbmUoICdXUF9ERUJVR19ESVNQTEFZJywgdHJ1ZSApOwppZiAoICFkZWZpbmVkKCdXUF9ERUJVR19MT0cnKSApCglkZWZpbmUoJ1dQX0RFQlVHX0xPRycsIGZhbHNlKTsKaWYgKCAhZGVmaW5lZCgnV1BfQ0FDSEUnKSApCglkZWZpbmUoJ1dQX0NBQ0hFJywgZmFsc2UpOwoKCgo/Pg==
###PACKDATA,FILE_END,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php
###PACKDATA,FILE_START,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php

###PACKDATA,FILE_END,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php
###PACKDATA,FILE_START,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php

###PACKDATA,FILE_END,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php
###PACKDATA,FILE_START,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php

###PACKDATA,FILE_END,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php
###PACKDATA,FILE_START,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
PD9waHAKCgoKLyoJY2xhc3MgcGx1Z2luYnVkZHlfZm9ybWF0CiAqCUBhdXRob3IgRHVzdGluIEJvbHRvbgogKgkKICoJSGVscHMgZm9ybWF0IGNvbnRlbnQgb3IgZGF0YSBzdWNoIGFzIHRpbWUsIGRhdGUsIGZpbGUgc2l6ZSwgZXRjLgogKi8KY2xhc3MgcGJfYmFja3VwYnVkZHlfZm9ybWF0IHsKCQoJCgkKCS8vICoqKioqKioqKiogUFVCTElDIFBST1BFUlRJRVMgKioqKioqKioqKgoJCgkKCQoJLy8gKioqKioqKioqKiBQUklWQVRFIFBST1BFUlRJRVMgKioqKioqKioqKgoJcHJpdmF0ZSAkX3RpbWVzdGFtcCA9ICdNIGosIFkgZzppOnMgYSc7CgkKCQoJLy8gKioqKioqKioqKiBGVU5DVElPTlMgKioqKioqKioqKgoJCgkKCQoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT5fX2NvbnN0cnVjdCgpCgkgKgkKCSAqCURlZmF1bHQgY29uc3RydWN0b3IuCgkgKgkKCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7Cgl9IC8vIEVuZCBfX2NvbnN0cnVjdCgpLgoJCgkKCQoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT5maWxlX3NpemUoKQoJICoJCgkgKglUYWtlcyBhIGZpbGUgc2l6ZSBpbiBieXRlcyBhbmQgdHJhbnNmb3JtcyBpdCBpbnRvIGEgaHVtYW4gcmVhZGFibGUgZm9ybWF0IHdpdGggbW9yZSBmcmllbmRseSB1bml0cy4gRGVjaWRlcyBvbiB1bml0IGJhc2VkIG9uIHRoZSBzaXplLgoJICoJCgkgKglAcGFyYW0JCWludAkJJHNpemUJRmlsZSBzaXplLgoJICoJQHJldHVybgkJc3RyaW5nCQkJSHVtYW4gZm9ybWF0dGVkIGZyaWVuZGx5IHJlYWRhYmxlIGZvcm1hdC4KCSAqLwoJZnVuY3Rpb24gZmlsZV9zaXplKCAkc2l6ZSApIHsKCQkkc2l6ZXMgPSBhcnJheSggJyBCeXRlcycsICcgS0InLCAnIE1CJywgJyBHQicsICcgVEInLCAnIFBCJywgJyBFQicsICcgWkInLCAnIFlCJyk7CgkJaWYgKCAkc2l6ZSA9PSAwICkgewoJCQlyZXR1cm4oICcwIE1CJyApOwoJCX0gZWxzZSB7CgkJCXJldHVybiAoIHJvdW5kKCAkc2l6ZSAvIHBvdyggMTAyNCwgKCAkaSA9IGZsb29yKCBsb2coICRzaXplLCAxMDI0ICkgKSApICksICRpID4gMSA/IDIgOiAwKSAuICRzaXplc1skaV0gKTsKCQl9Cgl9IC8vIEVuZCBmaWxlX3NpemUoKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+ZGF0ZSgpCgkgKgkKCSAqCUZvcm1hdHMgYSB0aW1lc3RhbXAgaW50byBhIG5pY2UgaHVtYW4gZGF0ZSBmb3JtYXQuCgkgKgkKCSAqCUBwYXJhbQkJaW50CQkkdGltZXN0YW1wCQlUaW1lc3RhbXAgdG8gbWFrZSBwcmV0dHkuCgkgKglAcGFyYW0JCXN0cmluZwkkY3VzdG9tRm9ybWF0CUN1c3RvbSB0aW1lc3RhbXAgZm9ybWF0LiBFbHNlIHVzZXMgJHRoaXMtPl90aW1lc3RhbXAgZGVmaW5lZCBhdCB0b3Agb2YgdGhpcyBmaWxlLgoJICoJQHJldHVybgkJc3RyaW5nCQkJCQlQcmV0dHkgaHVtYW4gdGltZXN0YW1wLgoJICovCglmdW5jdGlvbiBkYXRlKCAkdGltZXN0YW1wLCAkY3VzdG9tRm9ybWF0ID0gJycgKSB7CgkJaWYgKCAnJyA9PSAkY3VzdG9tRm9ybWF0ICkgewoJCQlyZXR1cm4gZGF0ZSggJHRoaXMtPl90aW1lc3RhbXAsICR0aW1lc3RhbXAgKTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gZGF0ZSggJGN1c3RvbUZvcm1hdCwgJHRpbWVzdGFtcCApOwoJCX0KCX0gLy8gRW5kIGRhdGUoKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+dW5sb2NhbGl6ZV90aW1lKCkKCSAqCQoJICoJUmVtb3ZlcyB0aGUgdGltZXpvbmUgb2Zmc2V0IG9mIGEgbG9jYWxpemVkIHRpbWUgZGlzcGxheSBmb3IgYSB1c2VyLgoJICoJCgkgKglAcGFyYW0JCWludAkJJHRpbWVzdGFtcAkJVGltZXN0YW1wIHRvIHJlbW92ZSB0aW1lIG9mZnNldCBmb3IuCgkgKglAcmV0dXJuCQlpbnQJCQkJCQlDb3JyZWN0ZWQgdGltZXN0YW1wLgoJICovCglmdW5jdGlvbiBsb2NhbGl6ZV90aW1lKCAkdGltZXN0YW1wICkgewoJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnZ2V0X29wdGlvbicgKSApIHsKCQkJJGdtdF9vZmZzZXQgPSBnZXRfb3B0aW9uKCAnZ210X29mZnNldCcgKTsKCQl9IGVsc2UgewoJCQkkZ210X29mZnNldCA9IDA7CgkJfQoJCXJldHVybiAkdGltZXN0YW1wICsgKCAkZ210X29mZnNldCAqIDM2MDAgKTsKCX0gLy8gRW5kIGxvY2FsaXplX3RpbWUoKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+dW5sb2NhbGl6ZV90aW1lKCkKCSAqCQoJICoJUmVtb3ZlcyB0aGUgdGltZXpvbmUgb2Zmc2V0IG9mIGEgbG9jYWxpemVkIHRpbWUgZGlzcGxheSBmb3IgYSB1c2VyLgoJICoJCgkgKglAcGFyYW0JCWludAkJJHRpbWVzdGFtcAkJVGltZXN0YW1wIHRvIHJlbW92ZSB0aW1lIG9mZnNldCBmb3IuCgkgKglAcmV0dXJuCQlpbnQJCQkJCQlDb3JyZWN0ZWQgdGltZXN0YW1wLgoJICovCglmdW5jdGlvbiB1bmxvY2FsaXplX3RpbWUoICR0aW1lc3RhbXAgKSB7CgkJcmV0dXJuICR0aW1lc3RhbXAgLSAoIGdldF9vcHRpb24oICdnbXRfb2Zmc2V0JyApICogMzYwMCApOwoJfSAvLyBFbmQgdW5sb2NhbGl6ZV90aW1lKCkuCgkKCQoJCgkvKglwbHVnaW5idWRkeV9mb3JtYXQtPnRpbWVfYWdvKCkKCSAqCQoJICoJQWNjZXB0cyBOT04tbG9jYWxpemVkIHRpbWVzdGFtcHMuCgkgKglAc2VlIHRpbWVfZHVyYXRpb24KCSAqCQoJICoJQHBhcmFtCQkKCSAqCUByZXR1cm4JCQoJICovCgkgLy8gVE9ETzogZGVwcmVjYXRlZD8KCWZ1bmN0aW9uIHRpbWVfYWdvKCAkdGltZXN0YW1wICkgewoJCXJldHVybiBodW1hbl90aW1lX2RpZmYoICR0aW1lc3RhbXAsIHRpbWUoKSApOwoJfSAvLyBFbmQgdGltZV9hZ28oKS4KCQoJCgkKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+ZHVyYXRpb24oKQoJICoJCgkgKglSZXR1cm5zIGEgaHVtYW4gcmVhZGFibGUgZHVyYXRpb24uIFVzZWZ1bCBmb3IgdGltZSBhZ28gb3IgY291bnRkb3ducy4KCSAqCUV4OiA1IGhvdXJzLCA0IG1pbnV0ZXMsIDQzIHNlY29uZHMuCgkgKgkKCSAqCUBwYXJhbQkJaW50CQkkc2Vjb25kcwkJTnVtYmVyIG9mIHNlY29uZHMgdG8gdHVybiBpbnRvIGEgaHVtYW4gZnJpZW5kbHkgcmVhZGFibGUgZm9ybWF0LgoJICoJQHJldHVybgkJCQlzdHJpbmcJCQlIdW1hbiByZWFkYWJsZSBzdHJpbmcgZHVyYXRpb24uCgkgKi8KCWZ1bmN0aW9uIHRpbWVfZHVyYXRpb24oICRzZWNvbmRzICkgewoJCSR0aW1lID0gdGltZSgpIC0gJHNlY29uZHM7CgkJCgkJJHBlcmlvZHMgPSBhcnJheShfXygnc2Vjb25kJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnbWludXRlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnaG91cicsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnZGF5JywgCSAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnd2VlaycsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnbW9udGgnLCAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygneWVhcicsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnZGVjYWRlJy4gJ0xJT04nICkKCQkJCQkJICk7CgkJJGxlbmd0aHMgPSBhcnJheSgnNjAnLCc2MCcsJzI0JywnNycsJzQuMzUnLCcxMicsJzEwJyk7CgkJCgkJJG5vdyA9IHRpbWUoKTsKCQkKCQkkZGlmZmVyZW5jZSA9ICRub3cgLSAkdGltZTsKCQkkdGVuc2UgPSBfXygnYWdvJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7CgkJCgkJCgkJZm9yKCRqID0gMDsgJGRpZmZlcmVuY2UgPj0gJGxlbmd0aHNbJGpdICYmICRqIDwgY291bnQoJGxlbmd0aHMpLTE7ICRqKyspIHsKCQkJJGRpZmZlcmVuY2UgLz0gJGxlbmd0aHNbJGpdOwoJCX0KCQkKCQkkZGlmZmVyZW5jZSA9IHJvdW5kKCRkaWZmZXJlbmNlKTsKCQkKCQlpZigkZGlmZmVyZW5jZSAhPSAxKSB7CgkJCSRwZXJpb2RzWyRqXS49ICJzIjsKCQl9CgkJCgkJcmV0dXJuICIkZGlmZmVyZW5jZSAkcGVyaW9kc1skal0iOwoJfSAvLyBFbmQgZHVyYXRpb24oKS4KCQoJCgkKCS8qCXByZXR0aWZ5KCkKCSAqCQoJICoJVGFrZXMgYSBzdHJpbmcgYW5kIHJldHVybnMgYSBtb3JlIHByZXR0eSB2ZXJzaW9uLiBMb29rcyBpbiBhbiBhcnJheSBmb3IgYSBrZXkgbWF0Y2hpbmcgdGhlIHN0cmluZy4KCSAqCVJldHVybnMgdGhlIGFzc29jaWF0ZWQgdmFsdWUuIFJldHVybnMgb3JpZ2luYWwgdmFsdWUgaWYgbm8gcHJldHR5IHJlcGxhY2VyIGlzIGZvdW5kLgoJICoJRXg6CgkgKgkJcHJldHRpZnkoICdkb2cnLCBhcnJheSggJ2NhdHMnID0+ICdDYXRzJywgJ2RvZycgPT4gJ0RvZycgKSApOwoJICoJCVJldHVybnM6IERvZwoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHZhbHVlCQkJVmFsdWUgdG8gYmUgcmVwbGFjZWQgd2l0aCBhIHByZXR0eSB2ZXJzaW9uLgoJICoJQHBhcmFtCQlhcnJheQkJJHJlcGxhY2VtZW50cwlBcnJheSBvZjogdmFsdWUgdG8gbG9vayBmb3IgPT4gdmFsdWUgdG8gcmVwbGFjZSB3aXRoLgoJICoJQHJldHVybgkJc3RyaW5nCQkJCQkJUHJldHR5IHZlcnNpb24gdGhhdCByZXBsYWNlZCAkdmFsdWUuIFJldHVybnMgb3JpZ2luYWwgJHZhbHVlIGlmIG5vdCBmb3VuZCBpbiAkcmVwbGFjZW1lbnRzIGtleXMuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBwcmV0dGlmeSggJHZhbHVlLCAkcmVwbGFjZW1lbnRzICkgewoJCQoJCWlmICggaXNzZXQoICRyZXBsYWNlbWVudHNbJHZhbHVlXSApICkgeyAvLyBGb3VuZCByZXBsYWNlbWVudC4KCQkJcmV0dXJuICRyZXBsYWNlbWVudHNbJHZhbHVlXTsKCQl9IGVsc2UgeyAvLyBObyByZXBsYWNlbWVudDsgcmV0dXJuIG9yaWdpbmFsIHZhbHVlLgoJCQlyZXR1cm4gJHZhbHVlOwoJCX0KCQkKCX0gLy8gRW5kIHByZXR0aWZ5KCk7CgkKCQoJCgkvKiBtdWx0aV9pbXBsb2RlKCkKCSAqCgkgKiBEZWVwIHJlY3Vyc2l2ZSBpbXBsb3Npb24uCgkgKgoJICovCglwdWJsaWMgZnVuY3Rpb24gbXVsdGlfaW1wbG9kZSgkYXJyYXksICRnbHVlKSB7CgkgICAgJHJldCA9ICcnOwoKCSAgICBmb3JlYWNoICgkYXJyYXkgYXMgJGl0ZW0pIHsKCSAgICAgICAgaWYgKGlzX2FycmF5KCRpdGVtKSkgewoJICAgICAgICAgICAgJHJldCAuPSAkdGhpcy0+bXVsdGlfaW1wbG9kZSgkaXRlbSwgJGdsdWUpIC4gJGdsdWU7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAkcmV0IC49ICRpdGVtIC4gJGdsdWU7CgkgICAgICAgIH0KCSAgICB9CgoJICAgICRyZXQgPSBzdWJzdHIoJHJldCwgMCwgMC1zdHJsZW4oJGdsdWUpKTsKCgkgICAgcmV0dXJuICRyZXQ7Cgl9IC8vIEVuZCBtdWx0aV9pbXBsb2RlKCkuCgkKCQoJCn0gLy8gRW5kIGNsYXNzIHBsdWdpbmJ1ZGR5X3NldHRpbmdzLgoKCgo/Pg==
###PACKDATA,FILE_END,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
###PACKDATA,FILE_START,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
###PACKDATA,FILE_START,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php
PD9waHAKCgoKLyoJY2xhc3MgcGx1Z2luYnVkZHlfc2V0dGluZ3MKICoJQGF1dGhvciBEdXN0aW4gQm9sdG9uCiAqCQogKglIYW5kbGVzIHNldHRpbmcgdXAgYW5kIHBhcnNpbmcgc3VibWl0dGVkIGRhdGEgZm9yIHNldHRpbmdzIHBhZ2VzLiBVc2VzIGZvcm0gY2xhc3MgZm9yIGhhbmRsaW5nIGZvcm1zLgogKglJZiBhIHNhdmVwb2ludCBpcyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yIHRoZW4gc2V0dGluZ3Mgd2lsbCBiZSBhdXRvLXNhdmVkIG9uIHNhdmUuCiAqCUlmIGZhbHNlIGlzIHBhc3NlZCB0byB0aGUgc2F2ZXBvaW50IHRoZW4gdGhlIHByb2Nlc3MoKSBmdW5jdGlvbiBtYXkgYmUgdXNlZCB0byB2YWxpZGF0ZSBhbmQgZ3JhYiBzdWJtaXR0ZWQgZm9ybSBkYXRhIGZvciBjdXN0b20gcHJvY2Vzc2luZy4KICoJQHNlZSBwbHVnaW5idWRkeV9mb3JtCiAqCQogKi8KY2xhc3MgcGJfYmFja3VwYnVkZHlfc2V0dGluZ3MgewoJCgkKCQoJLy8gKioqKioqKioqKiBQVUJMSUMgUFJPUEVSVElFUyAqKioqKioqKioqCgkKCQoJCgkvLyAqKioqKioqKioqIFBSSVZBVEUgUFJPUEVSVElFUyAqKioqKioqKioqCglwcml2YXRlICRfZm9ybTsKCXByaXZhdGUgJF9mb3JtX25hbWUgPSAnJzsKCXByaXZhdGUgJF9wcmVmaXggPSAnJzsKCXByaXZhdGUgJF9zYXZlcG9pbnQ7Cglwcml2YXRlICRfc2V0dGluZ3MgPSBhcnJheSgpOwoJcHJpdmF0ZSAkX2N1c3RvbV90aXRsZV93aWR0aCA9ICcnOwoJCgkKCQoJLy8gKioqKioqKioqKiBGVU5DVElPTlMgKioqKioqKioqKgoJCgkKCQoJLyoJcGx1Z2luYnVkZHlfc2V0dGluZ3MtPl9fY29uc3RydWN0KCkKCSAqCQoJICoJRGVmYXVsdCBjb25zdHJ1Y3Rvci4KCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCQkkZm9ybV9uYW1lCQkJCQlOYW1lIC8gc2x1ZyBvZiB0aGUgZm9ybS4KCSAqCUBwYXJhbQkJc3RyaW5nCQkJJHNhdmVfcG9pbnRfb3JfY3VzdG9tX21vZGUJTG9jYXRpb24gaW4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zIGFycmF5IHRvIHNhdmUgdG8uIEV4OiBncm91cHMjNSBzYXZlcyBpbnRvOiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2dyb3VwcyddWzVdLgoJICoJCQkJZmFsc2UJCQkJCQkJCQkJSWYgZmFsc2UgdGhlIHByb2Nlc3MoKSBmdW5jdGlvbiB3aWxsIG5vdCBzYXZlIGJ1dCB3aWxsIHJldHVybiByZXN1bHRzIGluc3RlYWQgaW5jbHVkaW5nIGZvcm0gbmFtZSA9PiB2YWx1ZSBwYWlycyBpbiBhbiBhcnJheSBmb3IgcHJvY2Vzc2luZy4KCSAqCQkJCWFycmF5CQkJCQkJCQkJCUlmIGFycmF5IHRoZW4gdGhlc2Ugd2lsbCBiZSB0cmVhdGVkIGFzIHRoZSBkZWZhdWx0cy4gV29ya3MgdGhlIHNhbWUgYXMgYmVpbmcgZmFsc2Ugb3RoZXIgdGhhbiB0aGlzLgoJICoJQHBhcmFtCQlzdHJpbmcJCQkkYWRkaXRpb25hbF9xdWVyeV9zdHJpbmcJQWRkaXRpb25hbCBxdWVyeXN0cmluZyB2YXJpYWJsZXMgdG8gcGFzcyBpbiB0aGUgZm9ybSBhY3Rpb24gVVJMLgoJICoJQHBhcmFtCQlpbnQJCQkJJGN1c3RvbV90aXRsZV93aWR0aAkJCUN1c3RvbSB0aXRsZSB3aWR0aCBpbiBwaXhlbHMuIEZvcm1hdHMgdGFibGUgc2l6aW5nLgoJICoJQHJldHVybgkJbnVsbAoJICovCglmdW5jdGlvbiBfX2NvbnN0cnVjdCggJGZvcm1fbmFtZSwgJHNhdmVfcG9pbnRfb3JfY3VzdG9tX21vZGUsICRhZGRpdGlvbmFsX3F1ZXJ5X3N0cmluZyA9ICcnLCAkY3VzdG9tX3RpdGxlX3dpZHRoID0gJycgKSB7CgkJJHRoaXMtPl9mb3JtX25hbWUgPSAkZm9ybV9uYW1lOwoJCSR0aGlzLT5fcHJlZml4ID0gJ3BiXycgLiBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdzbHVnJyApIC4gJ18nOwoJCSR0aGlzLT5fc2F2ZXBvaW50ID0gJHNhdmVfcG9pbnRfb3JfY3VzdG9tX21vZGU7CgkJJHRoaXMtPl9jdXN0b21fdGl0bGVfd2lkdGggPSAkY3VzdG9tX3RpdGxlX3dpZHRoOwoJCQoJCS8vIFRPRE86IG5vIG5lZWQgdG8gcGFzcyBzYXZlcG9pbnQgaGVyZT8gYmVsb3c6CgkJJHRoaXMtPl9mb3JtID0gbmV3IHBiX2JhY2t1cGJ1ZGR5X2Zvcm0oICRmb3JtX25hbWUsICRzYXZlX3BvaW50X29yX2N1c3RvbV9tb2RlLCAkYWRkaXRpb25hbF9xdWVyeV9zdHJpbmcgKTsKCX0gLy8gRW5kIF9fY29uc3RydWN0KCkuCgkKCQoJCgkvKglwbHVnaW5idWRkeV9zZXR0aW5ncy0+YWRkX3NldHRpbmcoKQoJICoJCgkgKglSZWdpc3RlciBhbmQgYWRkIGEgc2V0dGluZyB0byB0aGUgc2V0dGluZ3MgZm9ybSBzeXN0ZW0uCgkgKgkKCSAqCUBwYXJhbQkJYXJyYXkJCSRzZXR0aW5ncwkJQXJyYXkgb2Ygc2V0dGluZ3MgZm9yIHRoaXMgYWRkZWQgc2V0dGluZy4gU2VlICRkZWZhdWx0X3NldHRpbmdzIGZvciBsaXN0IG9mIG9wdGlvbnMgdGhhdCBjYW4gYmUgZGVmaW5lZC4KCSAqCUByZXR1cm4JCQoJICovCglmdW5jdGlvbiBhZGRfc2V0dGluZyggJHNldHRpbmdzICkgewoJCSRkZWZhdWx0X3NldHRpbmdzID0gYXJyYXkgKAoJCQkndHlwZScJCQkJPT4JCScnLAoJCQknbmFtZScJCQkJPT4JCScnLAoJCQkndGl0bGUnCQkJCT0+CQknJywKCQkJJ3RpcCcJCQkJPT4JCScnLAoJCQknY3NzJwkJCQk9PgkJJycsCgkJCSdiZWZvcmUnCQkJPT4JCScnLAoJCQknYWZ0ZXInCQkJCT0+CQknJywKCQkJJ3J1bGVzJwkJCQk9PgkJJycsCgkJCSdkZWZhdWx0JwkJCT0+CQknJywJCQkJCS8vIElNUE9SVEFOVDogT3ZlcnJpZGVzIGRlZmF1bHQgYXJyYXkuIEFsc28gdXNlZnVsIGlmIHNhdmVwb2ludCBpcyA9PT0gZmFsc2UgdG8gb3ZlcnJpZGUuCgkJCSdvcHRpb25zJwkJCT0+CQlhcnJheSgpLAoJCQknb3JpZW50YXRpb24nCQk9PgkJJ2hvcml6b250YWwnLAkJLy8gVXNlZCBieSByYWRpbyBhbmQgY2hlY2tib3hlcy4gVE9ETzogc3RpbGwgbmVlZCB0byBhZGQgdG8gY2hlY2tib3hlcy4KCQkJJ2NsYXNzZXMnCQkJPT4JCScnLAkJCQkJLy8gU3RyaW5nIG9mIGFkZGl0aW9uYWwgY2xhc3Nlcy4KCQkJJ3Jvd19jbGFzcycJCQk9PgkJJycsCQkJCQkvLyBDbGFzcyB0byBhcHBseSB0byByb3cgdGQncyBpbiByb3cuCgkJKTsKCQkkc2V0dGluZ3MgPSBhcnJheV9tZXJnZSggJGRlZmF1bHRfc2V0dGluZ3MsICRzZXR0aW5ncyApOwoJCSR0aGlzLT5fc2V0dGluZ3NbXSA9ICRzZXR0aW5nczsKCQkKCQkKCQkvLyBGaWd1cmUgb3V0IGRlZmF1bHRzLgoJCWlmICggJHNldHRpbmdzWydkZWZhdWx0J10gIT0gJycgKSB7IC8vIERlZmF1bHQgd2FzIHBhc3NlZCB0byBhZGRfc2V0dGluZygpLgoJCQkkZGVmYXVsdF92YWx1ZSA9ICRzZXR0aW5nc1snZGVmYXVsdCddOwoJCX0gZWxzZSB7IC8vIE5vIGRlZmF1bHQgZXhwbGljdGx5IHNldC4KCQkJJHNhdmVwb2ludCA9ICR0aGlzLT5fc2F2ZXBvaW50OwoJCQkkcmF3X25hbWUgPSAkc2V0dGluZ3NbJ25hbWUnXTsKCQkJCgkJCWlmICggc3RyaXN0ciggJHNldHRpbmdzWyduYW1lJ10sICcjJyApICk7CgkJCWlmICggZmFsc2UgIT09ICggJGxhc3RfaGFzaHBvaW50ID0gc3RycnBvcyggJHNldHRpbmdzWyduYW1lJ10sICcjJyApICkgKSB7CgkJCQkkdGVtcF9zYXZlcG9pbnQgPSBzdWJzdHIoICRzZXR0aW5nc1snbmFtZSddLCAwLCAkbGFzdF9oYXNocG9pbnQgKTsKCQkJCWlmICggKCAkc2F2ZXBvaW50ID09PSBmYWxzZSApIHx8ICggJHNhdmVwb2ludCA9PSAnJyApICkgewoJCQkJCSRzYXZlcG9pbnQgPSAkdGVtcF9zYXZlcG9pbnQ7CgkJCQl9IGVsc2UgewoJCQkJCSRzYXZlcG9pbnQgPSAkc2F2ZXBvaW50IC4gJyMnIC4gJHRlbXBfc2F2ZXBvaW50OwoJCQkJfQoJCQkJJHJhd19uYW1lID0gc3Vic3RyKCAkc2V0dGluZ3NbJ25hbWUnXSwgJGxhc3RfaGFzaHBvaW50ICsgMSApOyAvLyBJdGVtIG5hbWUgd2l0aCBzYXZlcG9pbnQgcG9ydGlvbiBzdHJpcHBlZCBvdXQuCgkJCX0KCQkJaWYgKCAkc2F2ZXBvaW50ICE9PSBmYWxzZSApIHsKCQkJCQoJCQkJaWYgKCBpc19hcnJheSggJHNhdmVwb2ludCApICkgeyAvLyBBcnJheSBvZiBkZWZhdWx0cyB3YXMgcGFzc2VkIGluc3RlYWQgb2Ygc2F2ZXBvaW50LgoJCQkJCSRkZWZhdWx0X3ZhbHVlID0gJHNhdmVwb2ludFsgJHJhd19uYW1lIF07CgkJCQkJCgkJCQl9IGVsc2UgeyAvLyBObyBkZWZhdWx0cyBwcm92aWRlZCwgc2VlayB0aGVtIG91dCBpbiBwbHVnaW5zIG9wdGlvbnMgYXJyYXkuCgkJCQkJCgkJCQkJLy8gRGVmYXVsdCB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuIGFmdGVyIGEgcHJvY2VzcygpIHJ1biB3aXRoIHRoZSBsYXRlc3QgZGF0YSBpZiBhIGZvcm0gd2FzIHN1Ym1pdHRlZC4KCQkJCQkkZ3JvdXAgPSBwYl9iYWNrdXBidWRkeTo6Z2V0X2dyb3VwKCAkc2F2ZXBvaW50ICk7CgkJCQkJaWYgKCAkZ3JvdXAgPT09IGZhbHNlICkgewoJCQkJCQkkZGVmYXVsdF92YWx1ZSA9ICcnOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWlmICggaXNzZXQoICRncm91cFsgJHJhd19uYW1lIF0gKSApIHsgLy8gRGVmYXVsdCBpcyBkZWZpbmVkLgoJCQkJCQkJJGRlZmF1bHRfdmFsdWUgPSAkZ3JvdXBbICRyYXdfbmFtZSBdOwoJCQkJCQl9IGVsc2UgeyAvLyBEZWZhdWx0IG5vdCBkZWZpbmVkLgoJCQkJCQkJJGRlZmF1bHRfdmFsdWUgPSAnJzsKCQkJCQkJfQoJCQkJCX0KCQkJCQkKCQkJCX0gLy8gZW5kIGZpbmRpbmcgZGVmYXVsdHMgaW4gcGx1Z2luIG9wdGlvbnMuCgkJCX0gZWxzZSB7IC8vIEN1c3RvbSBtb2RlIHdpdGhvdXQgYSBzYXZlcG9pbnQgcHJvdmlkZWQgc28gbm8gZGVmYXVsdCBzZXQgdW5sZXNzIHBhc3NlZCB0byBhZGRfc2V0dGluZygpLgoJCQkJJGRlZmF1bHRfdmFsdWUgPSAnJzsKCQkJfQoJCX0KCQkKCQkKCQkvLyBQcm9jZXNzIGFkZGluZyBmb3JtIGl0ZW0gZm9yIHRoZSBzZXR0aW5nIGJhc2VkIG9uIHR5cGUuCgkJc3dpdGNoKCAkc2V0dGluZ3NbJ3R5cGUnXSApIHsKCQkJY2FzZSAndGV4dCc6CgkJCQkkdGhpcy0+X2Zvcm0tPnRleHQoICRzZXR0aW5nc1snbmFtZSddLCAkZGVmYXVsdF92YWx1ZSwgJHNldHRpbmdzWydydWxlcyddICk7CgkJCQlicmVhazsKCQkJY2FzZSAncGxhaW50ZXh0JzoKCQkJCSR0aGlzLT5fZm9ybS0+cGxhaW50ZXh0KCAkc2V0dGluZ3NbJ25hbWUnXSwgJGRlZmF1bHRfdmFsdWUgKTsKCQkJCWJyZWFrOwoJCQljYXNlICdjb2xvcic6CgkJCQkkdGhpcy0+X2Zvcm0tPmNvbG9yKCAkc2V0dGluZ3NbJ25hbWUnXSwgJGRlZmF1bHRfdmFsdWUsICRzZXR0aW5nc1sncnVsZXMnXSApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ2hpZGRlbic6CgkJCQkkdGhpcy0+X2Zvcm0tPmhpZGRlbiggJHNldHRpbmdzWyduYW1lJ10sICRkZWZhdWx0X3ZhbHVlLCAkc2V0dGluZ3NbJ3J1bGVzJ10gKTsKCQkJCWJyZWFrOwoJCQljYXNlICd3eXNpd3lnJzoKCQkJCSR0aGlzLT5fZm9ybS0+d3lzaXd5ZyggJHNldHRpbmdzWyduYW1lJ10sICRkZWZhdWx0X3ZhbHVlLCAkc2V0dGluZ3NbJ3J1bGVzJ10sICRzZXR0aW5nc1snc2V0dGluZ3MnXSApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ3RleHRhcmVhJzoKCQkJCSR0aGlzLT5fZm9ybS0+dGV4dGFyZWEoICRzZXR0aW5nc1snbmFtZSddLCAkZGVmYXVsdF92YWx1ZSwgJHNldHRpbmdzWydydWxlcyddICk7CgkJCQlicmVhazsKCQkJY2FzZSAnc2VsZWN0JzoKCQkJCSR0aGlzLT5fZm9ybS0+c2VsZWN0KCAkc2V0dGluZ3NbJ25hbWUnXSwgJHNldHRpbmdzWydvcHRpb25zJ10sICRkZWZhdWx0X3ZhbHVlLCAkc2V0dGluZ3NbJ3J1bGVzJ10gKTsKCQkJCWJyZWFrOwoJCQljYXNlICdwYXNzd29yZCc6CgkJCQkkdGhpcy0+X2Zvcm0tPnBhc3N3b3JkKCAkc2V0dGluZ3NbJ25hbWUnXSwgJGRlZmF1bHRfdmFsdWUsICRzZXR0aW5nc1sncnVsZXMnXSApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ3JhZGlvJzoKCQkJCSR0aGlzLT5fZm9ybS0+cmFkaW8oICRzZXR0aW5nc1snbmFtZSddLCAkc2V0dGluZ3NbJ29wdGlvbnMnXSwgJGRlZmF1bHRfdmFsdWUsICRzZXR0aW5nc1sncnVsZXMnXSApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ2NoZWNrYm94JzoKCQkJCSR0aGlzLT5fZm9ybS0+Y2hlY2tib3goICRzZXR0aW5nc1snbmFtZSddLCAkc2V0dGluZ3NbJ29wdGlvbnMnXSwgJGRlZmF1bHRfdmFsdWUsICRzZXR0aW5nc1sncnVsZXMnXSApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ3N1Ym1pdCc6CgkJCQkkdGhpcy0+X2Zvcm0tPnN1Ym1pdCggJHNldHRpbmdzWyduYW1lJ10sICdERUZBVUxUJyApOyAvLyBTdWJtaXQgYnV0dG9uIHRleHQgaXMgc2V0IGluIGRpc3BsYXlfc2V0dGluZ3MoKSBwYXJhbS4KCQkJCWJyZWFrOwoJCQljYXNlICd0aXRsZSc6CgkJCQkkdGhpcy0+X2Zvcm0tPnRpdGxlKCAkc2V0dGluZ3NbJ25hbWUnXSwgJGRlZmF1bHRfdmFsdWUsICRzZXR0aW5nc1sncnVsZXMnXSApOyAvLyBTdWJtaXQgYnV0dG9uIHRleHQgaXMgc2V0IGluIGRpc3BsYXlfc2V0dGluZ3MoKSBwYXJhbS4KCQkJCWJyZWFrOwoJCQlkZWZhdWx0OgoJCQkJZWNobyAne0Vycm9yOiBVbmtub3duIHNldHRpbmdzIHR5cGUufSc7CgkJCQlicmVhazsKCQl9IC8vIEVuZCBzd2l0Y2goKS4KCQkKCX0gLy8gRW5kIGFkZF9zZXR0aW5nKCkuCgkKCQoJCgkvKglwbHVnaW5idWRkeV9zZXR0aW5ncy0+cHJvY2VzcygpCgkgKgkKCSAqCVByb2Nlc3NlcyB0aGUgZm9ybSBpZiBhcHBsaWNhYmxlIChpZiBpdCB3YXMgc3VibWl0dGVkKS4KCSAqCVRPRE86IFBlcmhhcHMgYWRkIGNhbGxiYWNrIGFiaWxpdHkgdG8gdGhpcz8KCSAqCVRoaXMgbXVzdCBjb21lIGFmdGVyIGFsbCBmb3JtIGVsZW1lbnRzIGhhdmUgYmVlbiBhZGRlZC4KCSAqCVRoaXMgc2hvdWxkIHVzdWFsbHkgaGFwcGVuIGluIHRoZSBjb250cm9sbGVyIHByaW9yIHRvIGxvYWRpbmcgYSB2aWV3LgoJICoJCgkgKglAcmV0dXJuCQludWxsL2FycmF5CQkJCVdoZW4gYSBzYXZlcG9pbnQgd2FzIGRlZmluZWQgaW4gY2xhc3MgY29uc3RydWN0b3Igbm90aGluZyBpcyByZXR1cm5lZC4gKG5vcm1hbCBvcGVyYXRpb24pCgkgKgkJCQkJCQkJCQlXaGVuIHNhdmVwb2ludCA9PT0gZmFsc2UgYW4gYXJyYXkgaXMgcmV0dXJuZWQgZm9yIGN1c3RvbSBmb3JtIHByb2Nlc3NpbmcuCgkgKgkJCQkJCQkJCQlGb3JtYXQ6IGFycmF5KCAnZXJyb3JzJyA9PiBmYWxzZS9hcnJheSwgJ2RhdGEnID0+IGFycmF5KCAnZm9ybV9rZXlzJyA9PiAnZm9ybV92YWx1ZXMnICkgKS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIHByb2Nlc3MoKSB7CgkJaWYgKCAoICcnICE9ICggJGZvcm1fbmFtZSA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJHRoaXMtPl9wcmVmaXggKSApICkgJiYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICR0aGlzLT5fcHJlZml4ICkgPT0gJHRoaXMtPl9mb3JtX25hbWUgKSApIHsgLy8gVGhpcyBmb3JtIHdhcyBpbmRlZWQgc3VibWl0dGVkLiBQUk9DRVNTIElUIQoJCQkvLyBUT0RPOgoJCQkkZXJyb3JzID0gYXJyYXkoKTsKCQkJJF9wb3N0cyA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCgpOwoJCQkvLyBsb29wIHRocm91Z2ggYWxsIHBvc3RlZCB2YXJpYWJsZXMsIGlmIGl0cyBwcmVmaXggbWF0Y2hlcyB0aGlzIGZvcm0ncyBuYW1lIHRoZW4KCQkJZm9yZWFjaCggJF9wb3N0cyBhcyAkcG9zdF9uYW1lID0+ICRwb3N0X3ZhbHVlICkgewoJCQkJaWYgKCBzdWJzdHIoICRwb3N0X25hbWUsIDAsIHN0cmxlbiggJHRoaXMtPl9wcmVmaXggKSApID09ICR0aGlzLT5fcHJlZml4ICkgeyAvLyBUaGlzIHNldHRpbmdzIGZvcm0uCgkJCQkJJGl0ZW1fbmFtZSA9IHN1YnN0ciggJHBvc3RfbmFtZSwgc3RybGVuKCAkdGhpcy0+X3ByZWZpeCApICk7CgkJCQkJaWYgKCAoICRpdGVtX25hbWUgIT0gJycgKSAmJiAoICRpdGVtX25hbWUgIT0gJ3NldHRpbmdzX3N1Ym1pdCcgKSApIHsgLy8gU2tpcCB0aGUgZm9ybSBuYW1lIGlucHV0OyBhbHNvIHNldHRpbmdzIHN1Ym1pdCBidXR0b24gc2luY2UgaXQgaXMgbm90IHJlZ2lzdGVyZWQgdW50aWwgdmlldy4KCQkJCQkJaWYgKCB0cnVlICE9PSAoICR0ZXN0X3Jlc3VsdCA9ICR0aGlzLT5fZm9ybS0+dGVzdCggJGl0ZW1fbmFtZSwgJHBvc3RfdmFsdWUgKSApICkgewoJCQkJCQkJZm9yZWFjaCggJHRoaXMtPl9zZXR0aW5ncyBhcyAkc2V0dGluZ19pbmRleCA9PiAkc2V0dGluZyApIHsKCQkJCQkJCQlpZiAoICRzZXR0aW5nWyd0eXBlJ10gPT0gJ3RpdGxlJyApIHsKCQkJCQkJCQkJY29udGludWU7CgkJCQkJCQkJfQoJCQkJCQkJCWlmICggJHNldHRpbmdbJ25hbWUnXSA9PSAkaXRlbV9uYW1lICkgewoJCQkJCQkJCQkkdGhpcy0+X3NldHRpbmdzWyRzZXR0aW5nX2luZGV4XVsnZXJyb3InXSA9IHRydWU7CgkJCQkJCQkJCSRpdGVtX3RpdGxlID0gJHRoaXMtPl9zZXR0aW5nc1skc2V0dGluZ19pbmRleF1bJ3RpdGxlJ107CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQkJJGVycm9yc1tdID0gJ1ZhbGlkYXRpb24gZmFpbHVyZSBvbiBgJyAuICRpdGVtX3RpdGxlIC4gJ2A6ICcgLiBpbXBsb2RlKCAnICcsICR0ZXN0X3Jlc3VsdCApOwoJCQkJCQkJdW5zZXQoICRfcG9zdHNbJHBvc3RfbmFtZV0gKTsgLy8gUmVtb3ZlcyB0aGlzIGZvcm0gaXRlbSBzbyBpdCB3aWxsIG5vdCBiZSB1cGRhdGVkIGR1cmluZyBzYXZlIGxhdGVyLgoJCQkJCQl9IGVsc2UgeyAvLyBJdGVtIHZhbGlkYXRlZC4gUmVtb3ZlIHByZWZpeCBmb3IgbGF0ZXIgcHJvY2Vzc2luZy4KCQkJCQkJCSRfcG9zdHNbJGl0ZW1fbmFtZV0gPSAkX3Bvc3RzWyRwb3N0X25hbWVdOwoJCQkJCQkJJHRoaXMtPl9mb3JtLT5zZXRfdmFsdWUoICRpdGVtX25hbWUsICRwb3N0X3ZhbHVlICk7IC8vIFNldCB2YWx1ZSB0byBiZSBlcXVhbCB0byBzdWJtaXR0ZWQgdmFsdWUgc28gaWYgb25lIG9yIG1vcmUgaXRlbSBmYWlsZWQgdmFsaWRhdGlvbiB0aGUgZW50aXJlIGZvcm0gaXMgbm90IHdpcGVkIG91dC4gRG9uJ3Qgd2FudCB1c2VyIHRvIGhhdmUgdG8gcmUtZW50ZXIgdmFsaWQgZGF0YS4KCQkJCQkJCXVuc2V0KCAkX3Bvc3RzWyRwb3N0X25hbWVdICk7CgkJCQkJCX0KCQkJCQl9IGVsc2UgeyAvLyBTdWJtaXQgYnV0dG9uLiBDYW4gdW5zZXQgaXQgdG8gY2xlYW4gdXAgYXJyYXkgZm9yIGxhdGVyLgoJCQkJCQl1bnNldCggJF9wb3N0c1skcG9zdF9uYW1lXSApOwoJCQkJCX0KCQkJCX0gZWxzZSB7IC8vIE5vdCBmb3IgdGhpcyBmb3JtLiBDYW4gdW5zZXQgaXQgdG8gY2xlYW4gdXAgYXJyYXkgZm9yIGxhdGVyLgoJCQkJCXVuc2V0KCAkX3Bvc3RzWyRwb3N0X25hbWVdICk7CgkJCQl9CgkJCX0KCQkJCgkJCS8vIFByb2Nlc3MhCgkJCQoJCQkKCQkJLy8gT25seSBzYXZlIGlmIGluIG5vcm1hbCBzZXR0aW5ncyBtb2RlOyBpZiBzYXZlcG9pbnQgPT09IGZhbHNlIG5vIHNhdmluZyBoZXJlLgoJCQlpZiAoICggJHRoaXMtPl9zYXZlcG9pbnQgPT09IGZhbHNlICkgfHwgaXNfYXJyYXkoICR0aGlzLT5fc2F2ZXBvaW50ICkgKSB7CgkJCQkvL2ZvcmVhY2goICRfcG9zdHMgYXMgJHBvc3RfbmFtZSA9PiAkcG9zdF92YWx1ZSApIHsgLy8gVmFsaWRhdGlvbiBhYm92ZSBzaG91bGQgaGF2ZW8gb25seSBsZWZ0IGl0ZW1zIGZvciB0aGlzIGZvcm0uIFN0cmlwIHByZWZpeGVzIGJlZm9yZSBwYXNzaW5nIG9uLgoJCQkJLy8JJHBvc3RfbmFtZSA9IHN1YnN0ciggJHBvc3RfbmFtZSwgc3RybGVuKCAkdGhpcy0+X3ByZWZpeCApICk7CgkJCQkvL30KCQkJCSRyZXR1cm4gPSBhcnJheSgKCQkJCQkJCQknZXJyb3JzJwk9PgkJJGVycm9ycywKCQkJCQkJCQknZGF0YScJCT0+CQkkX3Bvc3RzLAoJCQkJCQkJKTsKCQkJCXJldHVybiAkcmV0dXJuOwoJCQl9IGVsc2UgeyAvLyBOb3JtYWwgc2V0dGluZ3Mgc2luY2Ugc2F2ZXBvaW50ICE9PSBmYWxzZS4gU2F2ZSBpbnRvIHNhdmVwb2ludCEKCQkJCQoJCQkJaWYgKCBjb3VudCggJGVycm9ycyApID4gMCApIHsgLy8gRXJyb3JzLgoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yIHZhbGlkYXRpbmcgb25lIG9yIG1vcmUgZmllbGRzIGFzIGluZGljYXRlZCBiZWxvdy4gRXJyb3Iocyk6PGJyPicgLiBpbXBsb2RlKCAnPGJyPicsICRlcnJvcnMgKSwgdHJ1ZSApOwoJCQkJfQoJCQkJLy8gUHJlcGFyZSBzYXZlcG9pbnQuCgkJCQlpZiAoICR0aGlzLT5fc2F2ZXBvaW50ICE9ICcnICkgewoJCQkJCSRzYXZlcG9pbnRfcm9vdCA9ICR0aGlzLT5fc2F2ZXBvaW50IC4gJyMnOwoJCQkJfSBlbHNlIHsKCQkJCQkkc2F2ZXBvaW50X3Jvb3QgPSAnJzsKCQkJCX0KCQkJCQoJCQkJLy8gVGhlIGhhcmQgd29yay4KCQkJCWZvcmVhY2goICRfcG9zdHMgYXMgJHBvc3RfbmFtZSA9PiAkcG9zdF92YWx1ZSApIHsgLy8gTG9vcCB0aHJvdWdoIGFsbCBwb3N0IGl0ZW1zIChub3QgYWxsIG1heSBiZSBvdXIgZm9ybSkuIEBzZWUgODM0Mjk1OTQ4Mzc1MzQ5ODcuCgkJCQkJLy9pZiAoIHN1YnN0ciggJHBvc3RfbmFtZSwgMCwgc3RybGVuKCAkdGhpcy0+X3ByZWZpeCApICkgPT0gJHRoaXMtPl9wcmVmaXggKSB7IC8vIElmIHByZWZpeCBtYXRjaGVzLCBpdHMgdGhpcyBmb3JtLgoJCQkJCQkvLyRwb3N0X25hbWUgPSBzdWJzdHIoICRwb3N0X25hbWUsIHN0cmxlbiggJHRoaXMtPl9wcmVmaXggKSApOyAvLyBTZXQgc3RyaXBwZWQgcHJlZml4LgoJCQkJCQkvL2lmICggJHBvc3RfbmFtZSAhPSAnJyApIHsgLy8gU2tpcHMgdGhlIGVtcHR5IHByZWZpeCBuYW1lIHdlIHVzZWQgZm9yIHZlcmlmeWluZyBmb3JtLiBAc2VlIDgzNDI5NTk0ODM3NTM0OTg3LgoJCQkJCQkJCgkJCQkJCQkvLyBVcGRhdGUgZm9ybSBpdGVtIHZhbHVlLgoJCQkJCQkJJHRoaXMtPl9mb3JtLT5zZXRfdmFsdWUoICRwb3N0X25hbWUsICRwb3N0X3ZhbHVlICk7CgkJCQkJCQkKCQkJCQkJCS8vIEZyb20gb2xkIHNhdmVfc2V0dGluZ3MoKToKCQkJCQkJCSRzYXZlcG9pbnRfc3Vic2VjdGlvbiA9ICZwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnM7CgkJCQkJCQkkc2F2ZXBvaW50X2xldmVscyA9IGV4cGxvZGUoICcjJywgJHNhdmVwb2ludF9yb290IC4gJHBvc3RfbmFtZSApOwoJCQkJCQkJZm9yZWFjaCAoICRzYXZlcG9pbnRfbGV2ZWxzIGFzICRzYXZlcG9pbnRfbGV2ZWwgKSB7CgkJCQkJCQkJJHNhdmVwb2ludF9zdWJzZWN0aW9uID0gJiRzYXZlcG9pbnRfc3Vic2VjdGlvbnskc2F2ZXBvaW50X2xldmVsfTsKCQkJCQkJCX0KCQkJCQkJCS8vIEFwcGx5IHNldHRpbmdzLgoJCQkJCQkJJHNhdmVwb2ludF9zdWJzZWN0aW9uID0gc3RyaXBzbGFzaGVzX2RlZXAoICRwb3N0X3ZhbHVlICk7IC8vIFJlbW92ZSBXb3JkUHJlc3MnIG1hZ2ljLXF1b3Rlcy1ub25zZW5zZS4KCQkJCQkJLy99CgkJCQkJLy99CgkJCQl9CgkJCQkKCQkJCS8vIEFkZCBhIG5vdGUgdG8gdGhlIHNhdmUgYWxlcnQgdGhhdCBzb21lIHZhbHVlcyBhcmUgc2tpcHBlZCBkdWUgdG8gZXJyb3JzLgoJCQkJJGVycm9yX25vdGUgPSAnJzsKCQkJCWlmICggY291bnQoICRlcnJvcnMgKSA+IDAgKSB7CgkJCQkJJGVycm9yX25vdGUgPSAnIE9uZSBvciBtb3JlIGZpZWxkcyBza2lwcGVkIGR1ZSB0byBlcnJvci4nOwoJCQkJfQoJCQkJCgkJCQlwYl9iYWNrdXBidWRkeTo6c2F2ZSgpOwoJCQkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCBfXyggJ1NldHRpbmdzIHNhdmVkLicgLiAkZXJyb3Jfbm90ZSwgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsKCQkJCQoJCQkJJHJldHVybiA9IGFycmF5KAoJCQkJCQkJCSdlcnJvcnMnCT0+CQkkZXJyb3JzLAoJCQkJCQkJCSdkYXRhJwkJPT4JCSRfcG9zdHMsCgkJCQkJCQkpOwoJCQkJcmV0dXJuICRyZXR1cm47CgkJCQkvL30gLy8gZW5kIG5vIGVycm9ycy4KCQkJfSAvLyBFbmQgaWYgc2F2ZXBvaW50ICE9PT0gZmFsc2UuCgkJfSAvLyBlbmQgc3VibWl0dGVkIGZvcm0uCgkJCgkJCgl9IC8vIEVuZCBwcm9jZXNzKCkuCgkKCQoJCgkvKglwbHVnaW5idWRkeV9zZXR0aW5ncy0+ZGlzcGxheV9zZXR0aW5ncygpCgkgKgkKCSAqCURpc3BsYXlzIGFsbCB0aGUgcmVnaXN0ZXJlZCBzZXR0aW5ncyBpbiB0aGlzIG9iamVjdC4gRW50aXJlIGZvcm0gYW5kIEhUTUwgaXMgZWNobydkIG91dC4KCSAqCUBzZWUgcGx1Z2luYnVkZHlfc2V0dGluZ3MtPmdldF9zZXR0aW5ncygpCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCQkkc3VibWl0X2J1dHRvbl90aXRsZQkJVGV4dCB0byBkaXNwbGF5IGluIHRoZSBzdWJtaXQgYnV0dG9uLgoJICoJQHBhcmFtCQlzdHJpbmcJCSRiZWZvcmUJCQkJCQlDb250ZW50IGJlZm9yZSBzdWJtaXQgYWZ0ZXIuCgkgKglAcGFyYW0JCXN0cmluZwkJJGFmdGVyCQkJCQkJQ29udGVudCBhZnRlciBzdWJtaXQgYnV0dG9uLgoJICoJQHJldHVybgkJbnVsbAoJICovCglwdWJsaWMgZnVuY3Rpb24gZGlzcGxheV9zZXR0aW5ncyggJHN1Ym1pdF9idXR0b25fdGl0bGUsICRiZWZvcmUgPSAnJywgJGFmdGVyID0gJycsICRzYXZlX2J1dHRvbl9jbGFzcyA9ICcnICkgewoJCWVjaG8gJHRoaXMtPmdldF9zZXR0aW5ncyggJHN1Ym1pdF9idXR0b25fdGl0bGUsICRiZWZvcmUsICRhZnRlciwgJHNhdmVfYnV0dG9uX2NsYXNzICk7Cgl9IC8vIEVuZCBkaXNwbGF5X3NldHRpbmdzKCkuCgkKCQoJCgkvKglwbHVnaW5idWRkeV9zZXR0aW5ncy0+Z2V0X3NldHRpbmdzKCkKCSAqCQoJICoJUmV0dXJucyBhbGwgdGhlIHJlZ2lzdGVyZWQgc2V0dGluZ3MgaW4gdGhpcyBvYmplY3QuIEVudGlyZSBmb3JtIGFuZCBIVE1MIGlzIHJldHVybmVkLgoJICoJQHNlZSBwbHVnaW5idWRkeV9zZXR0aW5ncy0+ZGlzcGxheV9zZXR0aW5ncygpCgkgKglyYWRpbyBidXR0b24gYWRkaXRpb25hbCBvcHRpb25zOiAgb3JpZW50YXRpb24gWyB2ZXJ0aWNhbCAvIGhvcml6b250YWwgXQoJICoJCgkgKglAcGFyYW0JCXN0cmluZwkJJHN1Ym1pdF9idXR0b25fdGl0bGUJCVRleHQgdG8gZGlzcGxheSBpbiB0aGUgc3VibWl0IGJ1dHRvbi4KCSAqCUBwYXJhbQkJc3RyaW5nCQkkYmVmb3JlCQkJCQkJQ29udGVudCBiZWZvcmUgc3VibWl0IGFmdGVyLgoJICoJQHBhcmFtCQlzdHJpbmcJCSRhZnRlcgkJCQkJCUNvbnRlbnQgYWZ0ZXIgc3VibWl0IGJ1dHRvbi4KCSAqCUByZXR1cm4JCXN0cmluZwkJCQkJCQkJCVJldHVybnMgZW50aXJlIHN0cmluZyB3aXRoIGV2ZXJ5dGhpbmcgaW4gaXQgdG8gZGlzcGxheS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9zZXR0aW5ncyggJHN1Ym1pdF9idXR0b25fdGl0bGUsICRiZWZvcmUgPSAnJywgJGFmdGVyID0gJycsICRzYXZlX2J1dHRvbl9jbGFzcyA9ICcnICkgewoJCSRmaXJzdF90aXRsZSA9IHRydWU7IC8vIGZpcnN0IHRpdGxlJ3MgQ1NTIHRvcCBwYWRkaW5nIGRpZmZlcnMgc28gbXVzdCB0cmFjay4KCQkKCQkkcmV0dXJuID0gJHRoaXMtPl9mb3JtLT5zdGFydCgpOwoJCSRyZXR1cm4gLj0gJzx0YWJsZSBjbGFzcz0iZm9ybS10YWJsZSI+JzsgLy8gc3R5bGU9Im1heC13aWR0aDogNjc1cHg7Ij4nOwoJCWZvcmVhY2ggKCAkdGhpcy0+X3NldHRpbmdzIGFzICRzZXR0aW5ncyApIHsKCQkJJHRoX2NzcyA9ICcnOwoJCQkKCQkJaWYgKCAkc2V0dGluZ3NbJ3RpdGxlJ10gPT0gJycgKSB7IC8vIGJsYW5rIHRpdGxlIHNvIGhpZGUgbGVmdCBjb2x1bW4uCgkJCQkkdGhfY3NzIC49ICcgZGlzcGxheTogbm9uZTsnOwoJCQl9CgkJCQoJCQlpZiAoICRzZXR0aW5nc1sndHlwZSddID09ICd0aXRsZScgKSB7IC8vIFRpdGxlIGl0ZW0uCgkJCQlpZiAoICRmaXJzdF90aXRsZSA9PT0gdHJ1ZSApIHsgLy8gRmlyc3QgdGl0bGUgaW4gbGlzdC4KCQkJCQkkcmV0dXJuIC49ICc8dHIgc3R5bGU9ImJvcmRlcjogMDsiPjx0aCBjb2xzcGFuPSIyIiBzdHlsZT0iYm9yZGVyOiAwOyBwYWRkaW5nLXRvcDogMDsgcGFkZGluZy1ib3R0b206IDA7IiBjbGFzcz0iJyAuICRzZXR0aW5nc1sncm93X2NsYXNzJ10gLiAnIj48aDMgY2xhc3M9InRpdGxlIic7CgkJCQkJJHJldHVybiAuPSAnIHN0eWxlPSJtYXJnaW4tdG9wOiAwOyBtYXJnaW4tYm90dG9tOiAwLjVlbTsiJzsKCQkJCQkkZmlyc3RfdGl0bGUgPSBmYWxzZTsKCQkJCX0gZWxzZSB7IC8vIFN1YnNlcXVlbnQgdGl0bGVzLgoJCQkJCSRyZXR1cm4gLj0gJzx0ciBzdHlsZT0iYm9yZGVyOiAwOyI+PHRoIGNvbHNwYW49IjIiIHN0eWxlPSJib3JkZXI6IDA7IiBjbGFzcz0iJyAuICRzZXR0aW5nc1sncm93X2NsYXNzJ10gLiAnIj48aDMgY2xhc3M9InRpdGxlIic7CgkJCQkJJHJldHVybiAuPSAnIHN0eWxlPSJtYXJnaW46IDAuNWVtIDA7Iic7CgkJCQl9CgkJCQkKCQkJCSRyZXR1cm4gLj0gJz4nIC4gJHNldHRpbmdzWyd0aXRsZSddIC4gJzwvaDM+PC90aD4nOwoJCQl9IGVsc2VpZiAoICRzZXR0aW5nc1sndHlwZSddID09ICdoaWRkZW4nICkgeyAvLyBoaWRkZW4gZm9ybSBpdGVtLiBubyB0aXRsZS4KCQkJCSRyZXR1cm4gLj0gJHRoaXMtPl9mb3JtLT5nZXQoICRzZXR0aW5nc1snbmFtZSddLCAkc2V0dGluZ3NbJ2NzcyddLCAkc2V0dGluZ3NbJ2NsYXNzZXMnXSApOwoJCQl9IGVsc2UgeyAvLyBOb3JtYWwgaXRlbS4KCQkJCSRyZXR1cm4gLj0gJzx0ciBjbGFzcz0iJyAuICRzZXR0aW5nc1sncm93X2NsYXNzJ10gLiAnIj4nOwoJCQkJJHJldHVybiAuPSAnPHRoIHNjb3BlPSJyb3ciIGNsYXNzPSInIC4gJHNldHRpbmdzWydyb3dfY2xhc3MnXSAuICciJzsKCQkJCWlmICggJHRoaXMtPl9jdXN0b21fdGl0bGVfd2lkdGggIT0gJycgKSB7CgkJCQkJJHJldHVybiAuPSAnIHN0eWxlPSJ3aWR0aDogJyAuICR0aGlzLT5fY3VzdG9tX3RpdGxlX3dpZHRoIC4gJ3B4OyAnIC4gJHRoX2NzcyAuICciJzsKCQkJCX0gZWxzZSB7CgkJCQkJJHJldHVybiAuPSAnIHN0eWxlPSInIC4gJHRoX2NzcyAuICciJzsKCQkJCX0KCQkJCSRyZXR1cm4gLj0gJz4nOwoJCQkJJHJldHVybiAuPSAkc2V0dGluZ3NbJ3RpdGxlJ107CgkJCQlpZiAoIGlzc2V0KCAkc2V0dGluZ3NbJ3RpcCddICkgJiYgKCAkc2V0dGluZ3NbJ3RpcCddICE9ICcnICkgKSB7CgkJCQkJJHJldHVybiAuPSBwYl9iYWNrdXBidWRkeTo6JHVpLT50aXAoICRzZXR0aW5nc1sndGlwJ10sICcnLCBmYWxzZSApOwoJCQkJfQoJCQkJJHJldHVybiAuPSAnPC90aD4nOwoJCQkJaWYgKCAkc2V0dGluZ3NbJ3R5cGUnXSA9PSAndGl0bGUnICkgeyAvLyBFeHRlbmQgd2lkdGggZnVsbCBsZW5ndGggZm9yIHRpdGxlIGl0ZW0uCgkJCQkJJHJldHVybiAuPSAnIGNvbHNwYW49IjIiJzsKCQkJCX0KCQkJCQoJCQkJJHJldHVybiAuPSAnPHRkIGNsYXNzPSInIC4gJHNldHRpbmdzWydyb3dfY2xhc3MnXSAuICciJzsKCQkJCWlmICggJHNldHRpbmdzWyd0aXRsZSddID09ICcnICkgeyAvLyBObyB0aXRsZSBzbyBoaWRlIGxlZnQgY29sdW1uLgoJCQkJCSRyZXR1cm4gLj0gJyBjb2xzcGFuPSIyIic7CgkJCQl9CgkJCQkkcmV0dXJuIC49ICc+JzsKCQkJCSRyZXR1cm4gLj0gJHNldHRpbmdzWydiZWZvcmUnXTsKCQkJCWlmICggaXNzZXQoICRzZXR0aW5nc1snZXJyb3InXSApICYmICggJHNldHRpbmdzWydlcnJvciddID09PSB0cnVlICkgKSB7CgkJCQkJJHNldHRpbmdzWydjc3MnXSAuPSAnYm9yZGVyOiAxcHggZGFzaGVkIHJlZDsnOwoJCQkJfQoJCQkJJHJldHVybiAuPSAkdGhpcy0+X2Zvcm0tPmdldCggJHNldHRpbmdzWyduYW1lJ10sICRzZXR0aW5nc1snY3NzJ10sICRzZXR0aW5nc1snY2xhc3NlcyddLCAkc2V0dGluZ3NbJ29yaWVudGF0aW9uJ10gKTsKCQkJCSRyZXR1cm4gLj0gJHNldHRpbmdzWydhZnRlciddOwoJCQkJJHJldHVybiAuPSAnPC90ZD4nOwoJCQkJJHJldHVybiAuPSAnPC90cj4nOwoJCQl9CgkJCQoJCQkKCQkJCgkJCS8qCgkJCSRmb3JtLT5hZGRfc2V0dGluZyggYXJyYXkoCgkJCQkndHlwZScJCT0+CQkndGV4dCcsCgkJCQknbmFtZScJCT0+CQknaW1hZ2Vfd2lkdGgnLAoJCQkJJ3RpdGxlJwkJPT4JCSdJbWFnZSBXaWR0aCcsCgkJCQkndGlwJwkJPT4JCSdUaGlzIGNvbnRyb2xzIHRoZSBzaXplIG9mIHRoZSBpbWFnZXMgaW4gdGhlIENhcm91c2VsLiBJbWFnZXMgd2lsbCBiZSBnZW5lcmF0ZWQgZnJvbSB0aGUgb3JpZ2luYWwgaW1hZ2VzIHVwbG9hZGVkLiBJbWFnZXMgd2lsbCBub3QgYmUgdXBzY2FsZWQgbGFyZ2VyIHRoYW4gdGhlIG9yaWdpbmFscy4gWW91IG1heSBjaGFuZ2UgdGhpcyBhdCBhbnkgdGltZS4nLAoJCQkJJ2NzcycJCT0+CQkndGV4dC1hbGlnbjogcmlnaHQ7JywKCQkJCSdhZnRlcicJCT0+CQkncHgnLAoJCQkJJ3J1bGVzJwkJPT4JCSdyZXF1aXJlZCcsCgkJCSkgKTsKCQkJKi8KCQl9CgkJJHJldHVybiAuPSAnPC90YWJsZT48YnI+JzsKCgkJLy8gU3VibWl0IGJ1dHRvbgoJCSRyZXR1cm4gLj0gJGJlZm9yZTsKCQkkcmV0dXJuIC49ICR0aGlzLT5fZm9ybS0+c3VibWl0KCAnc2V0dGluZ3Nfc3VibWl0JywgJHN1Ym1pdF9idXR0b25fdGl0bGUsICRzYXZlX2J1dHRvbl9jbGFzcyApOwoJCSRyZXR1cm4gLj0gJHRoaXMtPl9mb3JtLT5nZXQoICdzZXR0aW5nc19zdWJtaXQnLCAnJywgJHNhdmVfYnV0dG9uX2NsYXNzICk7IC8vLCAkc2V0dGluZ3NbJ25hbWUnXSwgJHNldHRpbmdzWydjbGFzc2VzJ10gKTsKCQkkcmV0dXJuIC49ICRhZnRlcjsKCgkJJHJldHVybiAuPSAkdGhpcy0+X2Zvcm0tPmVuZCgpOwoKCQlyZXR1cm4gJHJldHVybjsKCX0gLy8gRW5kIGdldF9zZXR0aW5ncygpLgoJCgkKCQoJLyoJY2xlYXJfdmFsdWVzKCkKCSAqCQoJICoJQ2xlYXJzIHRoZSB2YWx1ZSBvZiBhbGwgZm9ybSBpdGVtcyBzZXR0aW5nIHRoZSB2YWx1ZSB0byBhbiBlbXB0eSBzdHJpbmcgJycuCgkgKgkKCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGNsZWFyX3ZhbHVlcygpIHsKCQkkdGhpcy0+X2Zvcm0tPmNsZWFyX3ZhbHVlcygpOwoJCQoJCXJldHVybjsKCX0gLy8gRW5kIGNsZWFyX3ZhbHVlcygpLgoJCgkKCQoJLyoJc2V0X3ZhbHVlKCkKCSAqCQoJICoJUmVwbGFjZSB0aGUgdmFsdWUgb2YgYSBmb3JtIGl0ZW0uCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCSRpdGVtX25hbWUJCU5hbWUgb2YgdGhlIGZvcm0gc2V0dGluZyBpdGVtIHRvIHVwZGF0ZS4KCSAqCUBwYXJhbQkJc3RyaW5nCSR2YWx1ZQkJCVZhbHVlIHRvIHNldCB0aGUgaXRlbSB0by4KCSAqCUByZXR1cm4JCW51bGwKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldF92YWx1ZSggJGl0ZW1fbmFtZSwgJHZhbHVlICkgewoJCSR0aGlzLT5fZm9ybS0+c2V0X3ZhbHVlKCAkaXRlbV9uYW1lLCAkdmFsdWUgKTsKCQlyZXR1cm47Cgl9IC8vIEVuZCBzZXRfdmFsdWUoKS4KCQoJCn0gLy8gRW5kIGNsYXNzIHBsdWdpbmJ1ZGR5X3NldHRpbmdzLgoKCgo/Pg==
###PACKDATA,FILE_END,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php
###PACKDATA,FILE_START,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php

###PACKDATA,FILE_END,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php
###PACKDATA,FILE_START,/pluginbuddy/css/admin.css,importbuddy/pluginbuddy/css/admin.css
I3Rvb2x0aXAgewoJcG9zaXRpb246IGFic29sdXRlOwoJei1pbmRleDogOTk5OTk5OwoJYm9yZGVyOiAycHggc29saWQgI0RGREZERjsKCXBhZGRpbmc6IDEycHg7CgltYXgtd2lkdGg6IDMwMHB4OwoJCglib3JkZXItcmFkaXVzOiA4cHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDhweDsKCS1tb3otYm9yZGVyLXJhZGl1czogOHB4OwoJCgktd2Via2l0LWJveC1zaGFkb3c6IDZweCA2cHggMjVweCAxNXB4IHJnYmEoMCwgMCwgMCwgLjA4KTsKCS1tb3otYm94LXNoYWRvdzogNnB4IDZweCAyNXB4IDE1cHggcmdiYSgwLCAwLCAwLCAuMDgpOwoJYm94LXNoYWRvdzogNnB4IDZweCAyNXB4IDE1cHggcmdiYSgwLCAwLCAwLCAuMDgpOyAKCQoJYmFja2dyb3VuZDogI2VkZWRlZDsKCWJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KHRvcCwgI2VkZWRlZCAwJSwgI2ZmZmZmZiAxMDAlKTsKCWJhY2tncm91bmQ6IC13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGNvbG9yLXN0b3AoMCUsI2VkZWRlZCksIGNvbG9yLXN0b3AoMTAwJSwjZmZmZmZmKSk7CgliYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0b3AsICNlZGVkZWQgMCUsI2ZmZmZmZiAxMDAlKTsKCWJhY2tncm91bmQ6IC1vLWxpbmVhci1ncmFkaWVudCh0b3AsICNlZGVkZWQgMCUsI2ZmZmZmZiAxMDAlKTsKCWJhY2tncm91bmQ6IC1tcy1saW5lYXItZ3JhZGllbnQodG9wLCAjZWRlZGVkIDAlLCNmZmZmZmYgMTAwJSk7CgliYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG9wLCAjZWRlZGVkIDAlLCNmZmZmZmYgMTAwJSk7CglmaWx0ZXI6IHByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudCggc3RhcnRDb2xvcnN0cj0nI2VkZWRlZCcsIGVuZENvbG9yc3RyPScjZmZmZmZmJyxHcmFkaWVudFR5cGU9MCApOwp9CiN0b29sdGlwIGgzLCAjdG9vbHRpcCBkaXYgeyBtYXJnaW46IDA7IH0KLnBsdWdpbmJ1ZGR5LW5vZGVjb3IgYSB7Cgl0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KLnBsdWdpbmJ1ZGR5X3RpcCBpbWcgewoJdmVydGljYWwtYWxpZ246IC0ycHg7Cn0KLyogU2Nyb2xsYWJsZSB0ZXh0IGZvciBkaXNwbGF5aW5nIGRlZmF1bHQgZGlycywgZXRjLiAqLwoucGJfc2Nyb2xsIHsKCWRpc3BsYXk6IGlubGluZS1ibG9jazsKCW92ZXJmbG93LXg6IHNjcm9sbDsKCXdoaXRlLXNwYWNlOiBub3dyYXA7Cn0KLnBiX3Njcm9sbDo6LXdlYmtpdC1zY3JvbGxiYXIgewoJLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOwoJd2lkdGg6IDExcHg7CgloZWlnaHQ6IDExcHg7Cn0KLnBiX3Njcm9sbDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgewoJYm9yZGVyLXJhZGl1czogOHB4OwoJYm9yZGVyOiAycHggc29saWQgd2hpdGU7IC8qIHNob3VsZCBtYXRjaCBiYWNrZ3JvdW5kLCBjYW4ndCBiZSB0cmFuc3BhcmVudCAqLwoJYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAuMSk7Cn0KLnBiX3Njcm9sbDo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyewoJYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuMCk7Cn0KCgpoMy50aXRsZSB7Cglmb250LXdlaWdodDogNjAwOwp9Ci5wYl9mb3JtIHRoLCBoMyB7Cglmb250LXdlaWdodDogbm9ybWFsOwp9Cgp0ZC5wYl9kcmFnaGFuZGxlIHsKCWN1cnNvcjogbW92ZTsKCXRleHQtYWxpZ246IGNlbnRlcjsKCXZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Cn0KCnRyLnREbkRfd2hpbGVEcmFnIHRkLHRyLnREbkRfd2hpbGVEcmFnIHRoewoJYmFja2dyb3VuZDogI0VFRUVFRTsKCWJvcmRlci10b3A6IDFweCBzb2xpZCAjQkJCQkJCICFpbXBvcnRhbnQ7Cglib3JkZXItYm90dG9tOiAxcHggc29saWQgI0JCQkJCQiAhaW1wb3J0YW50OwoJcGFkZGluZy10b3A6IDJweDsKfQoucGJfZGVidWcgewoJZmxvYXQ6IHJpZ2h0OwoJYmFja2dyb3VuZDogI0ZGODk4OTsKCWJvcmRlcjogMnB4IHNvbGlkIHJlZDsKCXBhZGRpbmc6IDhweDsKCXdpZHRoOiA0MHB4OwoJcG9zaXRpb246IGFic29sdXRlOwoJcmlnaHQ6IDA7Cgl6LWluZGV4OiA5MDAwOwp9Ci5wYl9kZWJ1Z19zaG93IHsKCWN1cnNvcjogcG9pbnRlcjsKCWZsb2F0OiByaWdodDsKfQoucGJfZGVidWdfaGlkZSB7CgljdXJzb3I6IHBvaW50ZXI7CglkaXNwbGF5OiBub25lOwoJZmxvYXQ6IHJpZ2h0Owp9Ci5wYl9kZWJ1Z19jb250ZW50IHsKCWRpc3BsYXk6IG5vbmU7Cn0KLnBiX2RlYnVnIHRleHRhcmVhIHsKCXdpZHRoOiAxMDAlOwoJaGVpZ2h0OiAxMDBweDsKfQoKLnBiX2h0aXRsZSB7Cglmb250LXNpemU6IDE4cHg7Cglib3JkZXItYm90dG9tOiAxcHggc29saWQgI0RGREZERjsKCXBhZGRpbmctYm90dG9tOiA0cHg7Cn0KCi5wYl90b2dnbGUgewoJY3Vyc29yOiBwb2ludGVyOwp9Ci5wYl90b2dnbGVkIHsKCWRpc3BsYXk6IG5vbmU7Cglib3JkZXI6IDFweCBzb2xpZCAjQ0NDQ0NDOwoJbWFyZ2luOiA0cHg7CglwYWRkaW5nOiA4cHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDsKCS1tb3otYm9yZGVyLXJhZGl1czogNHB4OwoJYm9yZGVyLXJhZGl1czogNHB4Owp9CgojcGJfYmFja3VwYnVkZHlfc3RhdHVzIHsKCXdpZHRoOiAxMDAlOwoJaGVpZ2h0OiAyMDBweDsKfQoKCi5iYWNrdXBidWRkeS10YWItYmxvY2tzIC5iYWNrdXBidWRkeS10YWIgewoJZGlzcGxheTogbm9uZTsKCXBhZGRpbmctdG9wOiAyNXB4Owp9Ci5iYWNrdXBidWRkeS10YWItYmxvY2tzIC5iYWNrdXBidWRkeS10YWI6Zmlyc3QtY2hpbGQgewoJZGlzcGxheTogYmxvY2s7Cn0KCgoKCgovKiBUYWJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoudWktdGFicyB7Cglib3JkZXItdG9wOiAxcHggc29saWQgI0RGREZERjsgbWFyZ2luLXRvcDogMjBweDsgfSAvKiBwYWRkaW5nOiAuMmVtOyB6b29tOiAxOyAqLwoudWktdGFicyAudWktdGFicy1uYXYgeyB6LWluZGV4OiAxNTsgbGlzdC1zdHlsZTogbm9uZTsgcG9zaXRpb246IHJlbGF0aXZlOyBwYWRkaW5nOiAwcHggMHB4IDBweDsgbWFyZ2luLXRvcDogLTI4cHg7IG1hcmdpbi1sZWZ0OiAxMHB4OyB9Ci51aS10YWJzIC51aS10YWJzLW5hdiBsaSB7IG1hcmdpbjogLTEycHggN3B4IC0xcHggMHB4OyBwb3NpdGlvbjogcmVsYXRpdmU7IGZsb2F0OiBsZWZ0OyBwYWRkaW5nOiAwOyB0ZXh0LWFsaWduOiBjZW50ZXI7IH0KLnVpLXRhYnMgLnVpLXRhYnMtbmF2IGxpIGEgewoJYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsgLyogI0VERURFRCBJbmFjdGl2ZSBiZy4gKi8KCWhlaWdodDogMjdweDsKCWZsb2F0OiBsZWZ0OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IHBhZGRpbmctbGVmdDogMTVweDsgcGFkZGluZy1yaWdodDogMTVweDsKCS1tb3otYm9yZGVyLXJhZGl1czogM3B4IDNweCAwcHggMHB4OwoJLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAzcHggM3B4IDBweCAwcHg7Cglib3JkZXItcmFkaXVzOiAzcHggM3B4IDBweCAwcHg7Cglib3JkZXI6IDFweCBzb2xpZCAjZGZkZmRmOyBvdXRsaW5lOiBub25lOyBwYWRkaW5nLXRvcDogNXB4OwoJYm9yZGVyLWJvdHRvbTogMHB4OwoJZGlzcGxheTogaW5saW5lLWJsb2NrOwoJcGFkZGluZy10b3A6IDEwcHg7Cglmb250LXdlaWdodDogMjAwOwoJZm9udC1zaXplOiAyMHB4OwoJZm9udC1mYW1pbHk6ICJIZWx2ZXRpY2FOZXVlLUxpZ2h0IiwiSGVsdmV0aWNhIE5ldWUgTGlnaHQiLCJIZWx2ZXRpY2EgTmV1ZSIsc2Fucy1zZXJpZjsKCS8vY29sb3I6ICM0NjQ2NDYgIWltcG9ydGFudDsKCWNvbG9yOiAjYWFhOwoJCn0KLnVpLXRhYnMgLnVpLXRhYnMtbmF2IC51aS10YWJzLWFjdGl2ZSB7CgltYXJnaW4tdG9wOiAtMTJweDsKfQoudWktdGFicyAudWktdGFicy1uYXYgLnVpLXRhYnMtYWN0aXZlIGEgewoJYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKCWhlaWdodDogMjhweDsKCWJvcmRlci1jb2xvcjogI0NDQzsKCWNvbG9yOiAjNDY0NjQ2Owp9Ci51aS10YWJzIC51aS10YWJzLW5hdiAudWktdGFicy1hY3RpdmUgYTpob3ZlciB7CgliYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwoJLy9jdXJzb3I6IGRlZmF1bHQ7CgkvL2JvcmRlci1jb2xvcjogI0NDQzsKfQoKLnVpLXRhYnMgLnVpLXRhYnMtbmF2IGxpIGE6aG92ZXIgewoJLy9iYWNrZ3JvdW5kLWNvbG9yOiAjREZERkRGOwoJYm9yZGVyLWNvbG9yOiAjQ0NDOwoJY29sb3I6ICNkNTRlMjE7Cn0KLnVpLXRhYnMgLnVpLXRhYnMtbmF2IGxpLnVpLXRhYnMtc2VsZWN0ZWQgeyAgfSAvKiBwYWRkaW5nLWJvdHRvbTogMHB4OyAqLwoudWktdGFicyAudWktdGFicy1uYXYgbGkudWktdGFicy1zZWxlY3RlZCBhLCAudWktdGFicyAudWktdGFicy1uYXYgbGkudWktc3RhdGUtZGlzYWJsZWQgYSwgLnVpLXRhYnMgLnVpLXRhYnMtbmF2IGxpLnVpLXN0YXRlLXByb2Nlc3NpbmcgYSB7CgloZWlnaHQ6IDI4cHg7IGN1cnNvcjogdGV4dDsKCWJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7IC8vIEY5RjlGOQoJYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNGRkZGRkY7Cn0KCi51aS10YWJzIC51aS10YWJzLW5hdiBsaSBhLCAudWktdGFicy51aS10YWJzLWNvbGxhcHNpYmxlIC51aS10YWJzLW5hdiBsaS51aS10YWJzLXNlbGVjdGVkIGEgeyBjdXJzb3I6IHBvaW50ZXI7IH0gLyogZmlyc3Qgc2VsZWN0b3IgaW4gZ3JvdXAgc2VlbXMgb2Jzb2xldGUsIGJ1dCByZXF1aXJlZCB0byBvdmVyY29tZSBidWcgaW4gT3BlcmEgYXBwbHlpbmcgY3Vyc29yOiB0ZXh0IG92ZXJhbGwgaWYgZGVmaW5lZCBlbHNld2hlcmUuLi4gKi8KLnVpLXRhYnMgLnVpLXRhYnMtcGFuZWwgeyBwYWRkaW5nOiAwOyBwYWRkaW5nLXRvcDogMTBweDsgZGlzcGxheTogYmxvY2s7IGJvcmRlci13aWR0aDogMDsgYmFja2dyb3VuZDogbm9uZTsgfQoudWktdGFicyAudWktdGFicy1oaWRlIHsgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9CgoKCi8qCi51aS10YWJzLW5hdiBsaSBhIHNwYW4gLnBiX2JhY2t1cGJ1ZGR5X2ZhbmN5dGFiIHsKCQp9CiovCgoKCi5wYl9sYWJlbCB7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDNweDsKCS1tb3otYm9yZGVyLXJhZGl1czogM3B4OwoJYm9yZGVyLXJhZGl1czogM3B4Owp9Ci5wYl9sYWJlbCB7CglkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CglwYWRkaW5nOiAycHggNHB4OwoJZm9udC1zaXplOiAxMS44NDRweDsKCWZvbnQtd2VpZ2h0OiBib2xkOwoJbGluZS1oZWlnaHQ6IDE0cHg7Cgljb2xvcjogd2hpdGU7Cgl0ZXh0LXNoYWRvdzogMCAtMXB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTsKCXdoaXRlLXNwYWNlOiBub3dyYXA7Cgl2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7CgliYWNrZ3JvdW5kLWNvbG9yOiAjOTk5Owp9Ci5wYl9sYWJlbC1zdWNjZXNzIHsKCWJhY2tncm91bmQtY29sb3I6ICM0Njg4NDc7Cn0KLnBiX2xhYmVsLXdhcm5pbmcgewoJYmFja2dyb3VuZC1jb2xvcjogI0Y4OTQwNjsKfQoucGJfbGFiZWwtaW1wb3J0YW50IHsKCWJhY2tncm91bmQtY29sb3I6ICNkZDQ1NDI7IC8vI0I5NEE0ODsKfQoucGJfbGFiZWwtaW5mbyB7CgliYWNrZ3JvdW5kLWNvbG9yOiAjM0E4N0FEOwp9Ci5wYl9sYWJlbC1pbnZlcnNlIHsKCWJhY2tncm91bmQtY29sb3I6ICMzMzM7Cn0=
###PACKDATA,FILE_END,/pluginbuddy/css/admin.css,importbuddy/pluginbuddy/css/admin.css
###PACKDATA,FILE_START,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
###PACKDATA,FILE_START,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
Lm1pbmlDb2xvcnMtdHJpZ2dlciB7CgloZWlnaHQ6IDIycHg7Cgl3aWR0aDogMjJweDsKCXZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CgltYXJnaW46IDAgLjI1ZW07CglkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CglvdXRsaW5lOiBub25lOwp9CgoubWluaUNvbG9ycy1zZWxlY3RvciB7Cglwb3NpdGlvbjogYWJzb2x1dGU7Cgl3aWR0aDogMTc1cHg7CgloZWlnaHQ6IDE1MHB4OwoJYmFja2dyb3VuZDogI0ZGRjsKCWJvcmRlcjogc29saWQgMXB4ICNCQkI7CgktbW96LWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAuMjUpOwoJLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgNnB4IHJnYmEoMCwgMCwgMCwgLjI1KTsKCWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAuMjUpOwoJLW1vei1ib3JkZXItcmFkaXVzOiA1cHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDVweDsKCWJvcmRlci1yYWRpdXM6IDVweDsKCXBhZGRpbmc6IDVweDsKCXotaW5kZXg6IDk5OTk5OTsKfQoKLm1pbmlDb2xvcnMtc2VsZWN0b3IuYmxhY2sgewoJYmFja2dyb3VuZDogIzAwMDsKCWJvcmRlci1jb2xvcjogIzAwMDsKfQoKLm1pbmlDb2xvcnMtY29sb3JzIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogNXB4OwoJbGVmdDogNXB4OwoJd2lkdGg6IDE1MHB4OwoJaGVpZ2h0OiAxNTBweDsKCWN1cnNvcjogY3Jvc3NoYWlyOwp9CgoubWluaUNvbG9ycy1odWVzIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogNXB4OwoJbGVmdDogMTYwcHg7Cgl3aWR0aDogMjBweDsKCWhlaWdodDogMTUwcHg7CgljdXJzb3I6IGNyb3NzaGFpcjsKfQoKLm1pbmlDb2xvcnMtY29sb3JQaWNrZXIgewoJcG9zaXRpb246IGFic29sdXRlOwoJd2lkdGg6IDExcHg7CgloZWlnaHQ6IDExcHg7Cn0KCi5taW5pQ29sb3JzLWh1ZVBpY2tlciB7Cglwb3NpdGlvbjogYWJzb2x1dGU7CglsZWZ0OiAtM3B4OwoJd2lkdGg6IDI2cHg7CgloZWlnaHQ6IDNweDsKfQ==
###PACKDATA,FILE_END,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
###PACKDATA,FILE_START,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAYCAYAAADzoH0MAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEgAACxIB0t1+/AAAAAd0SU1FB9oHHRIvI8D7+LoAAALwSURBVDjLrZTNa11FGMZ/78ycnPvVNG3QlqTxkiuYxaUFQVMoLqqCilD6H0gFF4W4EbdduHDbnbisIIiCtOBKs9GNVKziouoiFmOTtOKtJNE093tmXhdzqpeeuNJZznmf33mfmXceUVUmlgEqwHGgBZwo9u8A68BvwACIDwRuQixADhwDTgLL71/ffArglTOPfQvUAZ2AKID76t3XFARjLa46TX12num5JdbvZ3xysw5Ay996oXVozN6va3S37+L7e8QQAMUpwpln22ArkB+F2gK7oymufOfxhb0rtxpcfskxd+Iw9LZguANhwPUvfsTFKCCGzz/9gaMLS9SPVXlnbYbtXva3t+2e8tZqj9eX/qDb6bCztcZzLz5BjIIJGECwLqN9foXVYZvb3YyH1+1uxuqwTfv8CtZlgBAwmKAGUNSPALh4dpGrK6dLgKsrp7l4dhGgqFWCGpxXAxrxox4+KlZApKRHVVGFoIof9ZJGDc5JBDG4qRrOCHKQGhARREAU3FQtaST+Dx1EbHEGY3xQMGBMmRAVYlR8TLWgRCzOR5tm2GgCAO6ADqImsQ+KManOR4vrDCsAVOs5Wzt9arnlUMWVAHt9z/2BpzcMVOs5AJ1h5cEcgLGOUYioKj7EEsAX30YhYmz6QcBgxlEAwU1VCitC0LKFoP+cTaoVxlFwXtMoZ9U6QdKT/LcOBDACtloHMXgVjBMFjYz7XaKmN+qsKQGcNWhxG+N+FzTiRP97BwmAYLOcKMKHX9/hxi+7JcAbH33P8uIRXj51HJvlgCQLCaBoDMysX+PCwiat6VACtKYDFxY2mVm/hsYUJl4FFxTQyMkn5yFvQK3BpdmMNz/z7PaT+EgVLj2fM5sbmGnA3DyEAUHBRRXe/vhPrN2n0RjwyKNjms0m55qGD9bStZ1rKj9tDtnY2OD3e/fY398nhAAIMpHKMpHIp4Dl977ceBrg1Wea3wA3gJsPh6ocEOvVIpkfB+aL/bvAz0AH6E/G+l/J23lk4gYAJAAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
###PACKDATA,FILE_START,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAITSURBVBgZpcHLThNhGIDh9/vn7/RApwc5VCmFWBPi1mvwAlx7BW69Afeu3bozcSE7E02ILjCRhRrds8AEbKVS2gIdSjvTmf+TYqLu+zyiqszDMCf75PnnnVwhuNcLpwsXk8Q4BYeSOsWpkqrinJI6JXVK6lSRdDq9PO+19vb37XK13Hj0YLMUTVVyWY//Cf8IVwQEGEeJN47S1YdPo4npDpNmnDh5udOh1YsZRcph39EaONpnjs65oxsqvZEyTaHdj3n2psPpKDLBcuOOGUWpZDOG+q0S7751ObuYUisJGQ98T/Ct4Fuo5IX+MGZr95jKjRKLlSxXxFxOEmaaN4us1Upsf+1yGk5ZKhp8C74H5ZwwCGO2drssLZZo1ouIcs2MJikz1oPmapHlaoFXH1oMwphyTghyQj+MefG+RblcoLlaJG/5y4zGCTMikEwTctaxXq/w9kuXdm9Cuzfh9acujXqFwE8xmuBb/hCwl1GKAnGccDwIadQCfD9DZ5Dj494QA2w2qtQW84wmMZ1eyFI1QBVQwV5GiaZOpdsPaSwH5HMZULi9UmB9pYAAouBQbMHHrgQcnQwZV/KgTu1o8PMgipONu2t5KeaNiEkxgAiICDMCCFeEK5aNauAOfoXx8KR9ZOOLk8P7j7er2WBhwWY9sdbDeIJnwBjBWBBAhGsCmiZxPD4/7Z98b/0QVWUehjkZ5vQb/Un5e/DIsVsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
###PACKDATA,FILE_START,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJFSURBVBgZBcHda5V1AADg5/d733Oc7tjOaNs5GC6KdrEwmpPRxG7spoKghOim7oK8y0MIEQRL+geGEIQ3UXQvSJ8IafZxUbjQhRDZoU60iYsSc9t5v87b84TsVe3mrBWpHoCICIAIACixYTUfOJM2Z62YO97TOULSIKaEQAyESAzEgISAgLpi48de87MLUqmezhGyhO4SCW7f4O81YiSJiCQIkbqmNcXMIjMXeilIGsQxDp8AnKDY5teL3PyU6h4CdY3Av7cYu58R0QghZWeT9fP0v2V7i8Y4j77As2c5sAwIFAXDgjInJxURAzub/PwxMZBGphZYeIWJWZ44xdo5bl4kK8kzioohUUREd4kXP+Kpd3nkee72+epNBleAxdfoLJBlDEuKkpxoBAkBjXGm53n8ZZ45S/shrr7P75eBo6eo9zAsKCqGRBEB/1zj89e5eo7tLRr7ePJtWg9wZZV7t2i2OPQcw5JiRE4UESN1ZPc2g0tceos/LtPYx9HTaPDNe8Dhl9gtyStyUiMIJDXLp2m0GHzN2gdMzdPq0F3k+pcc/4+x/UwepKzIiSDWTB/iwBLT8xw8xt07rJ8HHj7GbkX/B+DBxyhrciIQ2N2i2AG2fiPL+OsXoNVlWPDnDaC5l6qiJJWjLlHxxRs0JhhcIyvp/8SHJylKdiu++4Tr31NW7B8nkrwzp627d9nkHM0Wsea+GSY6tDvESEyY6TIxyZ4GSUp/nTubqyF7WrvZtaKrZ4QSQ+TIMUSJHCVypGhaHW448z+h1tLAgvKk7gAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
###PACKDATA,FILE_START,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
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
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB7klEQVR42oWRT4gSURzHZ9u9tKmHos4WBB0VscPSEuEloot2yEsHIRE8hEIHQbBUEFSQQVBQ0EMHRRAvoh78OySMBMqSYKh7URDZg6mYLrK6r28DbjPTxn7gc3nz+7z3Zoa6jmq1+gi+hK/hE3iLuolisfgC0t9At9v90e/3u01QKpVqhULhzX/DXC5nZBiGnc1mUyJitVr9ajQazXQ6/RGjwltkMpnn5XK5sdlsLnbBdrslfC4BNjiJRCLvkexfxYlEIjCZTH7yh7PZLFksFuIbnKdSKUYul9/nwlgs9gDXYYmIaDRK4vE4GY/HgvVarfbdaDS+RXpAhUKh40ql0hbHwWCQ+P1+EggESLv993Gr1To1mUyfEEspDBzl8/l/Yq/XS1wuFyc2v1pnWfZUr9d7EN+j3G63FLvXLwE/djqdxOFwcKfySSaTLbVa/YGL/2Cz2T73er0z/pDP5yODwUAQjkajqcFgyCHRwDtcbLFYFDipPp/Pz3eDy+VSEK7X6wu8CotT/UgeC34XvuA7u91e73Q6Z0TEcDicejyehkaj+YLRZ1ACBezpdLojfAzabDYzNE03w+HwidVq/arVarMKhcKHmWN4F+5BMdzioUQikatUKp1SqTTIZLJXWHsKH0LpLryJfXgbHsKD66Lfk7TS2QhfFGsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB/ElEQVR42n2RPYgaQRiG585rclGLhKQ2gYOUipjiyBGCTQhpNEVsrhAigsWhkEKwSEQQjCBroSBiYQpFEBv/Cn+XCLsElOMCBvUaFYWARoXgKSc3eVlQ9jY/LzwwzHzPzDczJJPJCOTzeVIqlQRqtdpj8BK8Bk/AfrFYJOl0mogjlV8A5ivS6XS+93q9ThMpl8t1yG/+J1tYluXm8/mMSrJcLn/xPN+E/B7KvlR+XqlU+M1mc03/kRsEG5xHIpF30GSCHIvFSCKRCEyn05/bwsFgQLPZLI3H4xQ3EHdwlUqlWJVK9WArP0Q7HBUll8sJTCYTGo1G6Xg83q3V6/ULi8XyFuoBCYVCJ9Vq9ZtYXq1WdDgcChsEg0G6WCx2a61W69JqtX6ArCB+v/+4UChAvhWhXWxM+/0+FYfjuEuTyeSFfJ94PB5FIBBo3CCiGqFVdESlSSaTLZ1Od7aVidPp/Njtdn+Ii/Bt1OVy3RJHo9HMbDbnIerBXWK32wlQu93uBu52JS7GD+zG6/X62ufzcTjVD/EIyLYywQue4qRGu93edSD6upnX6+X1ev1nSM+AnEiyZzQaj/EYjM1mYxmGaYbD4XOHw/HFYDBk1Wr1J9ScgHtgD0gjTB7K5XKVVqs1ajQas1KpfIW5p+ARUEjEPwOZIDJwBxyCg79JvwFn8/sITKnYXQAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
###PACKDATA,FILE_START,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
R0lGODlhLwA9ALMAAP//////AMbGxgDXAP8AAABLAL0AAFkAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQJBQAJACwKAA4AHAAqAAAEzTAlNKm8OGtJ7f5fN2FIWYKZ2JVC25rhZVqmC6e0TApsH+c7l+3HSbUIAiRPoyoGhUvcaZQKIKxYT0onnU2ZTqlhfNuGL4UrYmxQb7TfwqDAy0ZJb4R8joDqZ2cZe3w2cgUyWhqDcwWNe4coaAOTlJWUkJGLlpWYKJqbk50gn6CiH6SbphuolqqKoKmRkrChsrO0rqu0tbYSrLkhpGm9OpqHibIWjo1cvch4xM/NydS20tDVkdfYKNscXyFlYCJEVGbkb0XPOddA6d7cFxEAIfkECRQACQAsCAAJABwAKgAABM0wJTSpvDhrSe3+XzdhSFmCmdiVQtua4WVapguntEwKbB/nO5ftx0m1CAIkT6MqBoVL3GmUCiCsWE9KJ51NmU6pYXzbhi+HK2JsUG+03wPhwMtGSW+EfI6A6mdnGXt8NnIHMloag3MHjXuHKGgEk5SVlJCRi5aVmCiam5OdIJ+goh+km6YbqJaqiqCpkZKwobKztK6rtLW2Eqy5IaRpvTqah4myFo6NXL3IeMTPzcnUttLQ1ZHX2CjbHF8hZWAiRFRm5G9FzznXQOne3BcRACH5BAkFAAkALAkADAAcACoAAATNMCU0qbw4a0nt/l83YUhZgpnYlULbmuFlWqYLp7RMCmwf5zuX7cdJtQgCJE+jKgaFS9xplAogrFhPSiedTZlOqWF824YvhStibFBvtN/CoMDLRklvhHyOgOpnZxl7fDZyBTJaGoNzBY17hyhoA5OUlZSQkYuWlZgompuTnSCfoKIfpJumG6iWqoqgqZGSsKGys7Suq7S1thKsuSGkab06moeJshaOjVy9yHjEz83J1LbS0NWR19go2xxfIWVgIkRUZuRvRc8510Dp3twXEQAh+QQJFAAJACwIABIAIAAoAAAExBClJKe9OGtZUdUg6I1hGXoZN3Lm9bmIIMuoqb7TOJNibuEUgUcYA/4oGFxstisBlTKCQCoUrV5YZjP5MXavvNwz9QsgzOiO8SQ+u1FrZ+JQXBFboAPhoKXhNXp7dDsHdH8YgQSChYEHhxeJipKSjo9zk5iTlYeRmZSWnZ57oKKYm3+hnqd4qZmrLa2mlpelo7Oxiq+stba3pbp/CKmGsz6dlXE2E4yFLrPJPpbQSNIt02TKj2EbK3gka3DRJyzWweJyJREAOw==
###PACKDATA,FILE_END,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
###PACKDATA,FILE_START,/pluginbuddy/images/twitter.png,importbuddy/pluginbuddy/images/twitter.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACiUlEQVR42pWTTWgTQRTH/7MfadLUmoZqjURoq1i0gaBBKSKoCKKipadevHnwoBcvgiC6Sw8KWmitoFDRg3joQYKIYKUqKghFLW0pQVraWEpCWVOTpjabj83uOjNpQipV8M/s7syb937z5s0sOfpiNrjdLT9fyBSbBUJAG0TQh3VKjdrYe712uMR5LVvsIofCM8p4MqeaNiALBKIg0C8g8UBAoGMCuwSsUo1I0OyWVNL6NKJEV/IqC5T0HHbOx6m7jR9tLZDcDhBmp2MeXgVhC9bLgkp8jyeVxdW8SkQRAZeNqyEPd+gdSyNOQ1kMy4ZlUq20YaHBQQFNg2OKlimooIDOls24tn8rd7j1Nor3s6lKTZjEehdkbx3NB1jUi9jmFFXivf9FSeoMIKC7bQv6jzRz58noTyRS2XWrzmsrGIxnkHTI0IsWGmsowHNvVFnOUgChgL1NGDjWin/p4ps5hKNJ3vewGtT1fVJW84bKDN3tPgwc3/XX4KWsgbPhCL6nc3xcxwCuOx+VXBkQ8OHuiTY+eWVkBh9iaZRrt1owkcqbMC27AnQxgOPmO8XIFzmga08THnQG+GTPy294MrcEg5asYFobZuSQKEDqGVFMw+QA3yYnvl46DHYjl2m66rMIprVM1RYKiEkmPdPSfRAZQLg+rNiWpZadek+349w+/4YrGjSTU49GEUn84mMiUoD7xislu7YFJqckYKAriDO0oBvp/NAYhqc13pdleozB2yN9U1rm8p+OIX8DOlq8FChWbPFlHUMTMWCtjrsbXf1kdCZmn3z4GSsFG/+jepng9YWDIFpiKTU+MemZml2AruucLgjst15/923bgsWOkNavtrYW7a1+dBwI4TeMlfCatrT3RgAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/twitter.png,importbuddy/pluginbuddy/images/twitter.png
###PACKDATA,FILE_START,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCQoJalF1ZXJ5KCcucGJfZGVidWdfc2hvdycpLmNsaWNrKGZ1bmN0aW9uKGUpIHsKCQlqUXVlcnkodGhpcykuaGlkZSgpOwoJCWpRdWVyeSh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbiggJy5wYl9kZWJ1Z19oaWRlJykuc2hvdygpOwoJCWpRdWVyeSh0aGlzKS5wYXJlbnQoKS5jc3MoICdmbG9hdCcsICdsZWZ0JyApOwoJCWpRdWVyeSh0aGlzKS5wYXJlbnQoKS5jc3MoICd3aWR0aCcsICc4MCUnICk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCAnZGl2Jykuc2hvdygpOwoJfSk7CglqUXVlcnkoJy5wYl9kZWJ1Z19oaWRlJykuY2xpY2soZnVuY3Rpb24oZSkgewoJCWpRdWVyeSh0aGlzKS5oaWRlKCk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCAnLnBiX2RlYnVnX3Nob3cnKS5zaG93KCk7CgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNzcyggJ2Zsb2F0JywgJ3JpZ2h0JyApOwoJCWpRdWVyeSh0aGlzKS5wYXJlbnQoKS5jc3MoICd3aWR0aCcsICc0MHB4JyApOwoJCWpRdWVyeSh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbiggJ2RpdicpLmhpZGUoKTsKCX0pOwoKCQoJalF1ZXJ5KCcucGx1Z2luYnVkZHlfdGlwJykudG9vbHRpcCh7IAoJCXRyYWNrOiB0cnVlLCAKCQlkZWxheTogMCwgCgkJc2hvd1VSTDogZmFsc2UsIAoJCXNob3dCb2R5OiAiIC0gIiwgCgkJZmFkZTogMjUwIAoJfSk7CgkKCWlmICh0eXBlb2YgalF1ZXJ5LnRhYmxlRG5EICE9PSAndW5kZWZpbmVkJykgeyAvLyBJZiB0YWJsZURuRCBmdW5jdGlvbiBsb2FkZWQuCgkJalF1ZXJ5KCcucGJfcmVvcmRlcicpLnRhYmxlRG5EKHsKCQkJb25Ecm9wOiBmdW5jdGlvbih0Ym9keSwgcm93KSB7CgkJCQl2YXIgbmV3X29yZGVyID0gbmV3IEFycmF5KCk7CgkJCQl2YXIgcm93cyA9IHRib2R5LnJvd3M7CgkJCQlmb3IgKHZhciBpPTA7IGk8cm93cy5sZW5ndGg7IGkrKykgewoJCQkJCW5ld19vcmRlci5wdXNoKCByb3dzW2ldLmlkLnN1YnN0cmluZygxMSkgKTsKCQkJCX0KCQkJCW5ld19vcmRlciA9IG5ld19vcmRlci5qb2luKCAnLCcgKTsKCQkJCWpRdWVyeSggJyNwYl9vcmRlcicgKS52YWwoIG5ld19vcmRlciApCgkJCX0sCgkJCWRyYWdIYW5kbGU6ICJwYl9kcmFnaGFuZGxlIgoJCX0pOwoJfQoJCglqUXVlcnkoJy5wYl90b2dnbGUnKS5jbGljayhmdW5jdGlvbihlKSB7CgkJalF1ZXJ5KCAnI3BiX3RvZ2dsZS0nICsgalF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykgKS5zbGlkZVRvZ2dsZSgpOwoJfSk7CgkKCQoJCgkvLyBIaWRlIGEgZGlzbWlzc2FibGUgYWxlcnQgYW5kIHNlbmQgQUpBWCBjYWxsIHNvIGl0IHdvbid0IGJlIHNob3duIGluIHRoZSBmdXR1cmUuCglqUXVlcnkoICcucGJfYmFja3VwYnVkZHlfZGlzYWxlcnQnICkuY2xpY2soIGZ1bmN0aW9uKGUpIHsKCQkKCQl2YXIgdGhpc191bmlxdWVfaWQgPSBqUXVlcnkodGhpcykucGFyZW50cygnLnBiX2JhY2t1cGJ1ZGR5X2FsZXJ0JykuYXR0cigncmVsJyk7CgkJdmFyIHRoaXNfZGlzYWxlcnRfdXJsID0galF1ZXJ5KHRoaXMpLmF0dHIoJ2FsdCcpOwoJCS8vYWxlcnQoIHVuaXF1ZV9pZCApOwoJCQoJCWpRdWVyeS5wb3N0KCB0aGlzX2Rpc2FsZXJ0X3VybCwKCQkJeyB1bmlxdWVfaWQ6IHRoaXNfdW5pcXVlX2lkIH0sIAoJCQlmdW5jdGlvbihkYXRhKSB7CgkJCQlkYXRhID0galF1ZXJ5LnRyaW0oIGRhdGEgKTsKCQkJCWlmICggZGF0YSAhPSAnMScgKSB7CgkJCQkJYWxlcnQoICdFcnJvciBzYXZpbmcgZGlzbWlzc2FsLiBUaGUgYWxlcnQgbWF5IHJldHVybi4gRXJyb3I6ICcgKyBkYXRhICk7CgkJCQl9CgkJCX0KCQkpOwoJCQoJCWpRdWVyeSh0aGlzKS5wYXJlbnRzKCcucGJfYmFja3VwYnVkZHlfYWxlcnQnKS5zbGlkZVVwKCk7CgkJCgl9KTsKCQoJCgkKfSk7
###PACKDATA,FILE_END,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
###PACKDATA,FILE_START,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
###PACKDATA,FILE_START,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js

###PACKDATA,FILE_END,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js
###PACKDATA,FILE_START,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCQoJLy8gQ2hhbmdlIHRhYiBvbiBjbGljay4KCWpRdWVyeSggJy5iYWNrdXBidWRkeS10YWJzLXdyYXAgLm5hdi10YWJbaHJlZl49IiMiXScgKS5jbGljayggZnVuY3Rpb24oKXsgLyogaWdub3JlcyBhbnkgbm9uIGhhc2h0YWcgbGlua3Mgc2luY2UgdGhleSBnbyBkaXJlY3QgdG8gYSBVUkwuLi4gKi8KCQkKCQkvLyBIaWRlIGFsbCB0YWIgYmxvY2tzLgoJCXRoaXNUYWJCbG9jayA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCAnLmJhY2t1cGJ1ZGR5LXRhYnMtd3JhcCcgKTsKCQl0aGlzVGFiQmxvY2suZmluZCggJy5iYWNrdXBidWRkeS10YWInICkuaGlkZSgpOwoJCQoJCS8vIFVwZGF0ZSBzZWxlY3RlZCB0YWIuCgkJdGhpc1RhYkJsb2NrLmZpbmQoICcubmF2LXRhYi1hY3RpdmUnICkucmVtb3ZlQ2xhc3MoICduYXYtdGFiLWFjdGl2ZScgKTsKCQlqUXVlcnkodGhpcykuYWRkQ2xhc3MoICduYXYtdGFiLWFjdGl2ZScgKTsKCQkKCQkvLyBTaG93IHRoZSBjb3JyZWN0IHRhYiBibG9jay4KCQkvL3RhcmdldERpdklEID0galF1ZXJ5KHRoaXMpLmF0dHIoICdocmVmJyApLnN1YnN0cmluZygxKTsKCQl0aGlzVGFiQmxvY2suZmluZCggalF1ZXJ5KHRoaXMpLmF0dHIoICdocmVmJyApICkuc2hvdygpOwoJCQoJCXJldHVybiBmYWxzZTsKCX0pOwoJCgkvLyBBdXRvLWRpc3BsYXkgdGhlIGNvcnJlY3QgdGFiIG9uIGxvYWQgaWYgc3BlY2lmeWluZyBhIG5vbi1kZWZhdWx0LgoJalF1ZXJ5KCAnLm5hdi10YWItYWN0aXZlJyApLmVhY2goIGZ1bmN0aW9uKCl7CgkJalF1ZXJ5KHRoaXMpLmNsaWNrKCk7Cgl9KTsKfSk7
###PACKDATA,FILE_END,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
###PACKDATA,FILE_START,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js

###PACKDATA,FILE_END,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js
###PACKDATA,FILE_START,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
LyoKICogalF1ZXJ5IFRvb2x0aXAgcGx1Z2luIDEuMwogKgogKiBodHRwOi8vYmFzc2lzdGFuY2UuZGUvanF1ZXJ5LXBsdWdpbnMvanF1ZXJ5LXBsdWdpbi10b29sdGlwLwogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1BsdWdpbnMvVG9vbHRpcAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDA4IErDtnJuIFphZWZmZXJlcgogKgogKiAkSWQ6IGpxdWVyeS50b29sdGlwLmpzIDU3NDEgMjAwOC0wNi0yMSAxNToyMjoxNlogam9lcm4uemFlZmZlcmVyICQKICogCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOgogKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sCiAqLzsoZnVuY3Rpb24oJCl7dmFyIGhlbHBlcj17fSxjdXJyZW50LHRpdGxlLHRJRCxJRT0kLmJyb3dzZXIubXNpZSYmL01TSUVccyg1XC41fDZcLikvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdHJhY2s9ZmFsc2U7JC50b29sdGlwPXtibG9ja2VkOmZhbHNlLGRlZmF1bHRzOntkZWxheToyMDAsZmFkZTpmYWxzZSxzaG93VVJMOnRydWUsZXh0cmFDbGFzczoiIix0b3A6MTUsbGVmdDoxNSxpZDoidG9vbHRpcCJ9LGJsb2NrOmZ1bmN0aW9uKCl7JC50b29sdGlwLmJsb2NrZWQ9ISQudG9vbHRpcC5ibG9ja2VkO319OyQuZm4uZXh0ZW5kKHt0b29sdGlwOmZ1bmN0aW9uKHNldHRpbmdzKXtzZXR0aW5ncz0kLmV4dGVuZCh7fSwkLnRvb2x0aXAuZGVmYXVsdHMsc2V0dGluZ3MpO2NyZWF0ZUhlbHBlcihzZXR0aW5ncyk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQuZGF0YSh0aGlzLCJ0b29sdGlwIixzZXR0aW5ncyk7dGhpcy50T3BhY2l0eT1oZWxwZXIucGFyZW50LmNzcygib3BhY2l0eSIpO3RoaXMudG9vbHRpcFRleHQ9dGhpcy50aXRsZTskKHRoaXMpLnJlbW92ZUF0dHIoInRpdGxlIik7dGhpcy5hbHQ9IiI7fSkubW91c2VvdmVyKHNhdmUpLm1vdXNlb3V0KGhpZGUpLmNsaWNrKGhpZGUpO30sZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpbWFnZT0kKHRoaXMpLmNzcygnYmFja2dyb3VuZEltYWdlJyk7aWYoaW1hZ2UubWF0Y2goL151cmxcKFsiJ10/KC4qXC5wbmcpWyInXT9cKSQvaSkpe2ltYWdlPVJlZ0V4cC4kMTskKHRoaXMpLmNzcyh7J2JhY2tncm91bmRJbWFnZSc6J25vbmUnLCdmaWx0ZXInOiJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihlbmFibGVkPXRydWUsIHNpemluZ01ldGhvZD1jcm9wLCBzcmM9JyIraW1hZ2UrIicpIn0pLmVhY2goZnVuY3Rpb24oKXt2YXIgcG9zaXRpb249JCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJyk7aWYocG9zaXRpb24hPSdhYnNvbHV0ZScmJnBvc2l0aW9uIT0ncmVsYXRpdmUnKSQodGhpcykuY3NzKCdwb3NpdGlvbicsJ3JlbGF0aXZlJyk7fSk7fX0pO306ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9LHVuZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcykuY3NzKHsnZmlsdGVyJzonJyxiYWNrZ3JvdW5kSW1hZ2U6Jyd9KTt9KTt9OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSxoaWRlV2hlbkVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcylbJCh0aGlzKS5odG1sKCk/InNob3ciOiJoaWRlIl0oKTt9KTt9LHVybDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoJ2hyZWYnKXx8dGhpcy5hdHRyKCdzcmMnKTt9fSk7ZnVuY3Rpb24gY3JlYXRlSGVscGVyKHNldHRpbmdzKXtpZihoZWxwZXIucGFyZW50KXJldHVybjtoZWxwZXIucGFyZW50PSQoJzxkaXYgaWQ9Iicrc2V0dGluZ3MuaWQrJyI+PGgzPjwvaDM+PGRpdiBjbGFzcz0iYm9keSI+PC9kaXY+PGRpdiBjbGFzcz0idXJsIj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS5oaWRlKCk7aWYoJC5mbi5iZ2lmcmFtZSloZWxwZXIucGFyZW50LmJnaWZyYW1lKCk7aGVscGVyLnRpdGxlPSQoJ2gzJyxoZWxwZXIucGFyZW50KTtoZWxwZXIuYm9keT0kKCdkaXYuYm9keScsaGVscGVyLnBhcmVudCk7aGVscGVyLnVybD0kKCdkaXYudXJsJyxoZWxwZXIucGFyZW50KTt9ZnVuY3Rpb24gc2V0dGluZ3MoZWxlbWVudCl7cmV0dXJuICQuZGF0YShlbGVtZW50LCJ0b29sdGlwIik7fWZ1bmN0aW9uIGhhbmRsZShldmVudCl7aWYoc2V0dGluZ3ModGhpcykuZGVsYXkpdElEPXNldFRpbWVvdXQoc2hvdyxzZXR0aW5ncyh0aGlzKS5kZWxheSk7ZWxzZQpzaG93KCk7dHJhY2s9ISFzZXR0aW5ncyh0aGlzKS50cmFjazskKGRvY3VtZW50LmJvZHkpLmJpbmQoJ21vdXNlbW92ZScsdXBkYXRlKTt1cGRhdGUoZXZlbnQpO31mdW5jdGlvbiBzYXZlKCl7aWYoJC50b29sdGlwLmJsb2NrZWR8fHRoaXM9PWN1cnJlbnR8fCghdGhpcy50b29sdGlwVGV4dCYmIXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyKSlyZXR1cm47Y3VycmVudD10aGlzO3RpdGxlPXRoaXMudG9vbHRpcFRleHQ7aWYoc2V0dGluZ3ModGhpcykuYm9keUhhbmRsZXIpe2hlbHBlci50aXRsZS5oaWRlKCk7dmFyIGJvZHlDb250ZW50PXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyLmNhbGwodGhpcyk7aWYoYm9keUNvbnRlbnQubm9kZVR5cGV8fGJvZHlDb250ZW50LmpxdWVyeSl7aGVscGVyLmJvZHkuZW1wdHkoKS5hcHBlbmQoYm9keUNvbnRlbnQpfWVsc2V7aGVscGVyLmJvZHkuaHRtbChib2R5Q29udGVudCk7fWhlbHBlci5ib2R5LnNob3coKTt9ZWxzZSBpZihzZXR0aW5ncyh0aGlzKS5zaG93Qm9keSl7dmFyIHBhcnRzPXRpdGxlLnNwbGl0KHNldHRpbmdzKHRoaXMpLnNob3dCb2R5KTtoZWxwZXIudGl0bGUuaHRtbChwYXJ0cy5zaGlmdCgpKS5zaG93KCk7aGVscGVyLmJvZHkuZW1wdHkoKTtmb3IodmFyIGk9MCxwYXJ0OyhwYXJ0PXBhcnRzW2ldKTtpKyspe2lmKGk+MCloZWxwZXIuYm9keS5hcHBlbmQoIjxici8+Iik7aGVscGVyLmJvZHkuYXBwZW5kKHBhcnQpO31oZWxwZXIuYm9keS5oaWRlV2hlbkVtcHR5KCk7fWVsc2V7aGVscGVyLnRpdGxlLmh0bWwodGl0bGUpLnNob3coKTtoZWxwZXIuYm9keS5oaWRlKCk7fWlmKHNldHRpbmdzKHRoaXMpLnNob3dVUkwmJiQodGhpcykudXJsKCkpaGVscGVyLnVybC5odG1sKCQodGhpcykudXJsKCkucmVwbGFjZSgnaHR0cDovLycsJycpKS5zaG93KCk7ZWxzZQpoZWxwZXIudXJsLmhpZGUoKTtoZWxwZXIucGFyZW50LmFkZENsYXNzKHNldHRpbmdzKHRoaXMpLmV4dHJhQ2xhc3MpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LmZpeFBORygpO2hhbmRsZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIHNob3coKXt0SUQ9bnVsbDtpZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnNldHRpbmdzKGN1cnJlbnQpLmZhZGUpe2lmKGhlbHBlci5wYXJlbnQuaXMoIjphbmltYXRlZCIpKWhlbHBlci5wYXJlbnQuc3RvcCgpLnNob3coKS5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTtlbHNlCmhlbHBlci5wYXJlbnQuaXMoJzp2aXNpYmxlJyk/aGVscGVyLnBhcmVudC5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTpoZWxwZXIucGFyZW50LmZhZGVJbihzZXR0aW5ncyhjdXJyZW50KS5mYWRlKTt9ZWxzZXtoZWxwZXIucGFyZW50LnNob3coKTt9dXBkYXRlKCk7fWZ1bmN0aW9uIHVwZGF0ZShldmVudCl7aWYoJC50b29sdGlwLmJsb2NrZWQpcmV0dXJuO2lmKGV2ZW50JiZldmVudC50YXJnZXQudGFnTmFtZT09Ik9QVElPTiIpe3JldHVybjt9aWYoIXRyYWNrJiZoZWxwZXIucGFyZW50LmlzKCI6dmlzaWJsZSIpKXskKGRvY3VtZW50LmJvZHkpLnVuYmluZCgnbW91c2Vtb3ZlJyx1cGRhdGUpfWlmKGN1cnJlbnQ9PW51bGwpeyQoZG9jdW1lbnQuYm9keSkudW5iaW5kKCdtb3VzZW1vdmUnLHVwZGF0ZSk7cmV0dXJuO31oZWxwZXIucGFyZW50LnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1yaWdodCIpLnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt2YXIgbGVmdD1oZWxwZXIucGFyZW50WzBdLm9mZnNldExlZnQ7dmFyIHRvcD1oZWxwZXIucGFyZW50WzBdLm9mZnNldFRvcDtpZihldmVudCl7bGVmdD1ldmVudC5wYWdlWCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O3RvcD1ldmVudC5wYWdlWStzZXR0aW5ncyhjdXJyZW50KS50b3A7dmFyIHJpZ2h0PSdhdXRvJztpZihzZXR0aW5ncyhjdXJyZW50KS5wb3NpdGlvbkxlZnQpe3JpZ2h0PSQod2luZG93KS53aWR0aCgpLWxlZnQ7bGVmdD0nYXV0byc7fWhlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQscmlnaHQ6cmlnaHQsdG9wOnRvcH0pO312YXIgdj12aWV3cG9ydCgpLGg9aGVscGVyLnBhcmVudFswXTtpZih2Lngrdi5jeDxoLm9mZnNldExlZnQraC5vZmZzZXRXaWR0aCl7bGVmdC09aC5vZmZzZXRXaWR0aCsyMCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O2hlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQrJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1yaWdodCIpO31pZih2Lnkrdi5jeTxoLm9mZnNldFRvcCtoLm9mZnNldEhlaWdodCl7dG9wLT1oLm9mZnNldEhlaWdodCsyMCtzZXR0aW5ncyhjdXJyZW50KS50b3A7aGVscGVyLnBhcmVudC5jc3Moe3RvcDp0b3ArJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt9fWZ1bmN0aW9uIHZpZXdwb3J0KCl7cmV0dXJue3g6JCh3aW5kb3cpLnNjcm9sbExlZnQoKSx5OiQod2luZG93KS5zY3JvbGxUb3AoKSxjeDokKHdpbmRvdykud2lkdGgoKSxjeTokKHdpbmRvdykuaGVpZ2h0KCl9O31mdW5jdGlvbiBoaWRlKGV2ZW50KXtpZigkLnRvb2x0aXAuYmxvY2tlZClyZXR1cm47aWYodElEKWNsZWFyVGltZW91dCh0SUQpO2N1cnJlbnQ9bnVsbDt2YXIgdHNldHRpbmdzPXNldHRpbmdzKHRoaXMpO2Z1bmN0aW9uIGNvbXBsZXRlKCl7aGVscGVyLnBhcmVudC5yZW1vdmVDbGFzcyh0c2V0dGluZ3MuZXh0cmFDbGFzcykuaGlkZSgpLmNzcygib3BhY2l0eSIsIiIpO31pZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnRzZXR0aW5ncy5mYWRlKXtpZihoZWxwZXIucGFyZW50LmlzKCc6YW5pbWF0ZWQnKSloZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlVG8odHNldHRpbmdzLmZhZGUsMCxjb21wbGV0ZSk7ZWxzZQpoZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlT3V0KHRzZXR0aW5ncy5mYWRlLGNvbXBsZXRlKTt9ZWxzZQpjb21wbGV0ZSgpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LnVuZml4UE5HKCk7fX0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
R0lGODlhCwALAJECAAAAAP///////wAAACH5BAEAAAIALAAAAAALAAsAAAIflINoG+AeGFgGxEaXxVns2X2dh4CZJXBadDxQlihGAQA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png

###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
R0lGODlhGgADAIAAAP///wAAACH/C1hNUCBEYXRhWE1QPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IE1hY2ludG9zaCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGODM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGOTM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjdBQzk3MkY2MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjdBQzk3MkY3MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5uLe2tbSzsrGwr66trKuqqainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359fHt6eXh3dnV0c3JxcG9ubWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JBQD8+PTw7Ojk4NzY1NDMyMTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYFBAMCAQAAIfkEAAAAAAAsAAAAABoAAwAAAguEj6ka7Q+jW7SeAgA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
iVBORw0KGgoAAAANSUhEUgAAABQAAACWCAIAAABRkz+JAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6N0FDOTcyRjQzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N0FDOTcyRjUzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGMjM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGMzM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PnzKFbcAAAcCSURBVHjanFnbcttG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
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RjU3RTU1MzIzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RjU3RTU1MzMzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEQxNkIyMTM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEQxNkIyMjM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PiDK9P0AAAHySURBVHjarJVBasJAFIYnyVgXtrorusgdXOrWZaHgFbooegv1EoI7j+AtXLsXFFy0FFRs0LYxmXT+YV6YxIgpzcDzJcN73/z5M06s4XD4zBhrsGLHGxdCNEaj0aRI6mAw6AFs4SaKokKglmUxMHkYhgqKaDabvf9AF4vFBBwwAbbkCgpcqVTYfD7/kjWnjD6BB9MZEeocyLhrt9suOBhgJhRXq1WmodsrMBNo5gfZ65KdpFhBsVqtVmO6MLwBEkYdwkZvAhwEgUXgUqmEeV/Gzw1Q+l71EhhMpRhQBOcc8986TAgWg/dHfU3zaiPIuEev4XFSsQYfNSTUC3xq38WVzQCZPnoTivGTUnzScE9nkWOnCVMxgdNWAPiht1HekQZnWrHNAeXaArIiurDifD7Hih3HYTmgzng8floul/XEpOwlxWAmFGtwwlN5+qkwX9ZqtarLg2aCt28OWADGtZcnTGhGVn4C4vt+5iEUW0GKbduOwSmVMRj1qKOe2WzGNpsNc12XdbtdNa9q0las12uRBaWBfxjqqEeeiGy326lMh5lS7HmeTYcQlEyn09dbe4sUI6C01WqpTHNg8v1+b5PH/X4/95cE/tIu6HQ68TUymPxwODh4tHK5/KevCHr0LrqYB9OSwBf5aI9FfvOk6vdfAQYA4jTPF9eEdoEAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
###PACKDATA,FILE_START,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php
QWxsIHNjaGVkdWxlZCBXb3JkUHJlc3MgdGFza3MgKENST04gam9icykgYXJlIGxpc3RlZCBiZWxvdy4gVXNlIGNhdXRpb24gd2hlbiBtYW51YWxseSBydW5uaW5nIG9yIGRlbGV0aW5nIHNjaGVkdWxlZCBDUk9OCmpvYnMgYXMgcGx1Z2lucywgdGhlbWVzLCBvciBXb3JkUHJlc3MgaXRzZWxmIG1heSBleHBlY3QgdGhlc2UgdG8gcmVtYWluIGluIHBsYWNlLiBXb3JkUHJlc3Mgd2lsbCByZWNyZWF0ZSBhbnkgbWFuZGF0b3J5CmludGVybmFsIENST04gam9icyBhdXRvbWF0aWNhbGx5IGlmIHRoZXkgYXJlIHJlbW92ZWQuPGJyPjxicj4KPD9waHAKJGNyb24gPSBnZXRfb3B0aW9uKCdjcm9uJyk7CgoKLy8gSGFuZGxlIENST04gZGVsZXRpb25zLgppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2J1bGtfYWN0aW9uJyApID09ICdkZWxldGVfY3JvbicgKSB7CglpZiAoIGRlZmluZWQoICdQQl9ERU1PX01PREUnICkgKSB7CgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnQWNjZXNzIGRlbmllZCBpbiBkZW1vIG1vZGUuJywgdHJ1ZSApOwoJfSBlbHNlIHsKCQkkZGVsZXRlX2l0ZW1zID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnaXRlbXMnICk7CgkJCgkJJGRlbGV0ZWRfY3JvbnMgPSBhcnJheSgpOyAvLyBGb3IgbGlzdGluZyBpbiBhbGVydC4KCQlmb3JlYWNoKCAkZGVsZXRlX2l0ZW1zIGFzICRkZWxldGVfaXRlbSApIHsKCQkJJGNyb25fcGFydHMgPSBleHBsb2RlKCAnfCcsICRkZWxldGVfaXRlbSApOwoJCQkkdGltZXN0YW1wID0gJGNyb25fcGFydHNbMF07CgkJCSRjcm9uX2hvb2sgPSAkY3Jvbl9wYXJ0c1sxXTsKCQkJJGNyb25fa2V5ID0gJGNyb25fcGFydHNbMl07CgkJCQoJCQlpZiAoIGlzc2V0KCAkY3JvblsgJHRpbWVzdGFtcCBdWyAkY3Jvbl9ob29rIF1bICRjcm9uX2tleSBdICkgKSB7IC8vIFJ1biBjcm9uLgoJCQkJCgkJCQkkY3Jvbl9hcnJheSA9ICRjcm9uWyAkdGltZXN0YW1wIF1bICRjcm9uX2hvb2sgXVsgJGNyb25fa2V5IF07IC8vIEdldCBjcm9uIGFycmF5IGJhc2VkIG9uIHBhc3NlZCB2YWx1ZXMuCgkJCQkkcmVzdWx0ID0gYmFja3VwYnVkZHlfY29yZTo6dW5zY2hlZHVsZV9ldmVudCggJHRpbWVzdGFtcCwgJGNyb25faG9vaywgJGNyb25fYXJyYXlbJ2FyZ3MnXSApOyAvLyBEZWxldGUgdGhlIHNjaGVkdWxlZCBjcm9uLgoJCQkJaWYgKCAkcmVzdWx0ID09PSBGQUxTRSApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdFcnJvciAjNTY1NzY2NzY3NS4gVW5hYmxlIHRvIGRlbGV0ZSBDUk9OIGpvYi4gUGxlYXNlIHNlZSB5b3VyIEJhY2t1cEJ1ZGR5IGVycm9yIGxvZyBmb3IgZGV0YWlscy4nICk7CgkJCQl9CgkJCQkkZGVsZXRlZF9jcm9uc1tdID0gJGNyb25faG9vayAuICcgLyAnIC4gJGNyb25fa2V5OyAvLyBBZGQgZGVsZXRlZCBjcm9uIHRvIGxpc3Qgb2YgZGVsZXRpb25zIGZvciBkaXNwbGF5LgoJCQkJCgkJCX0gZWxzZSB7IC8vIENyb24gbm90IGZvdW5kLCBlcnJvci4KCQkJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0ludmFsaWQgQ1JPTiBqb2IuIE5vdCBmb3VuZC4nLCB0cnVlICk7CgkJCX0KCQkJCgkJfQoJCQoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggX18oJ0RlbGV0ZWQgc2hlZHVsZWQgQ1JPTiBldmVudChzKTonLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8YnI+JyAuIGltcGxvZGUoICc8YnI+JywgJGRlbGV0ZWRfY3JvbnMgKSApOwoJCSRjcm9uID0gZ2V0X29wdGlvbignY3JvbicpOyAvLyBSZXNldCB0byBtb3N0IHVwIHRvIGRhdGUgc3RhdHVzIGZvciBjcm9uIGxpc3RpbmcgYmVsb3cuIFRha2VzIGludG8gYWNjb3VudCBkZWxldGlvbnMuCgl9Cn0KCgoKLy8gSGFuZGxlIFJVTk5JTkcgY3JvbiBqb2JzIG1hbnVhbGx5LgppZiAoICFlbXB0eSggJF9HRVRbJ3J1bl9jcm9uJ10gKSApIHsKCWlmICggZGVmaW5lZCggJ1BCX0RFTU9fTU9ERScgKSApIHsKCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdBY2Nlc3MgZGVuaWVkIGluIGRlbW8gbW9kZS4nLCB0cnVlICk7Cgl9IGVsc2UgewoJCSRjcm9uX3BhcnRzID0gZXhwbG9kZSggJ3wnLCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3J1bl9jcm9uJyApICk7CgkJJHRpbWVzdGFtcCA9ICRjcm9uX3BhcnRzWzBdOwoJCSRjcm9uX2hvb2sgPSAkY3Jvbl9wYXJ0c1sxXTsKCQkkY3Jvbl9rZXkgPSAkY3Jvbl9wYXJ0c1syXTsKCQkKCQlpZiAoIGlzc2V0KCAkY3JvblsgJHRpbWVzdGFtcCBdWyAkY3Jvbl9ob29rIF1bICRjcm9uX2tleSBdICkgKSB7IC8vIFJ1biBjcm9uLgoJCQkkY3Jvbl9hcnJheSA9ICRjcm9uWyAkdGltZXN0YW1wIF1bICRjcm9uX2hvb2sgXVsgJGNyb25fa2V5IF07IC8vIEdldCBjcm9uIGFycmF5IGJhc2VkIG9uIHBhc3NlZCB2YWx1ZXMuCgkJCQoJCQkvKgoJCQlpZiAoIGNvdW50KCAkY3Jvbl9hcnJheVsnYXJncyddICkgPT0gMSApIHsKCQkJCSRhcmdzID0gJGNyb25fYXJyYXlbJ2FyZ3MnXVswXTsKCQkJfSBlbHNlIHsKCQkJCSRhcmdzID0gJGNyb25fYXJyYXlbJ2FyZ3MnXTsKCQkJfQoJCQkqLwoJCQkKCQkJZG9fYWN0aW9uX3JlZl9hcnJheSggJGNyb25faG9vaywgJGNyb25fYXJyYXlbJ2FyZ3MnXSApOyAvLyBSdW4gdGhlIGNyb24gam9iIQoJCQkKCQkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnUmFuIENST04gZXZlbnQgYCcgLiAkY3Jvbl9ob29rIC4gJyAvICcgLiAkY3Jvbl9rZXkgLiAnYC4gSXRzIHNjaGVkdWxlIHdhcyBub3QgbW9kaWZpZWQuJyApOwoJCX0gZWxzZSB7IC8vIENyb24gbm90IGZvdW5kLCBlcnJvci4KCQkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnSW52YWxpZCBDUk9OIGpvYi4gTm90IGZvdW5kLicsIHRydWUgKTsKCQl9Cgl9Cn0KCgoKCgovLyBMb29wIHRocm91Z2ggZWFjaCBjcm9uIHRpbWUgdG8gY3JlYXRlICRjcm9ucyBhcnJheSBmb3IgZGlzcGxheWluZyBsYXRlci4KJGNyb25zID0gYXJyYXkoKTsKZm9yZWFjaCAoIChhcnJheSkgJGNyb24gYXMgJHRpbWUgPT4gJGNyb25faXRlbSApIHsKCWlmICggaXNfbnVtZXJpYyggJHRpbWUgKSApIHsKCQkvLyBMb29wIHRocm91Z2ggZWFjaCBzY2hlZHVsZSBmb3IgdGhpcyB0aW1lCgkJZm9yZWFjaCAoIChhcnJheSkgJGNyb25faXRlbSBhcyAkaG9va19uYW1lID0+ICRldmVudCApIHsKCQkJZm9yZWFjaCAoIChhcnJheSkgJGV2ZW50IGFzICRpdGVtX25hbWUgPT4gJGl0ZW0gKSB7CgkJCQkKCQkJCS8vIERldGVybWluZSBwZXJpb2QuCgkJCQlpZiAoICFlbXB0eSggJGl0ZW1bJ3NjaGVkdWxlJ10gKSApIHsgLy8gUmVjdXJyaW5nIHNjaGVkdWxlLgoJCQkJCSRwZXJpb2QgPSAkaXRlbVsnc2NoZWR1bGUnXTsKCQkJCX0gZWxzZSB7IC8vIE9uZS10aW1lIG9ubHkgY3Jvbi4KCQkJCQkkcGVyaW9kID0gX18oJ29uZSB0aW1lIG9ubHknLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCX0KCQkJCQoJCQkJLy8gRGV0ZXJtaW5lIGludGVydmFsLgoJCQkJaWYgKCAhZW1wdHkoICRpdGVtWydpbnRlcnZhbCddICkgKSB7CgkJCQkJJGludGVydmFsID0gJGl0ZW1bJ2ludGVydmFsJ10gLiAnIHNlY29uZHMnOwoJCQkJfSBlbHNlIHsKCQkJCQkkaW50ZXJ2YWwgPSBfXygnb25lIHRpbWUgb25seScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwoJCQkJfQoJCQkJCgkJCQkvLyBEZXRlcm1pbmUgYXJndW1lbnRzLgoJCQkJaWYgKCAhZW1wdHkoICRpdGVtWydhcmdzJ10gKSApIHsKCQkJCQkvLyRhcmd1bWVudHMgPSBpbXBsb2RlKCAnLCcsICRpdGVtWydhcmdzJ10gKTsKCQkJCQkkYXJndW1lbnRzID0gJyc7CgkJCQkJZm9yZWFjaCggJGl0ZW1bJ2FyZ3MnXSBhcyAkYXJnICkgewoJCQkJCQkkYXJndW1lbnRzIC49ICc8dGV4dGFyZWEgd3JhcD0ib2ZmIj4nIC4gcHJpbnRfciggJGFyZywgdHJ1ZSApIC4gJzwvdGV4dGFyZWE+JzsKCQkJCQkJLyoKCQkJCQkJaWYgKCBpc19hcnJheSggJGFyZyApICkgewoJCQkJCQkJJGFyZ3VtZW50cyAuPSAgJ1snIC4gcHJpbnRfciggJGFyZywgdHJ1ZSApIC4gJ10nOy8vcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPm11bHRpX2ltcGxvZGUoICRhcmcgLCAnOyAnICkKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCSRhcmd1bWVudHMgLj0gJGFyZzsKCQkJCQkJfQoJCQkJCQkqLwoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJJGFyZ3VtZW50cyA9IF9fKCdub25lJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7CgkJCQl9CgkJCQkKCQkJCS8vIFBvcHVsYXRlIGNyb25zIGFycmF5IGZvciBkaXNwbGF5aW5nIGxhdGVyLgoJCQkJJGNyb25zWyAkdGltZSAuICd8JyAuICRob29rX25hbWUgLiAnfCcgLiAkaXRlbV9uYW1lXSA9IGFycmF5KAoJCQkJCSc8c3BhbiB0aXRsZT1cJ0tleTogJyAuICRpdGVtX25hbWUgLiAnXCc+JyAuICRob29rX25hbWUgLiAnPC9zcGFuPicsCgkJCQkJcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPmRhdGUoIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5sb2NhbGl6ZV90aW1lKCAkdGltZSApICkgLiAnPGJyPjxzcGFuIGNsYXNzPSJkZXNjcmlwdGlvbiI+VGltZXN0YW1wOiAnIC4gJHRpbWUgLiAnPC9zcGFuPicsCgkJCQkJJHBlcmlvZCwKCQkJCQkkaW50ZXJ2YWwsCgkJCQkJJGFyZ3VtZW50cywKCQkJCSk7CgkJCQkKCQkJfSAvLyBFbmQgZm9yZWFjaC4KCQkJdW5zZXQoICRpdGVtICk7CgkJCXVuc2V0KCAkaXRlbV9uYW1lICk7CgkJfSAvLyBFbmQgZm9yZWFjaC4KCQl1bnNldCggJGV2ZW50ICk7CgkJdW5zZXQoICRob29rX25hbWUgKTsKCX0gLy8gRW5kIGlmIGlzX251bWVyaWMuCn0gLy8gRW5kIGZvcmVhY2guCnVuc2V0KCAkY3Jvbl9pdGVtICk7CnVuc2V0KCAkdGltZSApOwoKCgovLyBEaXNwbGF5IENST04gdGFibGUuCnBiX2JhY2t1cGJ1ZGR5OjokdWktPmxpc3RfdGFibGUoCgkkY3JvbnMsIC8vIEFycmF5IG9mIGNyb24gaXRlbXMgc2V0IGluIGNvZGUgc2VjdGlvbiBhYm92ZS4KCWFycmF5KAoJCSdhY3Rpb24nCQkJCQk9PglwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSAuICcjcGJfYmFja3VwYnVkZHlfZ2V0dGluZ19zdGFydGVkX3RhYl90b29scycsCgkJJ2NvbHVtbnMnCQkJCQk9PglhcnJheSgKCQkJCQkJCQkJCQlfXyggJ0V2ZW50JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCQkJCQkJX18oICdSdW4gVGltZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCV9fKCAnUGVyaW9kJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCQkJCQkJX18oICdJbnRlcnZhbCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCV9fKCAnQXJndW1lbnRzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCQkJCQkpLAoJCSdjc3MnCQkJCQkJPT4JCSd3aWR0aDogMTAwJTsnLAoJCSdob3Zlcl9hY3Rpb25zJwkJCQk9PglhcnJheSgKCQkJCQkJCQkJCQkncnVuX2Nyb24nCT0+CSdSdW4gY3JvbiBqb2Igbm93JywKCQkJCQkJCQkJCSksCgkJJ2J1bGtfYWN0aW9ucycJPT4JYXJyYXkoICdkZWxldGVfY3JvbicgPT4gJ0RlbGV0ZScgKSwKCQknaG92ZXJfYWN0aW9uX2NvbHVtbl9rZXknCT0+CScwJywKCSkKKTsKCgoKCgoKaWYgKCBlbXB0eSggJF9HRVRbJ3Nob3dfY3Jvbl9hcnJheSddICkgKSB7CgllY2hvICc8YnI+JzsKCWVjaG8gJzxjZW50ZXI+JzsKCWVjaG8gX18oJ0N1cnJlbnQgVGltZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzogJyAuIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5kYXRlKCB0aW1lKCkgKyAoIGdldF9vcHRpb24oICdnbXRfb2Zmc2V0JyApICogMzYwMCApICkgLiAnICgnIC4gdGltZSgpIC4gJykuICc7CgllY2hvICdBZGRpdGlvbmFsIGNyb24gY29udHJvbCBpcyBhdmFpbGFibGUgdmlhIHRoZSBmcmVlIHBsdWdpbiA8YSB0YXJnZXQ9Il9uZXciIGhyZWY9Imh0dHA6Ly93b3JkcHJlc3Mub3JnL2V4dGVuZC9wbHVnaW5zL3dwLWNyb24tY29udHJvbC8iPldQLUNyb24gQ29udHJvbDwvYT4gYnkgQXV0b21hdGljYy4gJzsKCWVjaG8gJzxhIGhyZWY9IicgLiBwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSAuICcmdGFiPTMmc2hvd19jcm9uX2FycmF5PXRydWUjcGJfYmFja3VwYnVkZHlfZ2V0dGluZ19zdGFydGVkX3RhYl90b29scyIgc3R5bGU9InRleHQtZGVjb3JhdGlvbjogbm9uZTsiPicgLiBfXygnRGlzcGxheSBDUk9OIERlYnVnZ2luZyBBcnJheScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzwvYT4nOwoJZWNobyAnPC9jZW50ZXI+JzsKfSBlbHNlIHsKCWVjaG8gX18oJ0N1cnJlbnQgVGltZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzogJyAuIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5kYXRlKCB0aW1lKCkgKyAoIGdldF9vcHRpb24oICdnbXRfb2Zmc2V0JyApICogMzYwMCApICkgLiAnICgnIC4gdGltZSgpIC4gJyknOwoJZWNobyAnPGJyPjx0ZXh0YXJlYSByZWFkb25seT0icmVhZG9ubHkiIHN0eWxlPSJ3aWR0aDogNzkzcHg7IiByb3dzPSIxMyIgY29scz0iNzUiIHdyYXA9Im9mZiI+JzsKCXByaW50X3IoICRjcm9uICk7CgllY2hvICc8L3RleHRhcmVhPic7Cn0KZWNobyAnPGJyPic7Cgp1bnNldCggJGNyb24gKTsKPz4K
###PACKDATA,FILE_END,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php
###PACKDATA,FILE_START,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php

###PACKDATA,FILE_END,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php
###PACKDATA,FILE_START,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
PD9waHAKLy8gU2lsZW5jZSBpcyBnb2xkZW4uCj8+
###PACKDATA,FILE_END,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
###PACKDATA,FILE_START,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
PGJyPjw/cGhwCiR0ZXN0cyA9IGFycmF5KCk7CgokdXBsb2Fkc19kaXJzID0gd3BfdXBsb2FkX2RpcigpOwokZGlyZWN0b3JpZXMgPSBhcnJheSgKCUFCU1BBVEggLiAnJywKCUFCU1BBVEggLiAnd3AtaW5jbHVkZXMvJywKCUFCU1BBVEggLiAnd3AtYWRtaW4vJywKCUFCU1BBVEggLiAnd3AtY29udGVudC90aGVtZXMvJywKCUFCU1BBVEggLiAnd3AtY29udGVudC9wbHVnaW5zLycsCglBQlNQQVRIIC4gJ3dwLWNvbnRlbnQvJywKCXJ0cmltKCAkdXBsb2Fkc19kaXJzWydiYXNlZGlyJ10sICdcXC8nICkgLiAnLycsCglBQlNQQVRIIC4gJ3dwLWluY2x1ZGVzLycsCgliYWNrdXBidWRkeV9jb3JlOjpnZXRCYWNrdXBEaXJlY3RvcnkoKSwKCWJhY2t1cGJ1ZGR5X2NvcmU6OmdldFRlbXBEaXJlY3RvcnkoKSwKCWJhY2t1cGJ1ZGR5X2NvcmU6OmdldExvZ0RpcmVjdG9yeSgpLAopOwoKCmZvcmVhY2goICRkaXJlY3RvcmllcyBhcyAkZGlyZWN0b3J5ICkgewoJCgkkbW9kZV9vY3RhbF9mb3VyID0gJzxpPicgLiBfXyggJ1Vua25vd24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2k+JzsKCSRvd25lciA9ICc8aT4nIC4gX18oICdVbmtub3duJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9pPic7CgkKCSRzdGF0cyA9IHBsdWdpbmJ1ZGR5X3N0YXQ6OnN0YXQoICRkaXJlY3RvcnkgKTsKCWlmICggZmFsc2UgIT09ICRzdGF0cyApIHsKCQkkbW9kZV9vY3RhbF9mb3VyID0gJHN0YXRzWydtb2RlX29jdGFsX2ZvdXInXTsKCQkkb3duZXIgPSAkc3RhdHNbJ3VpZCddIC4gJzonIC4gJHN0YXRzWydnaWQnXTsKCX0KCSR0aGlzX3Rlc3QgPSBhcnJheSgKCQkJCQkndGl0bGUnCQkJPT4JCScvJyAuIHN0cl9yZXBsYWNlKCBBQlNQQVRILCAnJywgJGRpcmVjdG9yeSApLAoJCQkJCSdzdWdnZXN0aW9uJwk9PgkJJzw9IDc1NScsCgkJCQkJJ3ZhbHVlJwkJCT0+CQkkbW9kZV9vY3RhbF9mb3VyLAoJCQkJCSdvd25lcicJCQk9PgkJJG93bmVyLAoJCQkJKTsKCWlmICggZmFsc2UgPT09ICRzdGF0cyB8fCAkbW9kZV9vY3RhbF9mb3VyID4gNzU1ICkgewoJCSR0aGlzX3Rlc3RbJ3N0YXR1cyddID0gX18oJ1dBUk5JTkcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCX0gZWxzZSB7CgkJJHRoaXNfdGVzdFsnc3RhdHVzJ10gPSBfXygnT0snLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCX0KCWFycmF5X3B1c2goICR0ZXN0cywgJHRoaXNfdGVzdCApOwoJCn0gLy8gZW5kIGZvcmVhY2guCgoKPz4KCjx0YWJsZSBjbGFzcz0id2lkZWZhdCI+Cgk8dGhlYWQ+CgkJPHRyIGNsYXNzPSJ0aGVhZCI+CgkJCTw/cGhwIAoJCQkJZWNobyAnPHRoPicsIF9fKCdSZWxhdGl2ZSBQYXRoJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwnPC90aD4nLAoJCQkJCSc8dGg+JywgX18oJ1N1Z2dlc3Rpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JywKCQkJCQknPHRoPicsIF9fKCdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSc8dGg+JywgX18oJ093bmVyIChVSUQ6R0lEKScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCS8vICc8dGg+JywgX18oJ1Jlc3VsdCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSAnPHRoIHN0eWxlPSJ3aWR0aDogNjBweDsiPicsIF9fKCdTdGF0dXMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JzsKCQkJPz4KCQk8L3RyPgoJPC90aGVhZD4KCTx0Zm9vdD4KCQk8dHIgY2xhc3M9InRoZWFkIj4KCQkJPD9waHAgCgkJCQllY2hvICc8dGg+JywgX18oJ1JlbGF0aXZlIFBhdGgnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCc8L3RoPicsCgkJCQkJJzx0aD4nLCBfXygnU3VnZ2VzdGlvbicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLAoJCQkJCSc8dGg+JywgX18oJ1ZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJJzx0aD4nLCBfXygnT3duZXIgKFVJRDpHSUQpJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJLy8gJzx0aD4nLCBfXygnUmVzdWx0JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsCgkJCQkJJzx0aCBzdHlsZT0id2lkdGg6IDYwcHg7Ij4nLCBfXygnU3RhdHVzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPic7CgkJCT8+CgkJPC90cj4KCTwvdGZvb3Q+Cgk8dGJvZHk+CgkJPD9waHAKCQlmb3JlYWNoKCAkdGVzdHMgYXMgJHRoaXNfdGVzdCApIHsKCQkJZWNobyAnPHRyIGNsYXNzPSJlbnRyeS1yb3cgYWx0ZXJuYXRlIj4nOwoJCQllY2hvICcJPHRkPicgLiAkdGhpc190ZXN0Wyd0aXRsZSddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nIC4gJHRoaXNfdGVzdFsnc3VnZ2VzdGlvbiddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nIC4gJHRoaXNfdGVzdFsndmFsdWUnXSAuICc8L3RkPic7CgkJCWVjaG8gJwk8dGQ+JyAuICR0aGlzX3Rlc3RbJ293bmVyJ10gLiAnPC90ZD4nOwoJCQkvL2VjaG8gJwk8dGQ+JyAuICR0aGlzX3Rlc3RbJ3N0YXR1cyddIC4gJzwvdGQ+JzsKCQkJZWNobyAnCTx0ZD4nOwoJCQlpZiAoICR0aGlzX3Rlc3RbJ3N0YXR1cyddID09IF9fKCdPSycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICkgewoJCQkJLy9lY2hvICc8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMjJFRTVCOyBib3JkZXI6IDFweCBzb2xpZCAjRTJFMkUyOyI+Jm5ic3A7Jm5ic3A7Jm5ic3A7PC9kaXY+JzsKCQkJCWVjaG8gJzxzcGFuIGNsYXNzPSJwYl9sYWJlbCBwYl9sYWJlbC1zdWNjZXNzIj5QYXNzPC9zcGFuPic7CgkJCX0gZWxzZWlmICggJHRoaXNfdGVzdFsnc3RhdHVzJ10gPT0gX18oJ0ZBSUwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApIHsKCQkJCS8vZWNobyAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0NGMzMzMzsgYm9yZGVyOiAxcHggc29saWQgI0UyRTJFMjsiPiZuYnNwOyZuYnNwOyZuYnNwOzwvZGl2Pic7CgkJCQllY2hvICc8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtaW1wb3J0YW50Ij5GYWlsPC9zcGFuPic7CgkJCX0gZWxzZWlmICggJHRoaXNfdGVzdFsnc3RhdHVzJ10gPT0gX18oJ1dBUk5JTkcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApIHsKCQkJCS8vZWNobyAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0ZFRkY3RjsgYm9yZGVyOiAxcHggc29saWQgI0UyRTJFMjsiPiZuYnNwOyZuYnNwOyZuYnNwOzwvZGl2Pic7CgkJCQllY2hvICc8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtd2FybmluZyI+V2FybmluZzwvc3Bhbj4nOwoJCQl9IGVsc2UgewoJCQkJZWNobyAndW5rbm93bic7CgkJCX0KCQkJZWNobyAnCTwvdGQ+JzsKCQkJZWNobyAnPC90cj4nOwoJCX0KCQk/PgoJPC90Ym9keT4KPC90YWJsZT4KCjxicj48YnI+
###PACKDATA,FILE_END,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
###PACKDATA,FILE_START,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php

###PACKDATA,FILE_END,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php
###PACKDATA,FILE_START,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php

###PACKDATA,FILE_END,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php
###PACKDATA,FILE_START,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
PD9waHAKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAnaWNpY2xlLmpzJyApOwpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdpY2ljbGVfc2V0dXAuanMnICk7CnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnaml0X2Jhc2UuY3NzJyApOwpwYl9iYWNrdXBidWRkeTo6bG9hZF9zdHlsZSggJ2ppdF9pY2ljbGUuY3NzJyApOwo/Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CglqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJCWpRdWVyeSgnI3BiX2ljaWNsZWxhdW5jaCcpLmNsaWNrKGZ1bmN0aW9uKGUpIHsKCQkJalF1ZXJ5KCcjcGJfaW5mb3Zpc19jb250YWluZXInKS5zbGlkZVRvZ2dsZSgpOwoJCQlqUXVlcnkucG9zdCggJzw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OmFqYXhfdXJsKCAnaWNpY2xlJyApOyA/PicsIAoJCQkJZnVuY3Rpb24oIGRhdGEgKSB7CgkJCQkJalF1ZXJ5KCcjaW5mb3ZpcycpLmh0bWwoJycpOwoJCQkJCWljaWNsZV9pbml0KCBkYXRhICk7CgkJCQl9CgkJCSk7CgkJfSk7CgkJCgkJalF1ZXJ5KCAnLnBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2J1dHRvbicgKS5jbGljayggZnVuY3Rpb24oKSB7CgkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19pbnRybyA+IC5wYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLnNob3coKTsKCQkJalF1ZXJ5LnBvc3QoICc8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjphamF4X3VybCggJ3NpdGVfc2l6ZV9saXN0aW5nJyApOyA/PiZwcm9maWxlPScgKyBqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfZmlsZWxpc3Rpbmdwcm9maWxlJyApLnZhbCgpLCAKCQkJCWZ1bmN0aW9uKCBkYXRhICkgewoJCQkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19jb250ZW50JyApLmh0bWwoIGRhdGEgKTsKCQkJCQlqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8gPiAucGJfYmFja3VwYnVkZHlfbG9hZGluZycgKS5oaWRlKCk7CgkJCQkJLy9qUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8nICkuc2xpZGVVcCgpOwoJCQkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19jb250ZW50JyApLnNsaWRlRG93bigpOwoJCQkJfQoJCQkpOwoJCQlqUXVlcnkoICdwYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLmhpZGUoKTsKCQl9ICk7CgkJCgl9KTsKPC9zY3JpcHQ+CgoKPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KCSNwYl9iYWNrdXBidWRkeV9zZXJ2ZXJpbmZvX2V4Y2x1c2lvbnM6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKCQktd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7CgkJd2lkdGg6IDExcHg7CgkJaGVpZ2h0OiAxMXB4OwoJfQoJCgkKCSNwYl9iYWNrdXBidWRkeV9zZXJ2ZXJpbmZvX2V4Y2x1c2lvbnM6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsKCQlib3JkZXItcmFkaXVzOiA4cHg7CgkJYm9yZGVyOiAycHggc29saWQgd2hpdGU7IC8qIHNob3VsZCBtYXRjaCBiYWNrZ3JvdW5kLCBjYW4ndCBiZSB0cmFuc3BhcmVudCAqLwoJCWJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjUpOwoJfeKAiwo8L3N0eWxlPgoKCgo8P3BocAplY2hvICc8ZGl2IGNsYXNzPSJwYl9odGl0bGUiPicgLiBfXygnRGlyZWN0b3J5IFNpemUgTGlzdGluZycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzwvZGl2Pjxicj4nOwplY2hvICc8YSBuYW1lPSJwYl9iYWNrdXBidWRkeV9kaXJfc2l6ZV9saXN0aW5nIj4mbmJzcDs8L2E+JzsKCmVjaG8gJzxkaXYgaWQ9InBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2ludHJvIj4nOwplY2hvIF9fKCdUaGlzIG9wdGlvbiBkaXNwbGF5cyBhIGNvbXByZWhlbnNpdmUgbGlzdGluZyBvZiBkaXJlY3RvcmllcyBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgc2l6ZSBvZiBhbGwgY29udGVudHMgd2l0aGluLCBpbmNsdWRpbmcgc3ViZGlyZWN0b3JpZXMuICBUaGlzIGlzIHVzZWZ1bCBmb3IgZmluZGluZyB3aGVyZSBzcGFjZSBpcyBiZWluZyB1c2VkLiBOb3RlIHRoYXQgdGhpcyBpcyBhIENQVSBpbnRlbnNpdmUgcHJvY2VzcyBhbmQgbWF5IHRha2UgYSB3aGlsZSB0byBsb2FkIGFuZCBldmVuIHRpbWUgb3V0IG9uIHNvbWUgc2VydmVycy4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKZWNobyAnPGJyIC8+PGJyIC8+JzsKCgplY2hvICdCYWNrdXAgcHJvZmlsZSBmb3IgY2FsY3VsYXRpbmcgZXhjbHVzaW9uczogJzsKZWNobyAnPHNlbGVjdCBpZD0icGJfYmFja3VwYnVkZHlfZmlsZWxpc3Rpbmdwcm9maWxlIj4nOwpmb3JlYWNoKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3Byb2ZpbGVzJ10gYXMgJHRoaXNfcHJvZmlsZV9pZCA9PiAkcHJvZmlsZSApIHsKCT8+Cgk8b3B0aW9uIHZhbHVlPSI8P3BocCBlY2hvICR0aGlzX3Byb2ZpbGVfaWQ7ID8+IiA8P3BocCBpZiAoICRwcm9maWxlX2lkID09ICR0aGlzX3Byb2ZpbGVfaWQgKSB7IGVjaG8gJ3NlbGVjdGVkJzsgfSA/Pj48P3BocCBlY2hvIGh0bWxlbnRpdGllcyggJHByb2ZpbGVbJ3RpdGxlJ10gKTsgPz4gKDw/cGhwIGVjaG8gJHByb2ZpbGVbJ3R5cGUnXTsgPz4pPC9hPgoJPD9waHAKfQplY2hvICc8L3NlbGVjdD4nOwoKCmVjaG8gJyZuYnNwOyZuYnNwOyZuYnNwOzxhIGNsYXNzPSJwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19idXR0b24gYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiBzdHlsZT0ibWFyZ2luLXRvcDogM3B4OyI+JywgX18oJ0Rpc3BsYXkgRGlyZWN0b3J5IFNpemUgTGlzdGluZycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCc8L2E+ICc7CmVjaG8gJzxzcGFuIGNsYXNzPSJwYl9iYWNrdXBidWRkeV9sb2FkaW5nIiBzdHlsZT0iZGlzcGxheTogbm9uZTsgbWFyZ2luLWxlZnQ6IDEwcHg7Ij48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9sb2FkaW5nLmdpZiIgYWx0PSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHRpdGxlPSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtM3B4OyIgLz48L3NwYW4+JzsKZWNobyAnPC9kaXY+PGJyPic7CmVjaG8gJzxkaXYgaWQ9InBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2NvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9kaXY+JzsKZWNobyAnPGJyPjxicj4nOwo/PgoKCgo8P3BocCBlY2hvICc8ZGl2IGNsYXNzPSJwYl9odGl0bGUiPicgLiBfXyggJ0ludGVyYWN0aXZlIEdyYXBoaWNhbCBEaXJlY3RvcnkgU2l6ZSBNYXAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2Rpdj48YnI+Jzs/Pgo8P3BocCBfZSgnVGhpcyBvcHRpb24gZGlzcGxheXMgYW4gaW50ZXJhY3RpdmUgZ3JhcGhpY2FsIHJlcHJlc2VudGF0aW9uIG9mIGRpcmVjdG9yaWVzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBzaXplIG9mIGFsbCBjb250ZW50cyB3aXRoaW4sIGluY2x1ZGluZyBzdWJkaXJlY3Rvcmllcy4KVGhpcyBpcyB1c2VmdWwgZm9yIGZpbmRpbmcgd2hlcmUgc3BhY2UgaXMgYmVpbmcgdXNlZC4gRGlyZWN0b3J5IGJveGVzIGFyZSBzY2FsZWQgYmFzZWQgb24gc2l6ZS4gQ2xpY2sgb24gYSBkaXJlY3RvcnkgYm94IHRvIG1vdmUgYXJvdW5kLiBOb3RlIHRoYXQgdGhpcwppcyBhIENQVSBpbnRlbnNpdmUgcHJvY2VzcyBhbmQgbWF5IHRha2UgYSB3aGlsZSB0byBsb2FkIGFuZCBldmVuIHRpbWUgb3V0IG9uIHNvbWUgc2VydmVycy4gU2xvd2VyIGNvbXB1dGVycyBtYXkgaGF2ZSB0cm91YmxlIG5hdmlnYXRpbmcgdGhlIGludGVyYWN0aXZlIG1hcC4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKPz4KPHA+PGEgaWQ9InBiX2ljaWNsZWxhdW5jaCIgY2xhc3M9ImJ1dHRvbiBidXR0b24tcHJpbWFyeSIgc3R5bGU9Im1hcmdpbi10b3A6IDNweDsiPjw/cGhwIF9lKCdEaXNwbGF5IEludGVyYWN0aXZlIEdyYXBoaWNhbCBEaXJlY3RvcnkgU2l6ZSBNYXAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/PjwvYT48L3A+CgoKPGxpbmsgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vY3NzL2ppdF9iYXNlLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiAvPgo8bGluayB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpOyA/Pi9jc3Mvaml0X2ljaWNsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz4KCgo8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgaWQ9InBiX2luZm92aXNfY29udGFpbmVyIj4KCTxkaXYgc3R5bGU9ImJhY2tncm91bmQ6ICMxQTFBMUE7Ij4KCQk8ZGl2IGlkPSJpbmZvdmlzIj4KCQkJPGJyIC8+PGJyIC8+CgkJCTxkaXYgc3R5bGU9Im1hcmdpbjogMzBweDsiPgoJCQkJPGg0IHN0eWxlPSJjb2xvcjogI0ZGRkZGRjsiPjxpbWcgc3JjPSI8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCk7ID8+L2ltYWdlcy9sb2FkaW5nX2xhcmdlX2RhcmtiZy5naWYiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogLTlweDsiIC8+IDw/cGhwIF9lKCdMb2FkaW5nIC4uLiBQbGVhc2Ugd2FpdCAuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/PjwvaDQ+CgkJCTwvZGl2PgoJCTwvZGl2PgoJPC9kaXY+CgkKCTxsYWJlbCBmb3I9InMtb3JpZW50YXRpb24iPjw/cGhwIF9lKCdPcmllbnRhdGlvbicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOz8+OiA8L2xhYmVsPgoJPHNlbGVjdCBuYW1lPSJzLW9yaWVudGF0aW9uIiBpZD0icy1vcmllbnRhdGlvbiI+CgkJPG9wdGlvbiB2YWx1ZT0iaCIgc2VsZWN0ZWQ+PD9waHAgX2UoJ2hvcml6b250YWwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/Pjwvb3B0aW9uPgoJCTxvcHRpb24gdmFsdWU9InYiPjw/cGhwIF9lKCd2ZXJ0aWNhbCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOz8+PC9vcHRpb24+Cgk8L3NlbGVjdD4KCQoJPGxhYmVsIGZvcj0iaS1sZXZlbHMtdG8tc2hvdyI+PD9waHAgX2UoJ01heCBsZXZlbHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/PjogPC9sYWJlbD4KCTxzZWxlY3QgIGlkPSJpLWxldmVscy10by1zaG93IiBuYW1lPSJpLWxldmVscy10by1zaG93IiBzdHlsZT0id2lkdGg6IDUwcHgiPgoJCTxvcHRpb24+YWxsPC9vcHRpb24+CgkJPG9wdGlvbj4xPC9vcHRpb24+CgkJPG9wdGlvbj4yPC9vcHRpb24+CgkJPG9wdGlvbiBzZWxlY3RlZD0ic2VsZWN0ZWQiPjM8L29wdGlvbj4KCQk8b3B0aW9uPjQ8L29wdGlvbj4KCQk8b3B0aW9uPjU8L29wdGlvbj4KCTwvc2VsZWN0PgoKCTxhIGlkPSJ1cGRhdGUiIGNsYXNzPSJ0aGVtZSBidXR0b24gd2hpdGUiPjw/cGhwIF9lKCdHbyBVcCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOz8+PC9hPgo8L2Rpdj4KPGJyPjxicj4KCgo8P3BocAokZGlyX2FycmF5ID0gYXJyYXkoKTsKJGljaWNsZV9hcnJheSA9IGFycmF5KCk7CiR0aW1lX3N0YXJ0ID0gbWljcm90aW1lKHRydWUpOwoKLy9lY2hvICc8cHJlPicgLiAkdGhpcy0+YnVpbGRfaWNpY2xlKCBBQlNQQVRILCBBQlNQQVRILCAnJyApIC4gJzwvcHJlPic7CgoKCgoKCgoKCgoKCj8+Cg==
###PACKDATA,FILE_END,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
###PACKDATA,FILE_START,/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php

###PACKDATA,FILE_END,/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
###PACKDATA,FILE_START,/destinations/stash/lib/class.itx_helper.php,importbuddy/classes/class.itx_helper.php

###PACKDATA,FILE_END,/destinations/stash/lib/class.itx_helper.php,importbuddy/classes/class.itx_helper.php
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
Q29weXJpZ2h0IChjKSAyMDA2LTIwMTAgUnlhbiBQYXJtYW4sIEZvbGVlbyBJbmMuLCBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoKUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlCnBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgoKCSogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YKCSAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgoKCSogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3QKCSAgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMKCSAgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgoKCSogTmVpdGhlciB0aGUgbmFtZSBvZiBSeWFuIFBhcm1hbiwgRm9sZWVvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvCgkgIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4KCSAgcGVybWlzc2lvbi4KClRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MKT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkKQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUlMKQU5EIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SCkNPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IKU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkKVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IKT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRQpQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4K
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
IyBSZXF1ZXN0Q29yZQoKUmVxdWVzdENvcmUgaXMgYSBsaWdodHdlaWdodCBjVVJMLWJhc2VkIEhUVFAgcmVxdWVzdC9yZXNwb25zZSBjbGFzcyB0aGF0IGxldmVyYWdlcyBNdWx0aUN1cmwgZm9yIHBhcmFsbGVsIHJlcXVlc3RzLgoKIyMjIFBFQVIgSFRUUF9SZXF1ZXN0PwoKUmVxdWVzdENvcmUgd2FzIHdyaXR0ZW4gYXMgYSByZXBsYWNlbWVudCBmb3IgW1BFQVIgSFRUUF9SZXF1ZXN0XShodHRwOi8vcGVhci5waHAubmV0L2h0dHBfcmVxdWVzdC8pLiBXaGlsZSBQRUFSIEhUVFBfUmVxdWVzdCBpcyBmdWxsLWZlYXR1cmVkIGFuZCBoZWF2eSwgUmVxdWVzdENvcmUgZmVhdHVyZXMgb25seSB0aGUgZXNzZW50aWFscyBhbmQgaXMgdmVyeSBsaWdodHdlaWdodC4gSXQgYWxzbyBsZXZlcmFnZXMgdGhlIGJhdGNoIHJlcXVlc3Qgc3VwcG9ydCBpbiBjVVJMJ3MgYGN1cmxfbXVsdGlfZXhlYygpYCB0byBlbmFibGUgbXVsdGktdGhyZWFkZWQgcmVxdWVzdHMgdGhhdCBmaXJlIGluIHBhcmFsbGVsLgoKIyMjIFJlZmVyZW5jZSBhbmQgRG93bmxvYWQKCllvdSBjYW4gZmluZCB0aGUgY2xhc3MgcmVmZXJlbmNlIGF0IDxodHRwOi8vc2t5enl4LmdpdGh1Yi5jb20vcmVxdWVzdGNvcmUvPi4gWW91IGNhbiBnZXQgdGhlIGNvZGUgZnJvbSA8aHR0cDovL2dpdGh1Yi5jb20vc2t5enl4L3JlcXVlc3Rjb3JlPi4KCiMjIyBMaWNlbnNlIGFuZCBDb3B5cmlnaHQKClRoaXMgY29kZSBpcyBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCwgUnlhbiBQYXJtYW4uIEhvd2V2ZXIsIEknbSBsaWNlbnNpbmcgdGhpcyBjb2RlIGZvciBvdGhlcnMgdG8gdXNlIHVuZGVyIHRoZSBbU2ltcGxpZmllZCBCU0QgbGljZW5zZV0oaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHApLgo=
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem

###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php

###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php
###PACKDATA,END
*/









